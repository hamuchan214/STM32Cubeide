
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b68  08004b68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b70  08004b70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000000c  08004b84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08004b84  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d181  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dc5  00000000  00000000  0002d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079e  00000000  00000000  0002f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240cc  00000000  00000000  0003014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9b7  00000000  00000000  0005421a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5bce  00000000  00000000  00060bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027b4  00000000  00000000  001467a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00148f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b10 	.word	0x08004b10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004b10 	.word	0x08004b10

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_UART_RxCpltCallback>:
uint16_t rcvlength;
uint8_t rcvbuffer[BUFF_SIZE];
uint8_t sndbuffer[BUFF_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    flagrcved = TRUE;           /* 受信完了フラグ設定 */
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <HAL_UART_RxCpltCallback+0x1c>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000118 	.word	0x20000118

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 faa5 	bl	8000a86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f83e 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f8fc 	bl	800073c <MX_GPIO_Init>
  MX_DMA_Init();
 8000544:	f000 f8d0 	bl	80006e8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000548:	f000 f884 	bl	8000654 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do
	  {
		  HAL_UART_Receive_IT(&hlpuart1, rcvbuffer, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	4916      	ldr	r1, [pc, #88]	; (80005a8 <main+0x74>)
 8000550:	4816      	ldr	r0, [pc, #88]	; (80005ac <main+0x78>)
 8000552:	f002 f97f 	bl	8002854 <HAL_UART_Receive_IT>

		  while(flagrcved == FALSE)
 8000556:	bf00      	nop
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <main+0x7c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0fb      	beq.n	8000558 <main+0x24>
		  {
			  ;
		  }

		  sndbuffer[rcvlength] = rcvbuffer[0];
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <main+0x80>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <main+0x74>)
 8000568:	7819      	ldrb	r1, [r3, #0]
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <main+0x84>)
 800056c:	5499      	strb	r1, [r3, r2]
		        rcvlength++;
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <main+0x80>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <main+0x80>)
 8000578:	801a      	strh	r2, [r3, #0]
		        flagrcved = FALSE;
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <main+0x7c>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
		      } while ((rcvbuffer[0] != CHAR_CR) && (rcvlength < BUFF_SIZE));
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <main+0x74>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b0d      	cmp	r3, #13
 8000586:	d003      	beq.n	8000590 <main+0x5c>
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x80>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	2bfe      	cmp	r3, #254	; 0xfe
 800058e:	d9dd      	bls.n	800054c <main+0x18>

		      /* 受信した内容を送信 */
		      HAL_UART_Transmit_IT(&hlpuart1, sndbuffer, rcvlength);
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <main+0x80>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4908      	ldr	r1, [pc, #32]	; (80005b8 <main+0x84>)
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <main+0x78>)
 800059a:	f002 f8b3 	bl	8002704 <HAL_UART_Transmit_IT>
		      rcvlength = 0;
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <main+0x80>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	801a      	strh	r2, [r3, #0]
  while (1)
 80005a4:	e7d2      	b.n	800054c <main+0x18>
 80005a6:	bf00      	nop
 80005a8:	2000011c 	.word	0x2000011c
 80005ac:	20000028 	.word	0x20000028
 80005b0:	20000118 	.word	0x20000118
 80005b4:	2000011a 	.word	0x2000011a
 80005b8:	2000021c 	.word	0x2000021c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2238      	movs	r2, #56	; 0x38
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fa74 	bl	8004ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005de:	2000      	movs	r0, #0
 80005e0:	f001 f80a 	bl	80015f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2340      	movs	r3, #64	; 0x40
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005fe:	2355      	movs	r3, #85	; 0x55
 8000600:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f8a4 	bl	8001760 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800061e:	f000 f8fb 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fba8 	bl	8001d90 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000646:	f000 f8e7 	bl	8000818 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800065c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	f001 ffe4 	bl	8002664 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f8b9 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	f004 f93a 	bl	8004922 <HAL_UARTEx_SetTxFifoThreshold>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006b4:	f000 f8b0 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f004 f96f 	bl	800499e <HAL_UARTEx_SetRxFifoThreshold>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006c6:	f000 f8a7 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	f004 f8f0 	bl	80048b0 <HAL_UARTEx_DisableFifoMode>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006d6:	f000 f89f 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000028 	.word	0x20000028
 80006e4:	40008000 	.word	0x40008000

080006e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_DMA_Init+0x50>)
 80006f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f2:	4a11      	ldr	r2, [pc, #68]	; (8000738 <MX_DMA_Init+0x50>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6493      	str	r3, [r2, #72]	; 0x48
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_DMA_Init+0x50>)
 80006fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_DMA_Init+0x50>)
 8000708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <MX_DMA_Init+0x50>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6493      	str	r3, [r2, #72]	; 0x48
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_DMA_Init+0x50>)
 8000714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	200b      	movs	r0, #11
 8000724:	f000 fafb 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000728:	200b      	movs	r0, #11
 800072a:	f000 fb12 	bl	8000d52 <HAL_NVIC_EnableIRQ>

}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_GPIO_Init+0xd4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a28      	ldr	r2, [pc, #160]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0320 	and.w	r3, r3, #32
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_GPIO_Init+0xd4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <MX_GPIO_Init+0xd4>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_GPIO_Init+0xd4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f000 fee1 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <MX_GPIO_Init+0xd8>)
 80007d6:	f000 fd51 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007da:	2320      	movs	r3, #32
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f000 fd42 	bl	800127c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2028      	movs	r0, #40	; 0x28
 80007fe:	f000 fa8e 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000802:	2028      	movs	r0, #40	; 0x28
 8000804:	f000 faa5 	bl	8000d52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	48000800 	.word	0x48000800

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800085a:	f000 ff71 	bl	8001740 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b09e      	sub	sp, #120	; 0x78
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2254      	movs	r2, #84	; 0x54
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f004 f913 	bl	8004ab8 <memset>
  if(huart->Instance==LPUART1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a37      	ldr	r2, [pc, #220]	; (8000974 <HAL_UART_MspInit+0x108>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d167      	bne.n	800096c <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800089c:	2320      	movs	r3, #32
 800089e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fc8d 	bl	80021c8 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b4:	f7ff ffb0 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_UART_MspInit+0x10c>)
 80008ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008bc:	4a2e      	ldr	r2, [pc, #184]	; (8000978 <HAL_UART_MspInit+0x10c>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <HAL_UART_MspInit+0x10c>)
 80008c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_UART_MspInit+0x10c>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a28      	ldr	r2, [pc, #160]	; (8000978 <HAL_UART_MspInit+0x10c>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <HAL_UART_MspInit+0x10c>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008e8:	230c      	movs	r3, #12
 80008ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008f8:	230c      	movs	r3, #12
 80008fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fcb9 	bl	800127c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_UART_MspInit+0x110>)
 800090c:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <HAL_UART_MspInit+0x114>)
 800090e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <HAL_UART_MspInit+0x110>)
 8000912:	2223      	movs	r2, #35	; 0x23
 8000914:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_UART_MspInit+0x110>)
 8000918:	2210      	movs	r2, #16
 800091a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_UART_MspInit+0x110>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_UART_MspInit+0x110>)
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_UART_MspInit+0x110>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <HAL_UART_MspInit+0x110>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_UART_MspInit+0x110>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_UART_MspInit+0x110>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000940:	480e      	ldr	r0, [pc, #56]	; (800097c <HAL_UART_MspInit+0x110>)
 8000942:	f000 fa21 	bl	8000d88 <HAL_DMA_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800094c:	f7ff ff64 	bl	8000818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_UART_MspInit+0x110>)
 8000954:	679a      	str	r2, [r3, #120]	; 0x78
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_UART_MspInit+0x110>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	205b      	movs	r0, #91	; 0x5b
 8000962:	f000 f9dc 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000966:	205b      	movs	r0, #91	; 0x5b
 8000968:	f000 f9f3 	bl	8000d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3778      	adds	r7, #120	; 0x78
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40008000 	.word	0x40008000
 8000978:	40021000 	.word	0x40021000
 800097c:	200000b8 	.word	0x200000b8
 8000980:	40020008 	.word	0x40020008

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f8ac 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <DMA1_Channel1_IRQHandler+0x10>)
 80009de:	f000 fb3b 	bl	8001058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000b8 	.word	0x200000b8

080009ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009f4:	f000 fddc 	bl	80015b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <LPUART1_IRQHandler+0x10>)
 8000a02:	f001 ff7d 	bl	8002900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000028 	.word	0x20000028

08000a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <SystemInit+0x20>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <SystemInit+0x20>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490e      	ldr	r1, [pc, #56]	; (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0b      	ldr	r4, [pc, #44]	; (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5e:	f7ff ffd7 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f004 f831 	bl	8004ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a66:	f7ff fd65 	bl	8000534 <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   r0, =_estack
 8000a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a78:	08004b78 	.word	0x08004b78
  ldr r2, =_sbss
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a80:	20000320 	.word	0x20000320

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>

08000a86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f939 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f80e 	bl	8000ab8 <HAL_InitTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e001      	b.n	8000aac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa8:	f7ff febc 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aac:	79fb      	ldrb	r3, [r7, #7]

}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_InitTick+0x68>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d022      	beq.n	8000b12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_InitTick+0x6c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_InitTick+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f944 	bl	8000d6e <HAL_SYSTICK_Config>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10f      	bne.n	8000b0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d809      	bhi.n	8000b06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af2:	2200      	movs	r2, #0
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	f04f 30ff 	mov.w	r0, #4294967295
 8000afa:	f000 f910 	bl	8000d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0x70>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e007      	b.n	8000b16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	e004      	b.n	8000b16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e001      	b.n	8000b16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x20>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b3c:	6013      	str	r3, [r2, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	2000031c 	.word	0x2000031c
 8000b4c:	20000008 	.word	0x20000008

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	2000031c 	.word	0x2000031c

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff8e 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff29 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff40 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff90 	bl	8000c5c <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5f 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff33 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffa4 	bl	8000cc4 <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e08d      	b.n	8000eb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <HAL_DMA_Init+0x138>)
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d80f      	bhi.n	8000dc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <HAL_DMA_Init+0x13c>)
 8000dae:	4413      	add	r3, r2
 8000db0:	4a45      	ldr	r2, [pc, #276]	; (8000ec8 <HAL_DMA_Init+0x140>)
 8000db2:	fba2 2303 	umull	r2, r3, r2, r3
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	009a      	lsls	r2, r3, #2
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a42      	ldr	r2, [pc, #264]	; (8000ecc <HAL_DMA_Init+0x144>)
 8000dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc4:	e00e      	b.n	8000de4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <HAL_DMA_Init+0x148>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a3d      	ldr	r2, [pc, #244]	; (8000ec8 <HAL_DMA_Init+0x140>)
 8000dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	009a      	lsls	r2, r3, #2
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a3c      	ldr	r2, [pc, #240]	; (8000ed4 <HAL_DMA_Init+0x14c>)
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2202      	movs	r2, #2
 8000de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f9be 	bl	80011b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e44:	d102      	bne.n	8000e4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d010      	beq.n	8000e8c <HAL_DMA_Init+0x104>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d80c      	bhi.n	8000e8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f9de 	bl	8001234 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	e008      	b.n	8000e9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40020407 	.word	0x40020407
 8000ec4:	bffdfff8 	.word	0xbffdfff8
 8000ec8:	cccccccd 	.word	0xcccccccd
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	bffdfbf8 	.word	0xbffdfbf8
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d005      	beq.n	8000efc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	e037      	b.n	8000f6c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 020e 	bic.w	r2, r2, #14
 8000f0a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f1a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f48:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00c      	beq.n	8000f6c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f60:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f6a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e047      	b.n	800104e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 020e 	bic.w	r2, r2, #14
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0201 	bic.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f003 021f 	and.w	r2, r3, #31
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8001000:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800100a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00c      	beq.n	800102e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001022:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800102c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	4798      	blx	r3
    }
  }
  return status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	2204      	movs	r2, #4
 800107a:	409a      	lsls	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d026      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x7a>
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	2b00      	cmp	r3, #0
 800108c:	d021      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0320 	and.w	r3, r3, #32
 8001098:	2b00      	cmp	r3, #0
 800109a:	d107      	bne.n	80010ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0204 	bic.w	r2, r2, #4
 80010aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	2104      	movs	r1, #4
 80010ba:	fa01 f202 	lsl.w	r2, r1, r2
 80010be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d071      	beq.n	80011ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010d0:	e06c      	b.n	80011ac <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	2202      	movs	r2, #2
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d02e      	beq.n	8001144 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d029      	beq.n	8001144 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0320 	and.w	r3, r3, #32
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10b      	bne.n	8001116 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 020a 	bic.w	r2, r2, #10
 800110c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 021f 	and.w	r2, r3, #31
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	2102      	movs	r1, #2
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	2b00      	cmp	r3, #0
 8001138:	d038      	beq.n	80011ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001142:	e033      	b.n	80011ac <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2208      	movs	r2, #8
 800114e:	409a      	lsls	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d02a      	beq.n	80011ae <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d025      	beq.n	80011ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 020e 	bic.w	r2, r2, #14
 8001170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f003 021f 	and.w	r2, r3, #31
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
}
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d802      	bhi.n	80011d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e001      	b.n	80011d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80011d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	3b08      	subs	r3, #8
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	009a      	lsls	r2, r3, #2
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001202:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	2201      	movs	r2, #1
 800120c:	409a      	lsls	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40020407 	.word	0x40020407
 8001224:	40020800 	.word	0x40020800
 8001228:	40020820 	.word	0x40020820
 800122c:	cccccccd 	.word	0xcccccccd
 8001230:	40020880 	.word	0x40020880

08001234 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001256:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3b01      	subs	r3, #1
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	2201      	movs	r2, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	1000823f 	.word	0x1000823f
 8001278:	40020940 	.word	0x40020940

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800128a:	e15a      	b.n	8001542 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 814c 	beq.w	800153c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d005      	beq.n	80012bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f003 0201 	and.w	r2, r3, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	6939      	ldr	r1, [r7, #16]
 80013aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0203 	and.w	r2, r3, #3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80a6 	beq.w	800153c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f0:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f4:	4a5a      	ldr	r2, [pc, #360]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6613      	str	r3, [r2, #96]	; 0x60
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 80013fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001408:	4a56      	ldr	r2, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001432:	d01f      	beq.n	8001474 <HAL_GPIO_Init+0x1f8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_GPIO_Init+0x2ec>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d019      	beq.n	8001470 <HAL_GPIO_Init+0x1f4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_GPIO_Init+0x2f0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_GPIO_Init+0x1f0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <HAL_GPIO_Init+0x2f4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_GPIO_Init+0x1ec>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a49      	ldr	r2, [pc, #292]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x1e8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_GPIO_Init+0x1e4>
 800145c:	2305      	movs	r3, #5
 800145e:	e00a      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001460:	2306      	movs	r3, #6
 8001462:	e008      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001464:	2304      	movs	r3, #4
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001468:	2303      	movs	r3, #3
 800146a:	e004      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_GPIO_Init+0x1fa>
 8001474:	2300      	movs	r3, #0
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4093      	lsls	r3, r2
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001486:	4937      	ldr	r1, [pc, #220]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_GPIO_Init+0x300>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_GPIO_Init+0x300>)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_GPIO_Init+0x300>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e2:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_GPIO_Init+0x300>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_GPIO_Init+0x300>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_GPIO_Init+0x300>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_GPIO_Init+0x300>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_GPIO_Init+0x300>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f ae9d 	bne.w	800128c <HAL_GPIO_Init+0x10>
  }
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800
 8001570:	48000c00 	.word	0x48000c00
 8001574:	48001000 	.word	0x48001000
 8001578:	48001400 	.word	0x48001400
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f806 	bl	80015e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d141      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001606:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800160e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001612:	d131      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001614:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161a:	4a46      	ldr	r2, [pc, #280]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	4b43      	ldr	r3, [pc, #268]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800162c:	4a41      	ldr	r2, [pc, #260]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001632:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2232      	movs	r2, #50	; 0x32
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	4a3f      	ldr	r2, [pc, #252]	; (800173c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	0c9b      	lsrs	r3, r3, #18
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800164a:	e002      	b.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3b01      	subs	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165e:	d102      	bne.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f2      	bne.n	800164c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d158      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e057      	b.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001678:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167e:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001688:	e04d      	b.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001690:	d141      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800169a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169e:	d131      	bne.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b8:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2232      	movs	r2, #50	; 0x32
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9b      	lsrs	r3, r3, #18
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d6:	e002      	b.n	80016de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3b01      	subs	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ea:	d102      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f2      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fe:	d112      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e011      	b.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001714:	e007      	b.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001724:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40007000 	.word	0x40007000
 8001738:	20000000 	.word	0x20000000
 800173c:	431bde83 	.word	0x431bde83

08001740 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174e:	6093      	str	r3, [r2, #8]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40007000 	.word	0x40007000

08001760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e306      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d075      	beq.n	800186a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177e:	4b97      	ldr	r3, [pc, #604]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001788:	4b94      	ldr	r3, [pc, #592]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d102      	bne.n	800179e <HAL_RCC_OscConfig+0x3e>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_OscConfig+0x44>
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d10b      	bne.n	80017bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	4b8d      	ldr	r3, [pc, #564]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d05b      	beq.n	8001868 <HAL_RCC_OscConfig+0x108>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d157      	bne.n	8001868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e2e1      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c4:	d106      	bne.n	80017d4 <HAL_RCC_OscConfig+0x74>
 80017c6:	4b85      	ldr	r3, [pc, #532]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a84      	ldr	r2, [pc, #528]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e01d      	b.n	8001810 <HAL_RCC_OscConfig+0xb0>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x98>
 80017de:	4b7f      	ldr	r3, [pc, #508]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7e      	ldr	r2, [pc, #504]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b7c      	ldr	r3, [pc, #496]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7b      	ldr	r2, [pc, #492]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0xb0>
 80017f8:	4b78      	ldr	r3, [pc, #480]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a77      	ldr	r2, [pc, #476]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b75      	ldr	r3, [pc, #468]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a74      	ldr	r2, [pc, #464]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f99a 	bl	8000b50 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff f996 	bl	8000b50 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e2a6      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001832:	4b6a      	ldr	r3, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0xc0>
 800183e:	e014      	b.n	800186a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff f986 	bl	8000b50 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff f982 	bl	8000b50 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e292      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185a:	4b60      	ldr	r3, [pc, #384]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0xe8>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d075      	beq.n	8001962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001876:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d102      	bne.n	8001896 <HAL_RCC_OscConfig+0x136>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d002      	beq.n	800189c <HAL_RCC_OscConfig+0x13c>
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d11f      	bne.n	80018dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x154>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e265      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b49      	ldr	r3, [pc, #292]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	4946      	ldr	r1, [pc, #280]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018c8:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <HAL_RCC_OscConfig+0x280>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff f8f3 	bl	8000ab8 <HAL_InitTick>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d043      	beq.n	8001960 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e251      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d023      	beq.n	800192c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e4:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a3c      	ldr	r2, [pc, #240]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff f92e 	bl	8000b50 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff f92a 	bl	8000b50 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e23a      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800190a:	4b34      	ldr	r3, [pc, #208]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	061b      	lsls	r3, r3, #24
 8001924:	492d      	ldr	r1, [pc, #180]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
 800192a:	e01a      	b.n	8001962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f90a 	bl	8000b50 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff f906 	bl	8000b50 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e216      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x1e0>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d041      	beq.n	80019f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d01c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 8001978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197c:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff f8e3 	bl	8000b50 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff f8df 	bl	8000b50 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1ef      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0ef      	beq.n	800198e <HAL_RCC_OscConfig+0x22e>
 80019ae:	e020      	b.n	80019f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_RCC_OscConfig+0x27c>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff f8c6 	bl	8000b50 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c6:	e00d      	b.n	80019e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff f8c2 	bl	8000b50 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d906      	bls.n	80019e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1d2      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e4:	4b8c      	ldr	r3, [pc, #560]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ea      	bne.n	80019c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80a6 	beq.w	8001b4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2b4>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_RCC_OscConfig+0x2b6>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00d      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b7f      	ldr	r3, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a7e      	ldr	r2, [pc, #504]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
 8001a26:	4b7c      	ldr	r3, [pc, #496]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a32:	2301      	movs	r3, #1
 8001a34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a36:	4b79      	ldr	r3, [pc, #484]	; (8001c1c <HAL_RCC_OscConfig+0x4bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d118      	bne.n	8001a74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a42:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <HAL_RCC_OscConfig+0x4bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a75      	ldr	r2, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x4bc>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff f87f 	bl	8000b50 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff f87b 	bl	8000b50 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e18b      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <HAL_RCC_OscConfig+0x4bc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d108      	bne.n	8001a8e <HAL_RCC_OscConfig+0x32e>
 8001a7c:	4b66      	ldr	r3, [pc, #408]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a65      	ldr	r2, [pc, #404]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8c:	e024      	b.n	8001ad8 <HAL_RCC_OscConfig+0x378>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d110      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x358>
 8001a96:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9c:	4a5e      	ldr	r2, [pc, #376]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab6:	e00f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x378>
 8001ab8:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d016      	beq.n	8001b0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f836 	bl	8000b50 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f832 	bl	8000b50 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e140      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ed      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x388>
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f81f 	bl	8000b50 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff f81b 	bl	8000b50 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e129      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ed      	bne.n	8001b16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	4a34      	ldr	r2, [pc, #208]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03c      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b66:	4a2c      	ldr	r2, [pc, #176]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7fe ffee 	bl	8000b50 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b78:	f7fe ffea 	bl	8000b50 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0fa      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8a:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ef      	beq.n	8001b78 <HAL_RCC_OscConfig+0x418>
 8001b98:	e01b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7fe ffd1 	bl	8000b50 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb2:	f7fe ffcd 	bl	8000b50 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0dd      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1ef      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80d1 	beq.w	8001d7e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	f000 808b 	beq.w	8001d00 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d15e      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_RCC_OscConfig+0x4b8>)
 8001bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7fe ffa7 	bl	8000b50 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c04:	e00c      	b.n	8001c20 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7fe ffa3 	bl	8000b50 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d905      	bls.n	8001c20 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0b3      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c20:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ec      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2c:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	4b56      	ldr	r3, [pc, #344]	; (8001d8c <HAL_RCC_OscConfig+0x62c>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6a11      	ldr	r1, [r2, #32]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	4311      	orrs	r1, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c46:	0212      	lsls	r2, r2, #8
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	3a01      	subs	r2, #1
 8001c52:	0552      	lsls	r2, r2, #21
 8001c54:	4311      	orrs	r1, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c5a:	0852      	lsrs	r2, r2, #1
 8001c5c:	3a01      	subs	r2, #1
 8001c5e:	0652      	lsls	r2, r2, #25
 8001c60:	4311      	orrs	r1, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c66:	06d2      	lsls	r2, r2, #27
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	4947      	ldr	r1, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a44      	ldr	r2, [pc, #272]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c7c:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a41      	ldr	r2, [pc, #260]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7fe ff62 	bl	8000b50 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7fe ff5e 	bl	8000b50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e06e      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x530>
 8001cae:	e066      	b.n	8001d7e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a34      	ldr	r2, [pc, #208]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001cbc:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a2e      	ldr	r2, [pc, #184]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001cce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7fe ff3a 	bl	8000b50 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7fe ff36 	bl	8000b50 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e046      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x580>
 8001cfe:	e03e      	b.n	8001d7e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e039      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d12c      	bne.n	8001d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d123      	bne.n	8001d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d11b      	bne.n	8001d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d113      	bne.n	8001d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	3b01      	subs	r3, #1
 8001d74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	019f800c 	.word	0x019f800c

08001d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e11e      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b91      	ldr	r3, [pc, #580]	; (8001ff0 <HAL_RCC_ClockConfig+0x260>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d910      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b8e      	ldr	r3, [pc, #568]	; (8001ff0 <HAL_RCC_ClockConfig+0x260>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 020f 	bic.w	r2, r3, #15
 8001dbe:	498c      	ldr	r1, [pc, #560]	; (8001ff0 <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b8a      	ldr	r3, [pc, #552]	; (8001ff0 <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e106      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d073      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d129      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dec:	4b81      	ldr	r3, [pc, #516]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0f4      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dfc:	f000 f99e 	bl	800213c <RCC_GetSysClockFreqFromPLLSource>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4a7c      	ldr	r2, [pc, #496]	; (8001ff8 <HAL_RCC_ClockConfig+0x268>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d93f      	bls.n	8001e8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d033      	beq.n	8001e8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d12f      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e32:	4a70      	ldr	r2, [pc, #448]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e024      	b.n	8001e8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e48:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0c6      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0be      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e68:	f000 f8ce 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4a61      	ldr	r2, [pc, #388]	; (8001ff8 <HAL_RCC_ClockConfig+0x268>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d909      	bls.n	8001e8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e76:	4b5f      	ldr	r3, [pc, #380]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4957      	ldr	r1, [pc, #348]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9c:	f7fe fe58 	bl	8000b50 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7fe fe54 	bl	8000b50 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e095      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1eb      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a42      	ldr	r2, [pc, #264]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001efc:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f04:	4a3b      	ldr	r2, [pc, #236]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4936      	ldr	r1, [pc, #216]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b80      	cmp	r3, #128	; 0x80
 8001f24:	d105      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f26:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d21d      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f40:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 020f 	bic.w	r2, r3, #15
 8001f48:	4929      	ldr	r1, [pc, #164]	; (8001ff0 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fdfe 	bl	8000b50 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fdfa 	bl	8000b50 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e03b      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1ed      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4917      	ldr	r1, [pc, #92]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490f      	ldr	r1, [pc, #60]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fba:	f000 f825 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCC_ClockConfig+0x264>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490c      	ldr	r1, [pc, #48]	; (8001ffc <HAL_RCC_ClockConfig+0x26c>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x270>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x274>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fd6a 	bl	8000ab8 <HAL_InitTick>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	04c4b400 	.word	0x04c4b400
 8001ffc:	08004b28 	.word	0x08004b28
 8002000:	20000000 	.word	0x20000000
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d102      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800201a:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	e047      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d102      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	e03e      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b0c      	cmp	r3, #12
 800203c:	d136      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3301      	adds	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d10c      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800205c:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002066:	68d2      	ldr	r2, [r2, #12]
 8002068:	0a12      	lsrs	r2, r2, #8
 800206a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
      break;
 8002074:	e00c      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002076:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002080:	68d2      	ldr	r2, [r2, #12]
 8002082:	0a12      	lsrs	r2, r2, #8
 8002084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]
      break;
 800208e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0e5b      	lsrs	r3, r3, #25
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	3301      	adds	r3, #1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	e001      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020b0:	693b      	ldr	r3, [r7, #16]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	016e3600 	.word	0x016e3600

080020cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <HAL_RCC_GetPCLK1Freq+0x28>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	08004b38 	.word	0x08004b38

08002110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002114:	f7ff ffda 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0adb      	lsrs	r3, r3, #11
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4904      	ldr	r1, [pc, #16]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	08004b38 	.word	0x08004b38

0800213c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d10c      	bne.n	800217a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800216a:	68d2      	ldr	r2, [r2, #12]
 800216c:	0a12      	lsrs	r2, r2, #8
 800216e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
    break;
 8002178:	e00c      	b.n	8002194 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002184:	68d2      	ldr	r2, [r2, #12]
 8002186:	0a12      	lsrs	r2, r2, #8
 8002188:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    break;
 8002192:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0e5b      	lsrs	r3, r3, #25
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	3301      	adds	r3, #1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80021ae:	687b      	ldr	r3, [r7, #4]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40021000 	.word	0x40021000
 80021c0:	016e3600 	.word	0x016e3600
 80021c4:	00f42400 	.word	0x00f42400

080021c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021d0:	2300      	movs	r3, #0
 80021d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021d4:	2300      	movs	r3, #0
 80021d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8098 	beq.w	8002316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10d      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002212:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a39      	ldr	r2, [pc, #228]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800221e:	f7fe fc97 	bl	8000b50 <HAL_GetTick>
 8002222:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002224:	e009      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7fe fc93 	bl	8000b50 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d902      	bls.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	74fb      	strb	r3, [r7, #19]
        break;
 8002238:	e005      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ef      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d159      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002256:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d01e      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	d019      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800228c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fc53 	bl	8000b50 <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ac:	e00b      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fc4f 	bl	8000b50 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d902      	bls.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	74fb      	strb	r3, [r7, #19]
            break;
 80022c4:	e006      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ec      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10b      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	4903      	ldr	r1, [pc, #12]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022f0:	e008      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022f2:	7cfb      	ldrb	r3, [r7, #19]
 80022f4:	74bb      	strb	r3, [r7, #18]
 80022f6:	e005      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002304:	7c7b      	ldrb	r3, [r7, #17]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230a:	4ba7      	ldr	r3, [pc, #668]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	4aa6      	ldr	r2, [pc, #664]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002322:	4ba1      	ldr	r3, [pc, #644]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f023 0203 	bic.w	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	499d      	ldr	r1, [pc, #628]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002344:	4b98      	ldr	r3, [pc, #608]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f023 020c 	bic.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4995      	ldr	r1, [pc, #596]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002366:	4b90      	ldr	r3, [pc, #576]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	498c      	ldr	r1, [pc, #560]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002388:	4b87      	ldr	r3, [pc, #540]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	4984      	ldr	r1, [pc, #528]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	497b      	ldr	r1, [pc, #492]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023cc:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4973      	ldr	r1, [pc, #460]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ee:	4b6e      	ldr	r3, [pc, #440]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	496a      	ldr	r1, [pc, #424]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002410:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4962      	ldr	r1, [pc, #392]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	4959      	ldr	r1, [pc, #356]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002454:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	4951      	ldr	r1, [pc, #324]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002476:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	4948      	ldr	r1, [pc, #288]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4940      	ldr	r1, [pc, #256]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024d0:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	4932      	ldr	r1, [pc, #200]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ee:	d105      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a2c      	ldr	r2, [pc, #176]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	4924      	ldr	r1, [pc, #144]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002526:	d105      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002532:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d015      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	4916      	ldr	r1, [pc, #88]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800255e:	d105      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d019      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4908      	ldr	r1, [pc, #32]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002596:	d109      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a02      	ldr	r2, [pc, #8]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a2:	60d3      	str	r3, [r2, #12]
 80025a4:	e002      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d015      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4926      	ldr	r1, [pc, #152]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025d6:	d105      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a20      	ldr	r2, [pc, #128]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d015      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	4918      	ldr	r1, [pc, #96]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260e:	d105      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002610:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d015      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800262a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800262e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	490a      	ldr	r1, [pc, #40]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002646:	d105      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800264e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002652:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002654:	7cbb      	ldrb	r3, [r7, #18]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000

08002664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e042      	b.n	80026fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7fe f8ef 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2224      	movs	r2, #36	; 0x24
 8002692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fc62 	bl	8002f70 <UART_SetConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e022      	b.n	80026fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 ff52 	bl	8003568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 ffd9 	bl	80036ac <UART_CheckIdleState>
 80026fa:	4603      	mov	r3, r0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002704:	b480      	push	{r7}
 8002706:	b091      	sub	sp, #68	; 0x44
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002718:	2b20      	cmp	r3, #32
 800271a:	f040 808c 	bne.w	8002836 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_UART_Transmit_IT+0x26>
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e084      	b.n	8002838 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_UART_Transmit_IT+0x38>
 8002738:	2302      	movs	r3, #2
 800273a:	e07d      	b.n	8002838 <HAL_UART_Transmit_IT+0x134>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	88fa      	ldrh	r2, [r7, #6]
 800274e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2221      	movs	r2, #33	; 0x21
 800276c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002778:	d12e      	bne.n	80027d8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002782:	d107      	bne.n	8002794 <HAL_UART_Transmit_IT+0x90>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d103      	bne.n	8002794 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a2d      	ldr	r2, [pc, #180]	; (8002844 <HAL_UART_Transmit_IT+0x140>)
 8002790:	675a      	str	r2, [r3, #116]	; 0x74
 8002792:	e002      	b.n	800279a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <HAL_UART_Transmit_IT+0x144>)
 8002798:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3308      	adds	r3, #8
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	e853 3f00 	ldrex	r3, [r3]
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3308      	adds	r3, #8
 80027c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c2:	637a      	str	r2, [r7, #52]	; 0x34
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e5      	bne.n	80027a2 <HAL_UART_Transmit_IT+0x9e>
 80027d6:	e02c      	b.n	8002832 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e0:	d107      	bne.n	80027f2 <HAL_UART_Transmit_IT+0xee>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a17      	ldr	r2, [pc, #92]	; (800284c <HAL_UART_Transmit_IT+0x148>)
 80027ee:	675a      	str	r2, [r3, #116]	; 0x74
 80027f0:	e002      	b.n	80027f8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_UART_Transmit_IT+0x14c>)
 80027f6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	613b      	str	r3, [r7, #16]
   return(result);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	69f9      	ldr	r1, [r7, #28]
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	61bb      	str	r3, [r7, #24]
   return(result);
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e6      	bne.n	8002800 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3744      	adds	r7, #68	; 0x44
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	08003e7b 	.word	0x08003e7b
 8002848:	08003d9b 	.word	0x08003d9b
 800284c:	08003cd9 	.word	0x08003cd9
 8002850:	08003c21 	.word	0x08003c21

08002854 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	2b20      	cmp	r3, #32
 800286a:	d142      	bne.n	80028f2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Receive_IT+0x24>
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e03b      	b.n	80028f4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_UART_Receive_IT+0x36>
 8002886:	2302      	movs	r3, #2
 8002888:	e034      	b.n	80028f4 <HAL_UART_Receive_IT+0xa0>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_UART_Receive_IT+0xa8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01f      	beq.n	80028e2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d018      	beq.n	80028e2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	e853 3f00 	ldrex	r3, [r3]
 80028bc:	613b      	str	r3, [r7, #16]
   return(result);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	623b      	str	r3, [r7, #32]
 80028d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	69f9      	ldr	r1, [r7, #28]
 80028d4:	6a3a      	ldr	r2, [r7, #32]
 80028d6:	e841 2300 	strex	r3, r2, [r1]
 80028da:	61bb      	str	r3, [r7, #24]
   return(result);
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e6      	bne.n	80028b0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fff3 	bl	80038d4 <UART_Start_Receive_IT>
 80028ee:	4603      	mov	r3, r0
 80028f0:	e000      	b.n	80028f4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3728      	adds	r7, #40	; 0x28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40008000 	.word	0x40008000

08002900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b0ba      	sub	sp, #232	; 0xe8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800292a:	f640 030f 	movw	r3, #2063	; 0x80f
 800292e:	4013      	ands	r3, r2
 8002930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d11b      	bne.n	8002974 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800293c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d009      	beq.n	8002974 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 82d6 	beq.w	8002f16 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
      }
      return;
 8002972:	e2d0      	b.n	8002f16 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 811f 	beq.w	8002bbc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800297e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002982:	4b8b      	ldr	r3, [pc, #556]	; (8002bb0 <HAL_UART_IRQHandler+0x2b0>)
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800298a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800298e:	4b89      	ldr	r3, [pc, #548]	; (8002bb4 <HAL_UART_IRQHandler+0x2b4>)
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8112 	beq.w	8002bbc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d011      	beq.n	80029c8 <HAL_UART_IRQHandler+0xc8>
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d011      	beq.n	80029f8 <HAL_UART_IRQHandler+0xf8>
 80029d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2202      	movs	r2, #2
 80029e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ee:	f043 0204 	orr.w	r2, r3, #4
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d011      	beq.n	8002a28 <HAL_UART_IRQHandler+0x128>
 8002a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2204      	movs	r2, #4
 8002a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1e:	f043 0202 	orr.w	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d017      	beq.n	8002a64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002a44:	4b5a      	ldr	r3, [pc, #360]	; (8002bb0 <HAL_UART_IRQHandler+0x2b0>)
 8002a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2208      	movs	r2, #8
 8002a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	f043 0208 	orr.w	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d012      	beq.n	8002a96 <HAL_UART_IRQHandler+0x196>
 8002a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 823c 	beq.w	8002f1a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d013      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d005      	beq.n	8002afa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d04f      	beq.n	8002b9a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f001 f814 	bl	8003b28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d141      	bne.n	8002b92 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3308      	adds	r3, #8
 8002b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3308      	adds	r3, #8
 8002b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1d9      	bne.n	8002b0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d013      	beq.n	8002b8a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b66:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <HAL_UART_IRQHandler+0x2b8>)
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fa0b 	bl	8000f8a <HAL_DMA_Abort_IT>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d017      	beq.n	8002baa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002b84:	4610      	mov	r0, r2
 8002b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	e00f      	b.n	8002baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9da 	bl	8002f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b90:	e00b      	b.n	8002baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f9d6 	bl	8002f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	e007      	b.n	8002baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9d2 	bl	8002f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002ba8:	e1b7      	b.n	8002f1a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002baa:	bf00      	nop
    return;
 8002bac:	e1b5      	b.n	8002f1a <HAL_UART_IRQHandler+0x61a>
 8002bae:	bf00      	nop
 8002bb0:	10000001 	.word	0x10000001
 8002bb4:	04000120 	.word	0x04000120
 8002bb8:	08003bf5 	.word	0x08003bf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 814a 	bne.w	8002e5a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8143 	beq.w	8002e5a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 813c 	beq.w	8002e5a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf4:	2b40      	cmp	r3, #64	; 0x40
 8002bf6:	f040 80b5 	bne.w	8002d64 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8187 	beq.w	8002f1e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	f080 817f 	bcs.w	8002f1e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8086 	bne.w	8002d48 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c48:	e853 3f00 	ldrex	r3, [r3]
 8002c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1da      	bne.n	8002c3c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1e1      	bne.n	8002c86 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e3      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	f023 0310 	bic.w	r3, r3, #16
 8002d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e4      	bne.n	8002d08 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe f8c8 	bl	8000ed8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f8fb 	bl	8002f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d62:	e0dc      	b.n	8002f1e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80ce 	beq.w	8002f22 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8002d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80c9 	beq.w	8002f22 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002db2:	647b      	str	r3, [r7, #68]	; 0x44
 8002db4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e4      	bne.n	8002d90 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3308      	adds	r3, #8
 8002dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dee:	633a      	str	r2, [r7, #48]	; 0x30
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e1      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0310 	bic.w	r3, r3, #16
 8002e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	69b9      	ldr	r1, [r7, #24]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	617b      	str	r3, [r7, #20]
   return(result);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e4      	bne.n	8002e16 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f880 	bl	8002f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e58:	e063      	b.n	8002f22 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00e      	beq.n	8002e84 <HAL_UART_IRQHandler+0x584>
 8002e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f001 fcf9 	bl	8004874 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e82:	e051      	b.n	8002f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d014      	beq.n	8002eba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d03a      	beq.n	8002f26 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
    }
    return;
 8002eb8:	e035      	b.n	8002f26 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_UART_IRQHandler+0x5da>
 8002ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f001 f846 	bl	8003f64 <UART_EndTransmit_IT>
    return;
 8002ed8:	e026      	b.n	8002f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_UART_IRQHandler+0x5fa>
 8002ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f001 fcd2 	bl	800489c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ef8:	e016      	b.n	8002f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_UART_IRQHandler+0x628>
 8002f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0c      	bge.n	8002f28 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f001 fcba 	bl	8004888 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f14:	e008      	b.n	8002f28 <HAL_UART_IRQHandler+0x628>
      return;
 8002f16:	bf00      	nop
 8002f18:	e006      	b.n	8002f28 <HAL_UART_IRQHandler+0x628>
    return;
 8002f1a:	bf00      	nop
 8002f1c:	e004      	b.n	8002f28 <HAL_UART_IRQHandler+0x628>
      return;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <HAL_UART_IRQHandler+0x628>
      return;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <HAL_UART_IRQHandler+0x628>
    return;
 8002f26:	bf00      	nop
  }
}
 8002f28:	37e8      	adds	r7, #232	; 0xe8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop

08002f30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f74:	b08c      	sub	sp, #48	; 0x30
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4baa      	ldr	r3, [pc, #680]	; (8003248 <UART_SetConfig+0x2d8>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a9f      	ldr	r2, [pc, #636]	; (800324c <UART_SetConfig+0x2dc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002fe6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	f023 010f 	bic.w	r1, r3, #15
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a90      	ldr	r2, [pc, #576]	; (8003250 <UART_SetConfig+0x2e0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d125      	bne.n	8003060 <UART_SetConfig+0xf0>
 8003014:	4b8f      	ldr	r3, [pc, #572]	; (8003254 <UART_SetConfig+0x2e4>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b03      	cmp	r3, #3
 8003020:	d81a      	bhi.n	8003058 <UART_SetConfig+0xe8>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <UART_SetConfig+0xb8>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	08003039 	.word	0x08003039
 800302c:	08003049 	.word	0x08003049
 8003030:	08003041 	.word	0x08003041
 8003034:	08003051 	.word	0x08003051
 8003038:	2301      	movs	r3, #1
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303e:	e116      	b.n	800326e <UART_SetConfig+0x2fe>
 8003040:	2302      	movs	r3, #2
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003046:	e112      	b.n	800326e <UART_SetConfig+0x2fe>
 8003048:	2304      	movs	r3, #4
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304e:	e10e      	b.n	800326e <UART_SetConfig+0x2fe>
 8003050:	2308      	movs	r3, #8
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003056:	e10a      	b.n	800326e <UART_SetConfig+0x2fe>
 8003058:	2310      	movs	r3, #16
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305e:	e106      	b.n	800326e <UART_SetConfig+0x2fe>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a7c      	ldr	r2, [pc, #496]	; (8003258 <UART_SetConfig+0x2e8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d138      	bne.n	80030dc <UART_SetConfig+0x16c>
 800306a:	4b7a      	ldr	r3, [pc, #488]	; (8003254 <UART_SetConfig+0x2e4>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d82d      	bhi.n	80030d4 <UART_SetConfig+0x164>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <UART_SetConfig+0x110>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080030d5 	.word	0x080030d5
 8003088:	080030d5 	.word	0x080030d5
 800308c:	080030d5 	.word	0x080030d5
 8003090:	080030c5 	.word	0x080030c5
 8003094:	080030d5 	.word	0x080030d5
 8003098:	080030d5 	.word	0x080030d5
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030bd 	.word	0x080030bd
 80030a4:	080030d5 	.word	0x080030d5
 80030a8:	080030d5 	.word	0x080030d5
 80030ac:	080030d5 	.word	0x080030d5
 80030b0:	080030cd 	.word	0x080030cd
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ba:	e0d8      	b.n	800326e <UART_SetConfig+0x2fe>
 80030bc:	2302      	movs	r3, #2
 80030be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030c2:	e0d4      	b.n	800326e <UART_SetConfig+0x2fe>
 80030c4:	2304      	movs	r3, #4
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ca:	e0d0      	b.n	800326e <UART_SetConfig+0x2fe>
 80030cc:	2308      	movs	r3, #8
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d2:	e0cc      	b.n	800326e <UART_SetConfig+0x2fe>
 80030d4:	2310      	movs	r3, #16
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030da:	e0c8      	b.n	800326e <UART_SetConfig+0x2fe>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5e      	ldr	r2, [pc, #376]	; (800325c <UART_SetConfig+0x2ec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d125      	bne.n	8003132 <UART_SetConfig+0x1c2>
 80030e6:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <UART_SetConfig+0x2e4>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030f0:	2b30      	cmp	r3, #48	; 0x30
 80030f2:	d016      	beq.n	8003122 <UART_SetConfig+0x1b2>
 80030f4:	2b30      	cmp	r3, #48	; 0x30
 80030f6:	d818      	bhi.n	800312a <UART_SetConfig+0x1ba>
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d00a      	beq.n	8003112 <UART_SetConfig+0x1a2>
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d814      	bhi.n	800312a <UART_SetConfig+0x1ba>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <UART_SetConfig+0x19a>
 8003104:	2b10      	cmp	r3, #16
 8003106:	d008      	beq.n	800311a <UART_SetConfig+0x1aa>
 8003108:	e00f      	b.n	800312a <UART_SetConfig+0x1ba>
 800310a:	2300      	movs	r3, #0
 800310c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003110:	e0ad      	b.n	800326e <UART_SetConfig+0x2fe>
 8003112:	2302      	movs	r3, #2
 8003114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003118:	e0a9      	b.n	800326e <UART_SetConfig+0x2fe>
 800311a:	2304      	movs	r3, #4
 800311c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003120:	e0a5      	b.n	800326e <UART_SetConfig+0x2fe>
 8003122:	2308      	movs	r3, #8
 8003124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003128:	e0a1      	b.n	800326e <UART_SetConfig+0x2fe>
 800312a:	2310      	movs	r3, #16
 800312c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003130:	e09d      	b.n	800326e <UART_SetConfig+0x2fe>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a4a      	ldr	r2, [pc, #296]	; (8003260 <UART_SetConfig+0x2f0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d125      	bne.n	8003188 <UART_SetConfig+0x218>
 800313c:	4b45      	ldr	r3, [pc, #276]	; (8003254 <UART_SetConfig+0x2e4>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003146:	2bc0      	cmp	r3, #192	; 0xc0
 8003148:	d016      	beq.n	8003178 <UART_SetConfig+0x208>
 800314a:	2bc0      	cmp	r3, #192	; 0xc0
 800314c:	d818      	bhi.n	8003180 <UART_SetConfig+0x210>
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d00a      	beq.n	8003168 <UART_SetConfig+0x1f8>
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d814      	bhi.n	8003180 <UART_SetConfig+0x210>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <UART_SetConfig+0x1f0>
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d008      	beq.n	8003170 <UART_SetConfig+0x200>
 800315e:	e00f      	b.n	8003180 <UART_SetConfig+0x210>
 8003160:	2300      	movs	r3, #0
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003166:	e082      	b.n	800326e <UART_SetConfig+0x2fe>
 8003168:	2302      	movs	r3, #2
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800316e:	e07e      	b.n	800326e <UART_SetConfig+0x2fe>
 8003170:	2304      	movs	r3, #4
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003176:	e07a      	b.n	800326e <UART_SetConfig+0x2fe>
 8003178:	2308      	movs	r3, #8
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317e:	e076      	b.n	800326e <UART_SetConfig+0x2fe>
 8003180:	2310      	movs	r3, #16
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003186:	e072      	b.n	800326e <UART_SetConfig+0x2fe>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a35      	ldr	r2, [pc, #212]	; (8003264 <UART_SetConfig+0x2f4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d12a      	bne.n	80031e8 <UART_SetConfig+0x278>
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <UART_SetConfig+0x2e4>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a0:	d01a      	beq.n	80031d8 <UART_SetConfig+0x268>
 80031a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a6:	d81b      	bhi.n	80031e0 <UART_SetConfig+0x270>
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d00c      	beq.n	80031c8 <UART_SetConfig+0x258>
 80031ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b2:	d815      	bhi.n	80031e0 <UART_SetConfig+0x270>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <UART_SetConfig+0x250>
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031bc:	d008      	beq.n	80031d0 <UART_SetConfig+0x260>
 80031be:	e00f      	b.n	80031e0 <UART_SetConfig+0x270>
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c6:	e052      	b.n	800326e <UART_SetConfig+0x2fe>
 80031c8:	2302      	movs	r3, #2
 80031ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ce:	e04e      	b.n	800326e <UART_SetConfig+0x2fe>
 80031d0:	2304      	movs	r3, #4
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d6:	e04a      	b.n	800326e <UART_SetConfig+0x2fe>
 80031d8:	2308      	movs	r3, #8
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031de:	e046      	b.n	800326e <UART_SetConfig+0x2fe>
 80031e0:	2310      	movs	r3, #16
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e6:	e042      	b.n	800326e <UART_SetConfig+0x2fe>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <UART_SetConfig+0x2dc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d13a      	bne.n	8003268 <UART_SetConfig+0x2f8>
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <UART_SetConfig+0x2e4>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003200:	d01a      	beq.n	8003238 <UART_SetConfig+0x2c8>
 8003202:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003206:	d81b      	bhi.n	8003240 <UART_SetConfig+0x2d0>
 8003208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320c:	d00c      	beq.n	8003228 <UART_SetConfig+0x2b8>
 800320e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003212:	d815      	bhi.n	8003240 <UART_SetConfig+0x2d0>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <UART_SetConfig+0x2b0>
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321c:	d008      	beq.n	8003230 <UART_SetConfig+0x2c0>
 800321e:	e00f      	b.n	8003240 <UART_SetConfig+0x2d0>
 8003220:	2300      	movs	r3, #0
 8003222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003226:	e022      	b.n	800326e <UART_SetConfig+0x2fe>
 8003228:	2302      	movs	r3, #2
 800322a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800322e:	e01e      	b.n	800326e <UART_SetConfig+0x2fe>
 8003230:	2304      	movs	r3, #4
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003236:	e01a      	b.n	800326e <UART_SetConfig+0x2fe>
 8003238:	2308      	movs	r3, #8
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323e:	e016      	b.n	800326e <UART_SetConfig+0x2fe>
 8003240:	2310      	movs	r3, #16
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003246:	e012      	b.n	800326e <UART_SetConfig+0x2fe>
 8003248:	cfff69f3 	.word	0xcfff69f3
 800324c:	40008000 	.word	0x40008000
 8003250:	40013800 	.word	0x40013800
 8003254:	40021000 	.word	0x40021000
 8003258:	40004400 	.word	0x40004400
 800325c:	40004800 	.word	0x40004800
 8003260:	40004c00 	.word	0x40004c00
 8003264:	40005000 	.word	0x40005000
 8003268:	2310      	movs	r3, #16
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4aae      	ldr	r2, [pc, #696]	; (800352c <UART_SetConfig+0x5bc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	f040 8097 	bne.w	80033a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800327a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800327e:	2b08      	cmp	r3, #8
 8003280:	d823      	bhi.n	80032ca <UART_SetConfig+0x35a>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x318>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032cb 	.word	0x080032cb
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032cb 	.word	0x080032cb
 8003298:	080032bb 	.word	0x080032bb
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	080032cb 	.word	0x080032cb
 80032a4:	080032cb 	.word	0x080032cb
 80032a8:	080032c3 	.word	0x080032c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7fe ff1a 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80032b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032b2:	e010      	b.n	80032d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b9e      	ldr	r3, [pc, #632]	; (8003530 <UART_SetConfig+0x5c0>)
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032b8:	e00d      	b.n	80032d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7fe fea5 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 80032be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032c0:	e009      	b.n	80032d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032c8:	e005      	b.n	80032d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8130 	beq.w	800353e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	4a94      	ldr	r2, [pc, #592]	; (8003534 <UART_SetConfig+0x5c4>)
 80032e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d305      	bcc.n	800330e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	429a      	cmp	r2, r3
 800330c:	d903      	bls.n	8003316 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003314:	e113      	b.n	800353e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	2200      	movs	r2, #0
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	60fa      	str	r2, [r7, #12]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	4a84      	ldr	r2, [pc, #528]	; (8003534 <UART_SetConfig+0x5c4>)
 8003324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003328:	b29b      	uxth	r3, r3
 800332a:	2200      	movs	r2, #0
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003338:	f7fc ff6e 	bl	8000218 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	020b      	lsls	r3, r1, #8
 800334e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003352:	0202      	lsls	r2, r0, #8
 8003354:	6979      	ldr	r1, [r7, #20]
 8003356:	6849      	ldr	r1, [r1, #4]
 8003358:	0849      	lsrs	r1, r1, #1
 800335a:	2000      	movs	r0, #0
 800335c:	460c      	mov	r4, r1
 800335e:	4605      	mov	r5, r0
 8003360:	eb12 0804 	adds.w	r8, r2, r4
 8003364:	eb43 0905 	adc.w	r9, r3, r5
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	469a      	mov	sl, r3
 8003370:	4693      	mov	fp, r2
 8003372:	4652      	mov	r2, sl
 8003374:	465b      	mov	r3, fp
 8003376:	4640      	mov	r0, r8
 8003378:	4649      	mov	r1, r9
 800337a:	f7fc ff4d 	bl	8000218 <__aeabi_uldivmod>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4613      	mov	r3, r2
 8003384:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800338c:	d308      	bcc.n	80033a0 <UART_SetConfig+0x430>
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003394:	d204      	bcs.n	80033a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	e0ce      	b.n	800353e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033a6:	e0ca      	b.n	800353e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b0:	d166      	bne.n	8003480 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80033b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d827      	bhi.n	800340a <UART_SetConfig+0x49a>
 80033ba:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <UART_SetConfig+0x450>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	080033ed 	.word	0x080033ed
 80033c8:	080033f5 	.word	0x080033f5
 80033cc:	0800340b 	.word	0x0800340b
 80033d0:	080033fb 	.word	0x080033fb
 80033d4:	0800340b 	.word	0x0800340b
 80033d8:	0800340b 	.word	0x0800340b
 80033dc:	0800340b 	.word	0x0800340b
 80033e0:	08003403 	.word	0x08003403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e4:	f7fe fe7e 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80033e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033ea:	e014      	b.n	8003416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033ec:	f7fe fe90 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033f2:	e010      	b.n	8003416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f4:	4b4e      	ldr	r3, [pc, #312]	; (8003530 <UART_SetConfig+0x5c0>)
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033f8:	e00d      	b.n	8003416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fa:	f7fe fe05 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 80033fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003400:	e009      	b.n	8003416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003408:	e005      	b.n	8003416 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8090 	beq.w	800353e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	4a44      	ldr	r2, [pc, #272]	; (8003534 <UART_SetConfig+0x5c4>)
 8003424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003428:	461a      	mov	r2, r3
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003430:	005a      	lsls	r2, r3, #1
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	441a      	add	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	d916      	bls.n	8003478 <UART_SetConfig+0x508>
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d212      	bcs.n	8003478 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	b29b      	uxth	r3, r3
 8003456:	f023 030f 	bic.w	r3, r3, #15
 800345a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	085b      	lsrs	r3, r3, #1
 8003460:	b29b      	uxth	r3, r3
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	b29a      	uxth	r2, r3
 8003468:	8bfb      	ldrh	r3, [r7, #30]
 800346a:	4313      	orrs	r3, r2
 800346c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	8bfa      	ldrh	r2, [r7, #30]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	e062      	b.n	800353e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800347e:	e05e      	b.n	800353e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003484:	2b08      	cmp	r3, #8
 8003486:	d828      	bhi.n	80034da <UART_SetConfig+0x56a>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <UART_SetConfig+0x520>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034b5 	.word	0x080034b5
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034c5 	.word	0x080034c5
 800349c:	080034db 	.word	0x080034db
 80034a0:	080034cb 	.word	0x080034cb
 80034a4:	080034db 	.word	0x080034db
 80034a8:	080034db 	.word	0x080034db
 80034ac:	080034db 	.word	0x080034db
 80034b0:	080034d3 	.word	0x080034d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b4:	f7fe fe16 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80034b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034ba:	e014      	b.n	80034e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7fe fe28 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 80034c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034c2:	e010      	b.n	80034e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <UART_SetConfig+0x5c0>)
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034c8:	e00d      	b.n	80034e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ca:	f7fe fd9d 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034d0:	e009      	b.n	80034e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034d8:	e005      	b.n	80034e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034e4:	bf00      	nop
    }

    if (pclk != 0U)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d028      	beq.n	800353e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	4a10      	ldr	r2, [pc, #64]	; (8003534 <UART_SetConfig+0x5c4>)
 80034f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	441a      	add	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	d910      	bls.n	8003538 <UART_SetConfig+0x5c8>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d20c      	bcs.n	8003538 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	b29a      	uxth	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e009      	b.n	800353e <UART_SetConfig+0x5ce>
 800352a:	bf00      	nop
 800352c:	40008000 	.word	0x40008000
 8003530:	00f42400 	.word	0x00f42400
 8003534:	08004b40 	.word	0x08004b40
      }
      else
      {
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2201      	movs	r2, #1
 8003542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2201      	movs	r2, #1
 800354a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800355a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800355e:	4618      	mov	r0, r3
 8003560:	3730      	adds	r7, #48	; 0x30
 8003562:	46bd      	mov	sp, r7
 8003564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01a      	beq.n	800367e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003666:	d10a      	bne.n	800367e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036bc:	f7fd fa48 	bl	8000b50 <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d10e      	bne.n	80036ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f82f 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e025      	b.n	800373a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d10e      	bne.n	800371a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f819 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e00f      	b.n	800373a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b09c      	sub	sp, #112	; 0x70
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003752:	e0a9      	b.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	f000 80a5 	beq.w	80038a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fd f9f7 	bl	8000b50 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <UART_WaitOnFlagUntilTimeout+0x32>
 800376e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003770:	2b00      	cmp	r3, #0
 8003772:	d140      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003788:	667b      	str	r3, [r7, #100]	; 0x64
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003794:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e6      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	663b      	str	r3, [r7, #96]	; 0x60
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3308      	adds	r3, #8
 80037c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80037c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e5      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e069      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d051      	beq.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003812:	d149      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800381c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
 800383e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e6      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3308      	adds	r3, #8
 8003856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	613b      	str	r3, [r7, #16]
   return(result);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	66bb      	str	r3, [r7, #104]	; 0x68
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3308      	adds	r3, #8
 800386e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003870:	623a      	str	r2, [r7, #32]
 8003872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	69f9      	ldr	r1, [r7, #28]
 8003876:	6a3a      	ldr	r2, [r7, #32]
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	61bb      	str	r3, [r7, #24]
   return(result);
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e5      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e010      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	f43f af46 	beq.w	8003754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3770      	adds	r7, #112	; 0x70
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b0a3      	sub	sp, #140	; 0x8c
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003906:	d10e      	bne.n	8003926 <UART_Start_Receive_IT+0x52>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <UART_Start_Receive_IT+0x48>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003916:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800391a:	e02d      	b.n	8003978 <UART_Start_Receive_IT+0xa4>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	22ff      	movs	r2, #255	; 0xff
 8003920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003924:	e028      	b.n	8003978 <UART_Start_Receive_IT+0xa4>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <UART_Start_Receive_IT+0x76>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <UART_Start_Receive_IT+0x6c>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	22ff      	movs	r2, #255	; 0xff
 800393a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800393e:	e01b      	b.n	8003978 <UART_Start_Receive_IT+0xa4>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	227f      	movs	r2, #127	; 0x7f
 8003944:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003948:	e016      	b.n	8003978 <UART_Start_Receive_IT+0xa4>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003952:	d10d      	bne.n	8003970 <UART_Start_Receive_IT+0x9c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <UART_Start_Receive_IT+0x92>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	227f      	movs	r2, #127	; 0x7f
 8003960:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003964:	e008      	b.n	8003978 <UART_Start_Receive_IT+0xa4>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	223f      	movs	r2, #63	; 0x3f
 800396a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800396e:	e003      	b.n	8003978 <UART_Start_Receive_IT+0xa4>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2222      	movs	r2, #34	; 0x22
 8003984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3308      	adds	r3, #8
 800398e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3308      	adds	r3, #8
 80039a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80039ac:	673a      	str	r2, [r7, #112]	; 0x70
 80039ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80039b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80039ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e3      	bne.n	8003988 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c8:	d153      	bne.n	8003a72 <UART_Start_Receive_IT+0x19e>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d34d      	bcc.n	8003a72 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d107      	bne.n	80039f0 <UART_Start_Receive_IT+0x11c>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a4b      	ldr	r2, [pc, #300]	; (8003b18 <UART_Start_Receive_IT+0x244>)
 80039ec:	671a      	str	r2, [r3, #112]	; 0x70
 80039ee:	e002      	b.n	80039f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a4a      	ldr	r2, [pc, #296]	; (8003b1c <UART_Start_Receive_IT+0x248>)
 80039f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01a      	beq.n	8003a3c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a2a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e4      	bne.n	8003a06 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003a5c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a5e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e5      	bne.n	8003a3c <UART_Start_Receive_IT+0x168>
 8003a70:	e04a      	b.n	8003b08 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d107      	bne.n	8003a8c <UART_Start_Receive_IT+0x1b8>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d103      	bne.n	8003a8c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <UART_Start_Receive_IT+0x24c>)
 8003a88:	671a      	str	r2, [r3, #112]	; 0x70
 8003a8a:	e002      	b.n	8003a92 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <UART_Start_Receive_IT+0x250>)
 8003a90:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ab6:	677b      	str	r3, [r7, #116]	; 0x74
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_Start_Receive_IT+0x1ce>
 8003ad4:	e018      	b.n	8003b08 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f043 0320 	orr.w	r3, r3, #32
 8003aea:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69f9      	ldr	r1, [r7, #28]
 8003afa:	6a3a      	ldr	r2, [r7, #32]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e6      	bne.n	8003ad6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	378c      	adds	r7, #140	; 0x8c
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	08004575 	.word	0x08004575
 8003b1c:	0800427d 	.word	0x0800427d
 8003b20:	0800411b 	.word	0x0800411b
 8003b24:	08003fbb 	.word	0x08003fbb

08003b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b095      	sub	sp, #84	; 0x54
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e6      	bne.n	8003b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3308      	adds	r3, #8
 8003b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e3      	bne.n	8003b62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d118      	bne.n	8003bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 0310 	bic.w	r3, r3, #16
 8003bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6979      	ldr	r1, [r7, #20]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e6      	bne.n	8003ba2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003be8:	bf00      	nop
 8003bea:	3754      	adds	r7, #84	; 0x54
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff f996 	bl	8002f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b08f      	sub	sp, #60	; 0x3c
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	2b21      	cmp	r3, #33	; 0x21
 8003c30:	d14c      	bne.n	8003ccc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d132      	bne.n	8003ca4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e6      	bne.n	8003c3e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6979      	ldr	r1, [r7, #20]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e6      	bne.n	8003c70 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003ca2:	e013      	b.n	8003ccc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003ccc:	bf00      	nop
 8003cce:	373c      	adds	r7, #60	; 0x3c
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b091      	sub	sp, #68	; 0x44
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce6:	2b21      	cmp	r3, #33	; 0x21
 8003ce8:	d151      	bne.n	8003d8e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d132      	bne.n	8003d5c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	623b      	str	r3, [r7, #32]
   return(result);
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30
 8003d16:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e6      	bne.n	8003cf6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	617b      	str	r3, [r7, #20]
   return(result);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e6      	bne.n	8003d28 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003d5a:	e018      	b.n	8003d8e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d70:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003d8e:	bf00      	nop
 8003d90:	3744      	adds	r7, #68	; 0x44
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b091      	sub	sp, #68	; 0x44
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da8:	2b21      	cmp	r3, #33	; 0x21
 8003daa:	d160      	bne.n	8003e6e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003db4:	e057      	b.n	8003e66 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d133      	bne.n	8003e2a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3308      	adds	r3, #8
 8003de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de2:	633a      	str	r2, [r7, #48]	; 0x30
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e5      	bne.n	8003dc2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	69b9      	ldr	r1, [r7, #24]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	617b      	str	r3, [r7, #20]
   return(result);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e6      	bne.n	8003df6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003e28:	e021      	b.n	8003e6e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003e62:	3b01      	subs	r3, #1
 8003e64:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003e66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1a4      	bne.n	8003db6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003e6c:	e7ff      	b.n	8003e6e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003e6e:	bf00      	nop
 8003e70:	3744      	adds	r7, #68	; 0x44
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b091      	sub	sp, #68	; 0x44
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e88:	2b21      	cmp	r3, #33	; 0x21
 8003e8a:	d165      	bne.n	8003f58 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e92:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003e94:	e05c      	b.n	8003f50 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d133      	bne.n	8003f0a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e5      	bne.n	8003ea2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6979      	ldr	r1, [r7, #20]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	613b      	str	r3, [r7, #16]
   return(result);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e6      	bne.n	8003ed6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003f08:	e026      	b.n	8003f58 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d018      	beq.n	8003f4a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d19f      	bne.n	8003e96 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003f56:	e7ff      	b.n	8003f58 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003f58:	bf00      	nop
 8003f5a:	3744      	adds	r7, #68	; 0x44
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	613b      	str	r3, [r7, #16]
   return(result);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e6      	bne.n	8003f6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fe ffbf 	bl	8002f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fb2:	bf00      	nop
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b096      	sub	sp, #88	; 0x58
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003fc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	2b22      	cmp	r3, #34	; 0x22
 8003fd4:	f040 8095 	bne.w	8004102 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fe2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003fe6:	b2d9      	uxtb	r1, r3
 8003fe8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d178      	bne.n	8004112 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004034:	653b      	str	r3, [r7, #80]	; 0x50
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403e:	647b      	str	r3, [r7, #68]	; 0x44
 8004040:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004044:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800404c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	623b      	str	r3, [r7, #32]
   return(result);
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004072:	633a      	str	r2, [r7, #48]	; 0x30
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d12e      	bne.n	80040fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0310 	bic.w	r3, r3, #16
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	617b      	str	r3, [r7, #20]
   return(result);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d103      	bne.n	80040ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2210      	movs	r2, #16
 80040e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fe ff30 	bl	8002f58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040f8:	e00b      	b.n	8004112 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fa0a 	bl	8000514 <HAL_UART_RxCpltCallback>
}
 8004100:	e007      	b.n	8004112 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699a      	ldr	r2, [r3, #24]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	619a      	str	r2, [r3, #24]
}
 8004112:	bf00      	nop
 8004114:	3758      	adds	r7, #88	; 0x58
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b096      	sub	sp, #88	; 0x58
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004128:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	2b22      	cmp	r3, #34	; 0x22
 8004134:	f040 8095 	bne.w	8004262 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004148:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800414c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004150:	4013      	ands	r3, r2
 8004152:	b29a      	uxth	r2, r3
 8004154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004156:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d178      	bne.n	8004272 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419e:	643b      	str	r3, [r7, #64]	; 0x40
 80041a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d12e      	bne.n	800425a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	647b      	str	r3, [r7, #68]	; 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	613b      	str	r3, [r7, #16]
   return(result);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b10      	cmp	r3, #16
 8004240:	d103      	bne.n	800424a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2210      	movs	r2, #16
 8004248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fe fe80 	bl	8002f58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004258:	e00b      	b.n	8004272 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc f95a 	bl	8000514 <HAL_UART_RxCpltCallback>
}
 8004260:	e007      	b.n	8004272 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	619a      	str	r2, [r3, #24]
}
 8004272:	bf00      	nop
 8004274:	3758      	adds	r7, #88	; 0x58
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b0a6      	sub	sp, #152	; 0x98
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800428a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	2b22      	cmp	r3, #34	; 0x22
 80042b4:	f040 814f 	bne.w	8004556 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80042be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042c2:	e0f6      	b.n	80044b2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80042d2:	b2d9      	uxtb	r1, r3
 80042d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	400a      	ands	r2, r1
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800430a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	2b00      	cmp	r3, #0
 8004314:	d053      	beq.n	80043be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d011      	beq.n	8004346 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800433c:	f043 0201 	orr.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d011      	beq.n	8004376 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004352:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2202      	movs	r2, #2
 8004364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436c:	f043 0204 	orr.w	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d011      	beq.n	80043a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2204      	movs	r2, #4
 8004394:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439c:	f043 0202 	orr.w	r2, r3, #2
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fe fdc7 	bl	8002f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d173      	bne.n	80044b2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80043d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80043f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80043fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e4      	bne.n	80043ca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3308      	adds	r3, #8
 8004422:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004424:	657a      	str	r2, [r7, #84]	; 0x54
 8004426:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800442a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e3      	bne.n	8004400 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444a:	2b01      	cmp	r3, #1
 800444c:	d12e      	bne.n	80044ac <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	f023 0310 	bic.w	r3, r3, #16
 8004468:	67bb      	str	r3, [r7, #120]	; 0x78
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004472:	643b      	str	r3, [r7, #64]	; 0x40
 8004474:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e6      	bne.n	8004454 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d103      	bne.n	800449c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2210      	movs	r2, #16
 800449a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7fe fd57 	bl	8002f58 <HAL_UARTEx_RxEventCallback>
 80044aa:	e002      	b.n	80044b2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fc f831 	bl	8000514 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d006      	beq.n	80044c8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80044ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f47f aefe 	bne.w	80042c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80044d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d045      	beq.n	8004566 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80044e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d23e      	bcs.n	8004566 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004520:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f043 0320 	orr.w	r3, r3, #32
 8004536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6979      	ldr	r1, [r7, #20]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	613b      	str	r3, [r7, #16]
   return(result);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e6      	bne.n	8004522 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004554:	e007      	b.n	8004566 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0208 	orr.w	r2, r2, #8
 8004564:	619a      	str	r2, [r3, #24]
}
 8004566:	bf00      	nop
 8004568:	3798      	adds	r7, #152	; 0x98
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	08003fbb 	.word	0x08003fbb

08004574 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b0a8      	sub	sp, #160	; 0xa0
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004582:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	2b22      	cmp	r3, #34	; 0x22
 80045ac:	f040 8153 	bne.w	8004856 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80045b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045ba:	e0fa      	b.n	80047b2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80045ce:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80045d2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045d6:	4013      	ands	r3, r2
 80045d8:	b29a      	uxth	r2, r3
 80045da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	1c9a      	adds	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004606:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2b00      	cmp	r3, #0
 8004610:	d053      	beq.n	80046ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <UART_RxISR_16BIT_FIFOEN+0xce>
 800461e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2201      	movs	r2, #1
 8004630:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004642:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800464e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2202      	movs	r2, #2
 8004660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004668:	f043 0204 	orr.w	r2, r3, #4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d011      	beq.n	80046a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800467e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2204      	movs	r2, #4
 8004690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004698:	f043 0202 	orr.w	r2, r3, #2
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d006      	beq.n	80046ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fe fc49 	bl	8002f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d175      	bne.n	80047b2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e4      	bne.n	80046c6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3308      	adds	r3, #8
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004724:	65ba      	str	r2, [r7, #88]	; 0x58
 8004726:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800472a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e1      	bne.n	80046fc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474a:	2b01      	cmp	r3, #1
 800474c:	d12e      	bne.n	80047ac <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004772:	647b      	str	r3, [r7, #68]	; 0x44
 8004774:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e6      	bne.n	8004754 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d103      	bne.n	800479c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fe fbd7 	bl	8002f58 <HAL_UARTEx_RxEventCallback>
 80047aa:	e002      	b.n	80047b2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fb feb1 	bl	8000514 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80047ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f47f aefa 	bne.w	80045bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047ce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80047d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d045      	beq.n	8004866 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80047e0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d23e      	bcs.n	8004866 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	623b      	str	r3, [r7, #32]
   return(result);
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fe:	677b      	str	r3, [r7, #116]	; 0x74
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004808:	633a      	str	r2, [r7, #48]	; 0x30
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800480e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a14      	ldr	r2, [pc, #80]	; (8004870 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8004820:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f043 0320 	orr.w	r3, r3, #32
 8004836:	673b      	str	r3, [r7, #112]	; 0x70
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	69b9      	ldr	r1, [r7, #24]
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	617b      	str	r3, [r7, #20]
   return(result);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004854:	e007      	b.n	8004866 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0208 	orr.w	r2, r2, #8
 8004864:	619a      	str	r2, [r3, #24]
}
 8004866:	bf00      	nop
 8004868:	37a0      	adds	r7, #160	; 0xa0
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	0800411b 	.word	0x0800411b

08004874 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e027      	b.n	8004916 <HAL_UARTEx_DisableFifoMode+0x66>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2224      	movs	r2, #36	; 0x24
 80048d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80048f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004936:	2302      	movs	r3, #2
 8004938:	e02d      	b.n	8004996 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2224      	movs	r2, #36	; 0x24
 8004946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f850 	bl	8004a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e02d      	b.n	8004a12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2224      	movs	r2, #36	; 0x24
 80049c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f812 	bl	8004a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d108      	bne.n	8004a3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a3c:	e031      	b.n	8004aa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a3e:	2308      	movs	r3, #8
 8004a40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a42:	2308      	movs	r3, #8
 8004a44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	0e5b      	lsrs	r3, r3, #25
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	0f5b      	lsrs	r3, r3, #29
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a66:	7bbb      	ldrb	r3, [r7, #14]
 8004a68:	7b3a      	ldrb	r2, [r7, #12]
 8004a6a:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8004a6c:	5c8a      	ldrb	r2, [r1, r2]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a72:	7b3a      	ldrb	r2, [r7, #12]
 8004a74:	490f      	ldr	r1, [pc, #60]	; (8004ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8004a76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a78:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	7b7a      	ldrb	r2, [r7, #13]
 8004a88:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8004a8a:	5c8a      	ldrb	r2, [r1, r2]
 8004a8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a90:	7b7a      	ldrb	r2, [r7, #13]
 8004a92:	4908      	ldr	r1, [pc, #32]	; (8004ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8004a94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	08004b58 	.word	0x08004b58
 8004ab4:	08004b60 	.word	0x08004b60

08004ab8 <memset>:
 8004ab8:	4402      	add	r2, r0
 8004aba:	4603      	mov	r3, r0
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d100      	bne.n	8004ac2 <memset+0xa>
 8004ac0:	4770      	bx	lr
 8004ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ac6:	e7f9      	b.n	8004abc <memset+0x4>

08004ac8 <__libc_init_array>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	4d0d      	ldr	r5, [pc, #52]	; (8004b00 <__libc_init_array+0x38>)
 8004acc:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <__libc_init_array+0x3c>)
 8004ace:	1b64      	subs	r4, r4, r5
 8004ad0:	10a4      	asrs	r4, r4, #2
 8004ad2:	2600      	movs	r6, #0
 8004ad4:	42a6      	cmp	r6, r4
 8004ad6:	d109      	bne.n	8004aec <__libc_init_array+0x24>
 8004ad8:	4d0b      	ldr	r5, [pc, #44]	; (8004b08 <__libc_init_array+0x40>)
 8004ada:	4c0c      	ldr	r4, [pc, #48]	; (8004b0c <__libc_init_array+0x44>)
 8004adc:	f000 f818 	bl	8004b10 <_init>
 8004ae0:	1b64      	subs	r4, r4, r5
 8004ae2:	10a4      	asrs	r4, r4, #2
 8004ae4:	2600      	movs	r6, #0
 8004ae6:	42a6      	cmp	r6, r4
 8004ae8:	d105      	bne.n	8004af6 <__libc_init_array+0x2e>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af0:	4798      	blx	r3
 8004af2:	3601      	adds	r6, #1
 8004af4:	e7ee      	b.n	8004ad4 <__libc_init_array+0xc>
 8004af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afa:	4798      	blx	r3
 8004afc:	3601      	adds	r6, #1
 8004afe:	e7f2      	b.n	8004ae6 <__libc_init_array+0x1e>
 8004b00:	08004b70 	.word	0x08004b70
 8004b04:	08004b70 	.word	0x08004b70
 8004b08:	08004b70 	.word	0x08004b70
 8004b0c:	08004b74 	.word	0x08004b74

08004b10 <_init>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr

08004b1c <_fini>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr
