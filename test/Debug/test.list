
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000340c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035dc  080035dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035dc  080035dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035dc  080035dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000ec  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009ce1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001878  00000000  00000000  00029d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000720  00000000  00000000  0002b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000573  00000000  00000000  0002bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a4be  00000000  00000000  0002c26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009ee1  00000000  00000000  00046729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009a65f  00000000  00000000  0005060a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001bd8  00000000  00000000  000eac6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000ec844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800357c 	.word	0x0800357c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800357c 	.word	0x0800357c

080001c8 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
	{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	  huart2.gState = HAL_UART_STATE_READY;
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <HAL_UART_TxCpltCallback+0x1c>)
 80001d2:	2220      	movs	r2, #32
 80001d4:	67da      	str	r2, [r3, #124]	; 0x7c
	}
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000028 	.word	0x20000028

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b590      	push	{r4, r7, lr}
 80001ea:	b09f      	sub	sp, #124	; 0x7c
 80001ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t txBuff[] = "Hello, World\n";
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <main+0x40>)
 80001f0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80001f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f6:	c407      	stmia	r4!, {r0, r1, r2}
 80001f8:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 f9e1 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f817 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 f89f 	bl	8000344 <MX_GPIO_Init>
  MX_DMA_Init();
 8000206:	f000 f87f 	bl	8000308 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800020a:	f000 f84d 	bl	80002a8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit_DMA(&huart2, txBuff, sizeof(txBuff));
 800020e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000212:	220e      	movs	r2, #14
 8000214:	4619      	mov	r1, r3
 8000216:	4805      	ldr	r0, [pc, #20]	; (800022c <main+0x44>)
 8000218:	f002 f9b0 	bl	800257c <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 800021c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000220:	f000 fa34 	bl	800068c <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, txBuff, sizeof(txBuff));
 8000224:	e7f3      	b.n	800020e <main+0x26>
 8000226:	bf00      	nop
 8000228:	08003594 	.word	0x08003594
 800022c:	20000028 	.word	0x20000028

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	; 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 f970 	bl	8003524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025e:	2300      	movs	r3, #0
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fec6 	bl	8000ff8 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000272:	f000 f88b 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fef0 	bl	8002074 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029a:	f000 f877 	bl	800038c <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	; 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002ae:	4a15      	ldr	r2, [pc, #84]	; (8000304 <MX_USART2_UART_Init+0x5c>)
 80002b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002b2:	4b13      	ldr	r3, [pc, #76]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_USART2_UART_Init+0x58>)
 80002ec:	f002 f8f8 	bl	80024e0 <HAL_UART_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002f6:	f000 f849 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000028 	.word	0x20000028
 8000304:	40004400 	.word	0x40004400

08000308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_DMA_Init+0x38>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <MX_DMA_Init+0x38>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_DMA_Init+0x38>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2100      	movs	r1, #0
 800032a:	2011      	movs	r0, #17
 800032c:	f000 faad 	bl	800088a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000330:	2011      	movs	r0, #17
 8000332:	f000 fac6 	bl	80008c2 <HAL_NVIC_EnableIRQ>

}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_GPIO_Init+0x44>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <MX_GPIO_Init+0x44>)
 8000350:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000354:	6153      	str	r3, [r2, #20]
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_GPIO_Init+0x44>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_GPIO_Init+0x44>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a08      	ldr	r2, [pc, #32]	; (8000388 <MX_GPIO_Init+0x44>)
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	6153      	str	r3, [r2, #20]
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_GPIO_Init+0x44>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	e7fe      	b.n	8000394 <Error_Handler+0x8>
	...

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <HAL_MspInit+0x44>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <HAL_MspInit+0x44>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <HAL_MspInit+0x44>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <HAL_MspInit+0x44>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a08      	ldr	r2, [pc, #32]	; (80003dc <HAL_MspInit+0x44>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	61d3      	str	r3, [r2, #28]
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_MspInit+0x44>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	; 0x28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a2f      	ldr	r2, [pc, #188]	; (80004bc <HAL_UART_MspInit+0xdc>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d157      	bne.n	80004b2 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000402:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <HAL_UART_MspInit+0xe0>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a2e      	ldr	r2, [pc, #184]	; (80004c0 <HAL_UART_MspInit+0xe0>)
 8000408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <HAL_UART_MspInit+0xe0>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <HAL_UART_MspInit+0xe0>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a28      	ldr	r2, [pc, #160]	; (80004c0 <HAL_UART_MspInit+0xe0>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <HAL_UART_MspInit+0xe0>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000432:	f248 0304 	movw	r3, #32772	; 0x8004
 8000436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000438:	2302      	movs	r3, #2
 800043a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000444:	2307      	movs	r3, #7
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4619      	mov	r1, r3
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fc5f 	bl	8000d14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 8000458:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <HAL_UART_MspInit+0xe8>)
 800045a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 800045e:	2210      	movs	r2, #16
 8000460:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000486:	480f      	ldr	r0, [pc, #60]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 8000488:	f000 fa35 	bl	80008f6 <HAL_DMA_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000492:	f7ff ff7b 	bl	800038c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 800049a:	671a      	str	r2, [r3, #112]	; 0x70
 800049c:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <HAL_UART_MspInit+0xe4>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	2026      	movs	r0, #38	; 0x26
 80004a8:	f000 f9ef 	bl	800088a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004ac:	2026      	movs	r0, #38	; 0x26
 80004ae:	f000 fa08 	bl	80008c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004b2:	bf00      	nop
 80004b4:	3728      	adds	r7, #40	; 0x28
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40004400 	.word	0x40004400
 80004c0:	40021000 	.word	0x40021000
 80004c4:	200000b0 	.word	0x200000b0
 80004c8:	40020080 	.word	0x40020080

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <MemManage_Handler+0x4>

080004de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 f898 	bl	800064c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <DMA1_Channel7_IRQHandler+0x10>)
 8000526:	f000 fb03 	bl	8000b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000b0 	.word	0x200000b0

08000534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <USART2_IRQHandler+0x10>)
 800053a:	f002 f89b 	bl	8002674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000028 	.word	0x20000028

08000548 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <SystemInit+0x20>)
 800054e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <SystemInit+0x20>)
 8000554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f7ff ffea 	bl	8000548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000576:	490d      	ldr	r1, [pc, #52]	; (80005ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <LoopForever+0xe>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800058c:	4c0a      	ldr	r4, [pc, #40]	; (80005b8 <LoopForever+0x16>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f002 ffcb 	bl	8003534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f7ff fe23 	bl	80001e8 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b0:	080035e4 	.word	0x080035e4
  ldr r2, =_sbss
 80005b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b8:	200000f8 	.word	0x200000f8

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_Init+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_Init+0x28>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f94f 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f808 	bl	80005ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005dc:	f7ff fedc 	bl	8000398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40022000 	.word	0x40022000

080005ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_InitTick+0x54>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f1 	udiv	r3, r3, r1
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f967 	bl	80008de <HAL_SYSTICK_Config>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e00e      	b.n	8000638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d80a      	bhi.n	8000636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f92f 	bl	800088a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_InitTick+0x5c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	e000      	b.n	8000638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	20000008 	.word	0x20000008
 8000648:	20000004 	.word	0x20000004

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_IncTick+0x20>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x24>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_IncTick+0x24>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000008 	.word	0x20000008
 8000670:	200000f4 	.word	0x200000f4

08000674 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTick;  
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_GetTick+0x14>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	200000f4 	.word	0x200000f4

0800068c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f7ff ffee 	bl	8000674 <HAL_GetTick>
 8000698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a4:	d005      	beq.n	80006b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <HAL_Delay+0x44>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006b2:	bf00      	nop
 80006b4:	f7ff ffde 	bl	8000674 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d8f7      	bhi.n	80006b4 <HAL_Delay+0x28>
  {
  }
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000008 	.word	0x20000008

080006d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__NVIC_GetPriorityGrouping+0x18>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 0307 	and.w	r3, r3, #7
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db0b      	blt.n	8000762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 021f 	and.w	r2, r3, #31
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <__NVIC_EnableIRQ+0x38>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	2001      	movs	r0, #1
 800075a:	fa00 f202 	lsl.w	r2, r0, r2
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ff8e 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff29 	bl	80006d4 <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff3e 	bl	800071c <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff8e 	bl	80007c8 <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5d 	bl	8000774 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff31 	bl	8000738 <__NVIC_EnableIRQ>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffa2 	bl	8000830 <SysTick_Config>
 80008ec:	4603      	mov	r3, r0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e037      	b.n	800097c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000922:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000926:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800093c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	4313      	orrs	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f9b8 	bl	8000cd4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2201      	movs	r2, #1
 800096e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
}  
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <HAL_DMA_Start_IT+0x20>
 80009a0:	2302      	movs	r3, #2
 80009a2:	e04a      	b.n	8000a3a <HAL_DMA_Start_IT+0xb6>
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2201      	movs	r2, #1
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d13a      	bne.n	8000a2c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2202      	movs	r2, #2
 80009ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2200      	movs	r2, #0
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 0201 	bic.w	r2, r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f000 f94b 	bl	8000c76 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 020e 	orr.w	r2, r2, #14
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	e00f      	b.n	8000a1a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 020a 	orr.w	r2, r2, #10
 8000a08:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0204 	bic.w	r2, r2, #4
 8000a18:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f042 0201 	orr.w	r2, r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e005      	b.n	8000a38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000a34:	2302      	movs	r3, #2
 8000a36:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d008      	beq.n	8000a66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2204      	movs	r2, #4
 8000a58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e020      	b.n	8000aa8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 020e 	bic.w	r2, r2, #14
 8000a74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f022 0201 	bic.w	r2, r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8e:	2101      	movs	r1, #1
 8000a90:	fa01 f202 	lsl.w	r2, r1, r2
 8000a94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d005      	beq.n	8000ad6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2204      	movs	r2, #4
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e027      	b.n	8000b26 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f022 020e 	bic.w	r2, r2, #14
 8000ae4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 0201 	bic.w	r2, r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afe:	2101      	movs	r1, #1
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	4798      	blx	r3
    } 
  }
  return status;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d024      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0x72>
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01f      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 0320 	and.w	r3, r3, #32
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d107      	bne.n	8000b80 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0204 	bic.w	r2, r2, #4
 8000b7e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b88:	2104      	movs	r1, #4
 8000b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d06a      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ba0:	e065      	b.n	8000c6e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d02c      	beq.n	8000c0c <HAL_DMA_IRQHandler+0xdc>
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d027      	beq.n	8000c0c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10b      	bne.n	8000be2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 020a 	bic.w	r2, r2, #10
 8000bd8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bea:	2102      	movs	r1, #2
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d035      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000c0a:	e030      	b.n	8000c6e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	2208      	movs	r2, #8
 8000c12:	409a      	lsls	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d028      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x13e>
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d023      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 020e 	bic.w	r2, r2, #14
 8000c34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	4798      	blx	r3
    }
  }
}  
 8000c6c:	e7ff      	b.n	8000c6e <HAL_DMA_IRQHandler+0x13e>
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c92:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b10      	cmp	r3, #16
 8000ca2:	d108      	bne.n	8000cb6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000cb4:	e007      	b.n	8000cc6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	60da      	str	r2, [r3, #12]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <DMA_CalcBaseAndBitshift+0x34>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <DMA_CalcBaseAndBitshift+0x38>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	091b      	lsrs	r3, r3, #4
 8000cee:	009a      	lsls	r2, r3, #2
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <DMA_CalcBaseAndBitshift+0x3c>)
 8000cf8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	bffdfff8 	.word	0xbffdfff8
 8000d0c:	cccccccd 	.word	0xcccccccd
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d22:	e14e      	b.n	8000fc2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 8140 	beq.w	8000fbc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d005      	beq.n	8000d54 <HAL_GPIO_Init+0x40>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 0201 	and.w	r2, r3, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d017      	beq.n	8000df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d123      	bne.n	8000e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	6939      	ldr	r1, [r7, #16]
 8000e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0203 	and.w	r2, r3, #3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 809a 	beq.w	8000fbc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <HAL_GPIO_Init+0x2cc>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <HAL_GPIO_Init+0x2cc>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b52      	ldr	r3, [pc, #328]	; (8000fe0 <HAL_GPIO_Init+0x2cc>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eca:	d013      	beq.n	8000ef4 <HAL_GPIO_Init+0x1e0>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <HAL_GPIO_Init+0x2d4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d00d      	beq.n	8000ef0 <HAL_GPIO_Init+0x1dc>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a45      	ldr	r2, [pc, #276]	; (8000fec <HAL_GPIO_Init+0x2d8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d007      	beq.n	8000eec <HAL_GPIO_Init+0x1d8>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a44      	ldr	r2, [pc, #272]	; (8000ff0 <HAL_GPIO_Init+0x2dc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d101      	bne.n	8000ee8 <HAL_GPIO_Init+0x1d4>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e006      	b.n	8000ef6 <HAL_GPIO_Init+0x1e2>
 8000ee8:	2305      	movs	r3, #5
 8000eea:	e004      	b.n	8000ef6 <HAL_GPIO_Init+0x1e2>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e002      	b.n	8000ef6 <HAL_GPIO_Init+0x1e2>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <HAL_GPIO_Init+0x1e2>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	f002 0203 	and.w	r2, r2, #3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4093      	lsls	r3, r2
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f06:	4937      	ldr	r1, [pc, #220]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f14:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f38:	4a2e      	ldr	r2, [pc, #184]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f62:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f8c:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_GPIO_Init+0x2e0>)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f aea9 	bne.w	8000d24 <HAL_GPIO_Init+0x10>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000800 	.word	0x48000800
 8000ff0:	48000c00 	.word	0x48000c00
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001004:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001008:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800100a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	f001 b823 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 817d 	beq.w	800132e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001034:	4bbc      	ldr	r3, [pc, #752]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b04      	cmp	r3, #4
 800103e:	d00c      	beq.n	800105a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001040:	4bb9      	ldr	r3, [pc, #740]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d15c      	bne.n	8001106 <HAL_RCC_OscConfig+0x10e>
 800104c:	4bb6      	ldr	r3, [pc, #728]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d155      	bne.n	8001106 <HAL_RCC_OscConfig+0x10e>
 800105a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800106e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d102      	bne.n	800108c <HAL_RCC_OscConfig+0x94>
 8001086:	4ba8      	ldr	r3, [pc, #672]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	e015      	b.n	80010b8 <HAL_RCC_OscConfig+0xc0>
 800108c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001090:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001094:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80010b4:	4b9c      	ldr	r3, [pc, #624]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010bc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80010c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010c4:	fa92 f2a2 	rbit	r2, r2
 80010c8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80010cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010d0:	fab2 f282 	clz	r2, r2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f042 0220 	orr.w	r2, r2, #32
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	f002 021f 	and.w	r2, r2, #31
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 811f 	beq.w	800132c <HAL_RCC_OscConfig+0x334>
 80010ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 8116 	bne.w	800132c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	f000 bfaf 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800110a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x12e>
 8001118:	4b83      	ldr	r3, [pc, #524]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a82      	ldr	r2, [pc, #520]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e036      	b.n	8001194 <HAL_RCC_OscConfig+0x19c>
 8001126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800112a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0x158>
 8001136:	4b7c      	ldr	r3, [pc, #496]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a7b      	ldr	r2, [pc, #492]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800113c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b79      	ldr	r3, [pc, #484]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a78      	ldr	r2, [pc, #480]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e021      	b.n	8001194 <HAL_RCC_OscConfig+0x19c>
 8001150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x184>
 8001162:	4b71      	ldr	r3, [pc, #452]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a70      	ldr	r2, [pc, #448]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b6e      	ldr	r3, [pc, #440]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6d      	ldr	r2, [pc, #436]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e00b      	b.n	8001194 <HAL_RCC_OscConfig+0x19c>
 800117c:	4b6a      	ldr	r3, [pc, #424]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a69      	ldr	r2, [pc, #420]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b67      	ldr	r3, [pc, #412]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a66      	ldr	r2, [pc, #408]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800118e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001192:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001194:	4b64      	ldr	r3, [pc, #400]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 8001196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001198:	f023 020f 	bic.w	r2, r3, #15
 800119c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	495f      	ldr	r1, [pc, #380]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d059      	beq.n	8001272 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fa59 	bl	8000674 <HAL_GetTick>
 80011c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	e00a      	b.n	80011de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fa54 	bl	8000674 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d902      	bls.n	80011de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	f000 bf43 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>
 80011de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	fab3 f383 	clz	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	095b      	lsrs	r3, r3, #5
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d102      	bne.n	8001210 <HAL_RCC_OscConfig+0x218>
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	e015      	b.n	800123c <HAL_RCC_OscConfig+0x244>
 8001210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001214:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001228:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800122c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001238:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001240:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001244:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001248:	fa92 f2a2 	rbit	r2, r2
 800124c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001250:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001254:	fab2 f282 	clz	r2, r2
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f002 021f 	and.w	r2, r2, #31
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0ab      	beq.n	80011c8 <HAL_RCC_OscConfig+0x1d0>
 8001270:	e05d      	b.n	800132e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff f9ff 	bl	8000674 <HAL_GetTick>
 8001276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e00a      	b.n	8001292 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff f9fa 	bl	8000674 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b64      	cmp	r3, #100	; 0x64
 800128a:	d902      	bls.n	8001292 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	f000 bee9 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>
 8001292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001296:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80012a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	095b      	lsrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2cc>
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	e015      	b.n	80012f0 <HAL_RCC_OscConfig+0x2f8>
 80012c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_RCC_OscConfig+0x330>)
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012f4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012fc:	fa92 f2a2 	rbit	r2, r2
 8001300:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001304:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001308:	fab2 f282 	clz	r2, r2
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	f002 021f 	and.w	r2, r2, #31
 8001318:	2101      	movs	r1, #1
 800131a:	fa01 f202 	lsl.w	r2, r1, r2
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ab      	bne.n	800127c <HAL_RCC_OscConfig+0x284>
 8001324:	e003      	b.n	800132e <HAL_RCC_OscConfig+0x336>
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 817d 	beq.w	800163e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001344:	4ba6      	ldr	r3, [pc, #664]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001350:	4ba3      	ldr	r3, [pc, #652]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d172      	bne.n	8001442 <HAL_RCC_OscConfig+0x44a>
 800135c:	4ba0      	ldr	r3, [pc, #640]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d16c      	bne.n	8001442 <HAL_RCC_OscConfig+0x44a>
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800137a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	fab3 f383 	clz	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	b2db      	uxtb	r3, r3
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x3a0>
 8001392:	4b93      	ldr	r3, [pc, #588]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	e013      	b.n	80013c0 <HAL_RCC_OscConfig+0x3c8>
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013bc:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	2202      	movs	r2, #2
 80013c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80013c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013ca:	fa92 f2a2 	rbit	r2, r2
 80013ce:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80013d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013d6:	fab2 f282 	clz	r2, r2
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f042 0220 	orr.w	r2, r2, #32
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	f002 021f 	and.w	r2, r2, #31
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00a      	beq.n	8001408 <HAL_RCC_OscConfig+0x410>
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d002      	beq.n	8001408 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f000 be2e 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	21f8      	movs	r1, #248	; 0xf8
 800141e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001426:	fa91 f1a1 	rbit	r1, r1
 800142a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800142e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001432:	fab1 f181 	clz	r1, r1
 8001436:	b2c9      	uxtb	r1, r1
 8001438:	408b      	lsls	r3, r1
 800143a:	4969      	ldr	r1, [pc, #420]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001440:	e0fd      	b.n	800163e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8088 	beq.w	8001564 <HAL_RCC_OscConfig+0x56c>
 8001454:	2301      	movs	r3, #1
 8001456:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001466:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001474:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	461a      	mov	r2, r3
 800147c:	2301      	movs	r3, #1
 800147e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff f8f8 	bl	8000674 <HAL_GetTick>
 8001484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff f8f3 	bl	8000674 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d902      	bls.n	80014a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	f000 bde2 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>
 80014a0:	2302      	movs	r3, #2
 80014a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80014b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	095b      	lsrs	r3, r3, #5
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4d8>
 80014ca:	4b45      	ldr	r3, [pc, #276]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	e013      	b.n	80014f8 <HAL_RCC_OscConfig+0x500>
 80014d0:	2302      	movs	r3, #2
 80014d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014f4:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	2202      	movs	r2, #2
 80014fa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001502:	fa92 f2a2 	rbit	r2, r2
 8001506:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800150a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800150e:	fab2 f282 	clz	r2, r2
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	f042 0220 	orr.w	r2, r2, #32
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	f002 021f 	and.w	r2, r2, #31
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0af      	beq.n	800148a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	21f8      	movs	r1, #248	; 0xf8
 8001540:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001548:	fa91 f1a1 	rbit	r1, r1
 800154c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001550:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001554:	fab1 f181 	clz	r1, r1
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	408b      	lsls	r3, r1
 800155c:	4920      	ldr	r1, [pc, #128]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
 8001562:	e06c      	b.n	800163e <HAL_RCC_OscConfig+0x646>
 8001564:	2301      	movs	r3, #1
 8001566:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001576:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	461a      	mov	r2, r3
 800158c:	2300      	movs	r3, #0
 800158e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff f870 	bl	8000674 <HAL_GetTick>
 8001594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff f86b 	bl	8000674 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d902      	bls.n	80015b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	f000 bd5a 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80015c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	095b      	lsrs	r3, r3, #5
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d104      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5ec>
 80015da:	4b01      	ldr	r3, [pc, #4]	; (80015e0 <HAL_RCC_OscConfig+0x5e8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	e015      	b.n	800160c <HAL_RCC_OscConfig+0x614>
 80015e0:	40021000 	.word	0x40021000
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001608:	4bc8      	ldr	r3, [pc, #800]	; (800192c <HAL_RCC_OscConfig+0x934>)
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	2202      	movs	r2, #2
 800160e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001612:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001616:	fa92 f2a2 	rbit	r2, r2
 800161a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800161e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001622:	fab2 f282 	clz	r2, r2
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f002 021f 	and.w	r2, r2, #31
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ad      	bne.n	800159a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8110 	beq.w	8001874 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d079      	beq.n	8001758 <HAL_RCC_OscConfig+0x760>
 8001664:	2301      	movs	r3, #1
 8001666:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	4bab      	ldr	r3, [pc, #684]	; (8001930 <HAL_RCC_OscConfig+0x938>)
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	461a      	mov	r2, r3
 800168a:	2301      	movs	r3, #1
 800168c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7fe fff1 	bl	8000674 <HAL_GetTick>
 8001692:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001698:	f7fe ffec 	bl	8000674 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d902      	bls.n	80016ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f000 bcdb 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016c8:	2202      	movs	r2, #2
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	fa93 f2a3 	rbit	r2, r3
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001706:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001708:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x934>)
 800170a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001714:	2102      	movs	r1, #2
 8001716:	6019      	str	r1, [r3, #0]
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f1a3 	rbit	r1, r3
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800172e:	6019      	str	r1, [r3, #0]
  return result;
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2101      	movs	r1, #1
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0a0      	beq.n	8001698 <HAL_RCC_OscConfig+0x6a0>
 8001756:	e08d      	b.n	8001874 <HAL_RCC_OscConfig+0x87c>
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800177a:	601a      	str	r2, [r3, #0]
  return result;
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001784:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x938>)
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	461a      	mov	r2, r3
 8001796:	2300      	movs	r3, #0
 8001798:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7fe ff6b 	bl	8000674 <HAL_GetTick>
 800179e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a4:	f7fe ff66 	bl	8000674 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d902      	bls.n	80017ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	f000 bc55 	b.w	8002064 <HAL_RCC_OscConfig+0x106c>
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017c2:	2202      	movs	r2, #2
 80017c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800180a:	2202      	movs	r2, #2
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001824:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_OscConfig+0x934>)
 8001828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001832:	2102      	movs	r1, #2
 8001834:	6019      	str	r1, [r3, #0]
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fa93 f1a3 	rbit	r1, r3
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800184c:	6019      	str	r1, [r3, #0]
  return result;
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	2101      	movs	r1, #1
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d197      	bne.n	80017a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 81a1 	beq.w	8001bcc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x934>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d116      	bne.n	80018ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_RCC_OscConfig+0x934>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_RCC_OscConfig+0x934>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_OscConfig+0x934>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_RCC_OscConfig+0x93c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d11a      	bne.n	800190c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_RCC_OscConfig+0x93c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a16      	ldr	r2, [pc, #88]	; (8001934 <HAL_RCC_OscConfig+0x93c>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7fe fec7 	bl	8000674 <HAL_GetTick>
 80018e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	e009      	b.n	8001900 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ec:	f7fe fec2 	bl	8000674 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b64      	cmp	r3, #100	; 0x64
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e3b1      	b.n	8002064 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_RCC_OscConfig+0x93c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ef      	beq.n	80018ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10d      	bne.n	8001938 <HAL_RCC_OscConfig+0x940>
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_RCC_OscConfig+0x934>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a02      	ldr	r2, [pc, #8]	; (800192c <HAL_RCC_OscConfig+0x934>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	e03c      	b.n	80019a4 <HAL_RCC_OscConfig+0x9ac>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	10908120 	.word	0x10908120
 8001934:	40007000 	.word	0x40007000
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0x96a>
 8001948:	4bc1      	ldr	r3, [pc, #772]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4ac0      	ldr	r2, [pc, #768]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	4bbe      	ldr	r3, [pc, #760]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4abd      	ldr	r2, [pc, #756]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	e020      	b.n	80019a4 <HAL_RCC_OscConfig+0x9ac>
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x994>
 8001972:	4bb7      	ldr	r3, [pc, #732]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4ab6      	ldr	r2, [pc, #728]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	4bb4      	ldr	r3, [pc, #720]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4ab3      	ldr	r2, [pc, #716]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6213      	str	r3, [r2, #32]
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0x9ac>
 800198c:	4bb0      	ldr	r3, [pc, #704]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4aaf      	ldr	r2, [pc, #700]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	4bad      	ldr	r3, [pc, #692]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4aac      	ldr	r2, [pc, #688]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8081 	beq.w	8001ab8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7fe fe5d 	bl	8000674 <HAL_GetTick>
 80019ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7fe fe58 	bl	8000674 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e345      	b.n	8002064 <HAL_RCC_OscConfig+0x106c>
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019e0:	2202      	movs	r2, #2
 80019e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fa93 f2a3 	rbit	r2, r3
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a04:	2202      	movs	r2, #2
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a1e:	601a      	str	r2, [r3, #0]
  return result;
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0xa4c>
 8001a3e:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	e013      	b.n	8001a6c <HAL_RCC_OscConfig+0xa74>
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	fa93 f2a3 	rbit	r2, r3
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a70:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a74:	2102      	movs	r1, #2
 8001a76:	6011      	str	r1, [r2, #0]
 8001a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fa92 f1a2 	rbit	r1, r2
 8001a86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a8a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a8e:	6011      	str	r1, [r2, #0]
  return result;
 8001a90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a94:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	fab2 f282 	clz	r2, r2
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f002 021f 	and.w	r2, r2, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d084      	beq.n	80019c0 <HAL_RCC_OscConfig+0x9c8>
 8001ab6:	e07f      	b.n	8001bb8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7fe fddc 	bl	8000674 <HAL_GetTick>
 8001abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	e00b      	b.n	8001ada <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7fe fdd7 	bl	8000674 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e2c4      	b.n	8002064 <HAL_RCC_OscConfig+0x106c>
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b20:	601a      	str	r2, [r3, #0]
  return result;
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0xb4e>
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	e013      	b.n	8001b6e <HAL_RCC_OscConfig+0xb76>
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b4e:	2202      	movs	r2, #2
 8001b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b72:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b76:	2102      	movs	r1, #2
 8001b78:	6011      	str	r1, [r2, #0]
 8001b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	fa92 f1a2 	rbit	r1, r2
 8001b88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b8c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b90:	6011      	str	r1, [r2, #0]
  return result;
 8001b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b96:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	fab2 f282 	clz	r2, r2
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f002 021f 	and.w	r2, r2, #31
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d184      	bne.n	8001ac2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8242 	beq.w	8002062 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HAL_RCC_OscConfig+0xc58>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	f000 8213 	beq.w	8002012 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f040 8162 	bne.w	8001ec2 <HAL_RCC_OscConfig+0xeca>
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c22:	601a      	str	r2, [r3, #0]
  return result;
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe fd16 	bl	8000674 <HAL_GetTick>
 8001c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4c:	e00c      	b.n	8001c68 <HAL_RCC_OscConfig+0xc70>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe fd0e 	bl	8000674 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1fd      	b.n	8002064 <HAL_RCC_OscConfig+0x106c>
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c8c:	601a      	str	r2, [r3, #0]
  return result;
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_OscConfig+0xcba>
 8001cac:	4bb0      	ldr	r3, [pc, #704]	; (8001f70 <HAL_RCC_OscConfig+0xf78>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	e027      	b.n	8001d02 <HAL_RCC_OscConfig+0xd0a>
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	4b9c      	ldr	r3, [pc, #624]	; (8001f70 <HAL_RCC_OscConfig+0xf78>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d06:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d0e:	6011      	str	r1, [r2, #0]
 8001d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d14:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	fa92 f1a2 	rbit	r1, r2
 8001d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d22:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d26:	6011      	str	r1, [r2, #0]
  return result;
 8001d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	fab2 f282 	clz	r2, r2
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f042 0220 	orr.w	r2, r2, #32
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f002 021f 	and.w	r2, r2, #31
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d182      	bne.n	8001c54 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0xf78>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	497f      	ldr	r1, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0xf78>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d9a:	601a      	str	r2, [r3, #0]
  return result;
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001da4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe fc5a 	bl	8000674 <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe fc55 	bl	8000674 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e144      	b.n	8002064 <HAL_RCC_OscConfig+0x106c>
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dfe:	601a      	str	r2, [r3, #0]
  return result;
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_OscConfig+0xe2c>
 8001e1e:	4b54      	ldr	r3, [pc, #336]	; (8001f70 <HAL_RCC_OscConfig+0xf78>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e027      	b.n	8001e74 <HAL_RCC_OscConfig+0xe7c>
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f2a3 	rbit	r2, r3
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <HAL_RCC_OscConfig+0xf78>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e78:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e80:	6011      	str	r1, [r2, #0]
 8001e82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e86:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	fa92 f1a2 	rbit	r1, r2
 8001e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e94:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e98:	6011      	str	r1, [r2, #0]
  return result;
 8001e9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	fab2 f282 	clz	r2, r2
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 021f 	and.w	r2, r2, #31
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d082      	beq.n	8001dc6 <HAL_RCC_OscConfig+0xdce>
 8001ec0:	e0cf      	b.n	8002062 <HAL_RCC_OscConfig+0x106a>
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001eca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ee6:	601a      	str	r2, [r3, #0]
  return result;
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ef0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001efc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	461a      	mov	r2, r3
 8001f04:	2300      	movs	r3, #0
 8001f06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fbb4 	bl	8000674 <HAL_GetTick>
 8001f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f10:	e009      	b.n	8001f26 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f12:	f7fe fbaf 	bl	8000674 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e09e      	b.n	8002064 <HAL_RCC_OscConfig+0x106c>
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f38:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f2a3 	rbit	r2, r3
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f4a:	601a      	str	r2, [r3, #0]
  return result;
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d104      	bne.n	8001f74 <HAL_RCC_OscConfig+0xf7c>
 8001f6a:	4b01      	ldr	r3, [pc, #4]	; (8001f70 <HAL_RCC_OscConfig+0xf78>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e029      	b.n	8001fc4 <HAL_RCC_OscConfig+0xfcc>
 8001f70:	40021000 	.word	0x40021000
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f94:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	fa93 f2a3 	rbit	r2, r3
 8001fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x1078>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fc8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd0:	6011      	str	r1, [r2, #0]
 8001fd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	fa92 f1a2 	rbit	r1, r2
 8001fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fe4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fe8:	6011      	str	r1, [r2, #0]
  return result;
 8001fea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	f042 0220 	orr.w	r2, r2, #32
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f002 021f 	and.w	r2, r2, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d180      	bne.n	8001f12 <HAL_RCC_OscConfig+0xf1a>
 8002010:	e027      	b.n	8002062 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e01e      	b.n	8002064 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_OscConfig+0x1078>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800202e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002032:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	429a      	cmp	r2, r3
 8002044:	d10b      	bne.n	800205e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002046:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800204a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800205a:	429a      	cmp	r2, r3
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b09e      	sub	sp, #120	; 0x78
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e162      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b90      	ldr	r3, [pc, #576]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d910      	bls.n	80020bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	498b      	ldr	r1, [pc, #556]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e14a      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	497f      	ldr	r1, [pc, #508]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80dc 	beq.w	80022a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d13c      	bne.n	800216a <HAL_RCC_ClockConfig+0xf6>
 80020f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d102      	bne.n	800211a <HAL_RCC_ClockConfig+0xa6>
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	e00f      	b.n	800213a <HAL_RCC_ClockConfig+0xc6>
 800211a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	667b      	str	r3, [r7, #100]	; 0x64
 8002128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
 800212e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800213e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002142:	fa92 f2a2 	rbit	r2, r2
 8002146:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800214a:	fab2 f282 	clz	r2, r2
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f002 021f 	and.w	r2, r2, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d17b      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0f3      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d13c      	bne.n	80021ec <HAL_RCC_ClockConfig+0x178>
 8002172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002176:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_RCC_ClockConfig+0x128>
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	e00f      	b.n	80021bc <HAL_RCC_ClockConfig+0x148>
 800219c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
 80021aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
 80021b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80021c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f042 0220 	orr.w	r2, r2, #32
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f002 021f 	and.w	r2, r2, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13a      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b2      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
 80021ec:	2302      	movs	r3, #2
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_RCC_ClockConfig+0x1a0>
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e00d      	b.n	8002230 <HAL_RCC_ClockConfig+0x1bc>
 8002214:	2302      	movs	r3, #2
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	2302      	movs	r3, #2
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2202      	movs	r2, #2
 8002232:	61ba      	str	r2, [r7, #24]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	fa92 f2a2 	rbit	r2, r2
 800223a:	617a      	str	r2, [r7, #20]
  return result;
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0220 	orr.w	r2, r2, #32
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e079      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	491a      	ldr	r1, [pc, #104]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002270:	f7fe fa00 	bl	8000674 <HAL_GetTick>
 8002274:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7fe f9fc 	bl	8000674 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e061      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d214      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4906      	ldr	r1, [pc, #24]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e040      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	491a      	ldr	r1, [pc, #104]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002316:	f000 f829 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800231a:	4601      	mov	r1, r0
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002324:	22f0      	movs	r2, #240	; 0xf0
 8002326:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	fa92 f2a2 	rbit	r2, r2
 800232e:	60fa      	str	r2, [r7, #12]
  return result;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	40d3      	lsrs	r3, r2
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x2ec>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	fa21 f303 	lsr.w	r3, r1, r3
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_RCC_ClockConfig+0x2f0>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCC_ClockConfig+0x2f4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe f94e 	bl	80005ec <HAL_InitTick>
  
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3778      	adds	r7, #120	; 0x78
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	080035a4 	.word	0x080035a4
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b08b      	sub	sp, #44	; 0x2c
 8002370:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d002      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x30>
 8002396:	2b08      	cmp	r3, #8
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x36>
 800239a:	e03c      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 800239e:	623b      	str	r3, [r7, #32]
      break;
 80023a0:	e03c      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	fa92 f2a2 	rbit	r2, r2
 80023b4:	607a      	str	r2, [r7, #4]
  return result;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	40d3      	lsrs	r3, r2
 80023c0:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	220f      	movs	r2, #15
 80023d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	fa92 f2a2 	rbit	r2, r2
 80023d8:	60fa      	str	r2, [r7, #12]
  return result;
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	fab2 f282 	clz	r2, r2
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	40d3      	lsrs	r3, r2
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
 8002404:	e004      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <HAL_RCC_GetSysClockFreq+0xd0>)
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	623b      	str	r3, [r7, #32]
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002418:	623b      	str	r3, [r7, #32]
      break;
 800241a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241c:	6a3b      	ldr	r3, [r7, #32]
}
 800241e:	4618      	mov	r0, r3
 8002420:	372c      	adds	r7, #44	; 0x2c
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	007a1200 	.word	0x007a1200
 8002434:	080035bc 	.word	0x080035bc
 8002438:	080035cc 	.word	0x080035cc
 800243c:	003d0900 	.word	0x003d0900

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800245e:	f7ff ffef 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002462:	4601      	mov	r1, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800246c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002470:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	603a      	str	r2, [r7, #0]
  return result;
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	40d3      	lsrs	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	080035b4 	.word	0x080035b4

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024a2:	f7ff ffcd 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 80024a6:	4601      	mov	r1, r0
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	fa92 f2a2 	rbit	r2, r2
 80024bc:	603a      	str	r2, [r7, #0]
  return result;
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	40d3      	lsrs	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	080035b4 	.word	0x080035b4

080024e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e040      	b.n	8002574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fd ff6c 	bl	80003e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2224      	movs	r2, #36	; 0x24
 800250c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fbae 	bl	8002c80 <UART_SetConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e022      	b.n	8002574 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fcd8 	bl	8002eec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800254a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800255a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fd5f 	bl	8003030 <UART_CheckIdleState>
 8002572:	4603      	mov	r3, r0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800258e:	2b20      	cmp	r3, #32
 8002590:	d165      	bne.n	800265e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_UART_Transmit_DMA+0x22>
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e05e      	b.n	8002660 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2221      	movs	r2, #33	; 0x21
 80025c4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d027      	beq.n	800261e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a25      	ldr	r2, [pc, #148]	; (8002668 <HAL_UART_Transmit_DMA+0xec>)
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_UART_Transmit_DMA+0xf0>)
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a23      	ldr	r2, [pc, #140]	; (8002670 <HAL_UART_Transmit_DMA+0xf4>)
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	2200      	movs	r2, #0
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4619      	mov	r1, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3328      	adds	r3, #40	; 0x28
 80025fe:	461a      	mov	r2, r3
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	f7fe f9bf 	bl	8000984 <HAL_DMA_Start_IT>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2210      	movs	r2, #16
 8002610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e020      	b.n	8002660 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3308      	adds	r3, #8
 800262c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	613b      	str	r3, [r7, #16]
   return(result);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3308      	adds	r3, #8
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	623a      	str	r2, [r7, #32]
 8002648:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	69f9      	ldr	r1, [r7, #28]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	61bb      	str	r3, [r7, #24]
   return(result);
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e5      	bne.n	8002626 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	3728      	adds	r7, #40	; 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	08003363 	.word	0x08003363
 800266c:	080033f7 	.word	0x080033f7
 8002670:	08003413 	.word	0x08003413

08002674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0ba      	sub	sp, #232	; 0xe8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800269a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800269e:	f640 030f 	movw	r3, #2063	; 0x80f
 80026a2:	4013      	ands	r3, r2
 80026a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80026a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d115      	bne.n	80026dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00f      	beq.n	80026dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 82ab 	beq.w	8002c28 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
      }
      return;
 80026da:	e2a5      	b.n	8002c28 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8117 	beq.w	8002914 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <HAL_UART_IRQHandler+0x298>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 810a 	beq.w	8002914 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d011      	beq.n	8002730 <HAL_UART_IRQHandler+0xbc>
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d011      	beq.n	8002760 <HAL_UART_IRQHandler+0xec>
 800273c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2202      	movs	r2, #2
 800274e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d011      	beq.n	8002790 <HAL_UART_IRQHandler+0x11c>
 800276c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2204      	movs	r2, #4
 800277e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d017      	beq.n	80027cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800279c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2208      	movs	r2, #8
 80027ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	f043 0208 	orr.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <HAL_UART_IRQHandler+0x18a>
 80027d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f4:	f043 0220 	orr.w	r2, r3, #32
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8211 	beq.w	8002c2c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d005      	beq.n	8002856 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800284a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800284e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002852:	2b00      	cmp	r3, #0
 8002854:	d04f      	beq.n	80028f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fd1f 	bl	800329a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d141      	bne.n	80028ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3308      	adds	r3, #8
 8002870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3308      	adds	r3, #8
 8002892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800289a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1d9      	bne.n	800286a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d013      	beq.n	80028e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	4a13      	ldr	r2, [pc, #76]	; (8002910 <HAL_UART_IRQHandler+0x29c>)
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe f8f2 	bl	8000ab4 <HAL_DMA_Abort_IT>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028e0:	4610      	mov	r0, r2
 80028e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	e00f      	b.n	8002906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f9b4 	bl	8002c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ec:	e00b      	b.n	8002906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9b0 	bl	8002c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f4:	e007      	b.n	8002906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9ac 	bl	8002c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002904:	e192      	b.n	8002c2c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002906:	bf00      	nop
    return;
 8002908:	e190      	b.n	8002c2c <HAL_UART_IRQHandler+0x5b8>
 800290a:	bf00      	nop
 800290c:	04000120 	.word	0x04000120
 8002910:	08003491 	.word	0x08003491

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 814b 	bne.w	8002bb4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8144 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800292c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 813d 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2210      	movs	r2, #16
 8002940:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	f040 80b5 	bne.w	8002abc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800295e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8164 	beq.w	8002c30 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800296e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002972:	429a      	cmp	r2, r3
 8002974:	f080 815c 	bcs.w	8002c30 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800297e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b20      	cmp	r3, #32
 800298a:	f000 8086 	beq.w	8002a9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029bc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1da      	bne.n	800298e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3308      	adds	r3, #8
 80029de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3308      	adds	r3, #8
 80029f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e1      	bne.n	80029d8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3308      	adds	r3, #8
 8002a1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1e:	e853 3f00 	ldrex	r3, [r3]
 8002a22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3308      	adds	r3, #8
 8002a34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e3      	bne.n	8002a14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a62:	e853 3f00 	ldrex	r3, [r3]
 8002a66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6a:	f023 0310 	bic.w	r3, r3, #16
 8002a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a84:	e841 2300 	strex	r3, r2, [r1]
 8002a88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e4      	bne.n	8002a5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd ffd4 	bl	8000a42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8d7 	bl	8002c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002aba:	e0b9      	b.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80ab 	beq.w	8002c34 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80a6 	beq.w	8002c34 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e4      	bne.n	8002ae8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3308      	adds	r3, #8
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b42:	633a      	str	r2, [r7, #48]	; 0x30
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	e853 3f00 	ldrex	r3, [r3]
 8002b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0310 	bic.w	r3, r3, #16
 8002b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	69b9      	ldr	r1, [r7, #24]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	e841 2300 	strex	r3, r2, [r1]
 8002b98:	617b      	str	r3, [r7, #20]
   return(result);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e4      	bne.n	8002b6a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002baa:	4619      	mov	r1, r3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f85b 	bl	8002c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb2:	e03f      	b.n	8002c34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <HAL_UART_IRQHandler+0x56a>
 8002bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fc9a 	bl	8003510 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bdc:	e02d      	b.n	8002c3a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00e      	beq.n	8002c08 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01c      	beq.n	8002c38 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
    }
    return;
 8002c06:	e017      	b.n	8002c38 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <HAL_UART_IRQHandler+0x5c6>
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00c      	beq.n	8002c3a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fc4b 	bl	80034bc <UART_EndTransmit_IT>
    return;
 8002c26:	e008      	b.n	8002c3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c28:	bf00      	nop
 8002c2a:	e006      	b.n	8002c3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c2c:	bf00      	nop
 8002c2e:	e004      	b.n	8002c3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c30:	bf00      	nop
 8002c32:	e002      	b.n	8002c3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c38:	bf00      	nop
  }

}
 8002c3a:	37e8      	adds	r7, #232	; 0xe8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b8a      	ldr	r3, [pc, #552]	; (8002ed4 <UART_SetConfig+0x254>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a78      	ldr	r2, [pc, #480]	; (8002ed8 <UART_SetConfig+0x258>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d120      	bne.n	8002d3e <UART_SetConfig+0xbe>
 8002cfc:	4b77      	ldr	r3, [pc, #476]	; (8002edc <UART_SetConfig+0x25c>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d817      	bhi.n	8002d38 <UART_SetConfig+0xb8>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <UART_SetConfig+0x90>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d2d 	.word	0x08002d2d
 8002d18:	08002d33 	.word	0x08002d33
 8002d1c:	08002d27 	.word	0x08002d27
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e01d      	b.n	8002d62 <UART_SetConfig+0xe2>
 8002d26:	2302      	movs	r3, #2
 8002d28:	77fb      	strb	r3, [r7, #31]
 8002d2a:	e01a      	b.n	8002d62 <UART_SetConfig+0xe2>
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	77fb      	strb	r3, [r7, #31]
 8002d30:	e017      	b.n	8002d62 <UART_SetConfig+0xe2>
 8002d32:	2308      	movs	r3, #8
 8002d34:	77fb      	strb	r3, [r7, #31]
 8002d36:	e014      	b.n	8002d62 <UART_SetConfig+0xe2>
 8002d38:	2310      	movs	r3, #16
 8002d3a:	77fb      	strb	r3, [r7, #31]
 8002d3c:	e011      	b.n	8002d62 <UART_SetConfig+0xe2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a67      	ldr	r2, [pc, #412]	; (8002ee0 <UART_SetConfig+0x260>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d102      	bne.n	8002d4e <UART_SetConfig+0xce>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e009      	b.n	8002d62 <UART_SetConfig+0xe2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a64      	ldr	r2, [pc, #400]	; (8002ee4 <UART_SetConfig+0x264>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <UART_SetConfig+0xde>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e001      	b.n	8002d62 <UART_SetConfig+0xe2>
 8002d5e:	2310      	movs	r3, #16
 8002d60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d6a:	d15a      	bne.n	8002e22 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d827      	bhi.n	8002dc2 <UART_SetConfig+0x142>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <UART_SetConfig+0xf8>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d9d 	.word	0x08002d9d
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08002dc3 	.word	0x08002dc3
 8002d88:	08002db3 	.word	0x08002db3
 8002d8c:	08002dc3 	.word	0x08002dc3
 8002d90:	08002dc3 	.word	0x08002dc3
 8002d94:	08002dc3 	.word	0x08002dc3
 8002d98:	08002dbb 	.word	0x08002dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f7ff fb5c 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8002da0:	61b8      	str	r0, [r7, #24]
        break;
 8002da2:	e013      	b.n	8002dcc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da4:	f7ff fb7a 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8002da8:	61b8      	str	r0, [r7, #24]
        break;
 8002daa:	e00f      	b.n	8002dcc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dac:	4b4e      	ldr	r3, [pc, #312]	; (8002ee8 <UART_SetConfig+0x268>)
 8002dae:	61bb      	str	r3, [r7, #24]
        break;
 8002db0:	e00c      	b.n	8002dcc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db2:	f7ff fadb 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002db6:	61b8      	str	r0, [r7, #24]
        break;
 8002db8:	e008      	b.n	8002dcc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dbe:	61bb      	str	r3, [r7, #24]
        break;
 8002dc0:	e004      	b.n	8002dcc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	77bb      	strb	r3, [r7, #30]
        break;
 8002dca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d074      	beq.n	8002ebc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	005a      	lsls	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	441a      	add	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	d916      	bls.n	8002e1c <UART_SetConfig+0x19c>
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d212      	bcs.n	8002e1c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f023 030f 	bic.w	r3, r3, #15
 8002dfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	89fb      	ldrh	r3, [r7, #14]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	89fa      	ldrh	r2, [r7, #14]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	e04f      	b.n	8002ebc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77bb      	strb	r3, [r7, #30]
 8002e20:	e04c      	b.n	8002ebc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d828      	bhi.n	8002e7a <UART_SetConfig+0x1fa>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <UART_SetConfig+0x1b0>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08002e5d 	.word	0x08002e5d
 8002e38:	08002e65 	.word	0x08002e65
 8002e3c:	08002e7b 	.word	0x08002e7b
 8002e40:	08002e6b 	.word	0x08002e6b
 8002e44:	08002e7b 	.word	0x08002e7b
 8002e48:	08002e7b 	.word	0x08002e7b
 8002e4c:	08002e7b 	.word	0x08002e7b
 8002e50:	08002e73 	.word	0x08002e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e54:	f7ff fb00 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8002e58:	61b8      	str	r0, [r7, #24]
        break;
 8002e5a:	e013      	b.n	8002e84 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e5c:	f7ff fb1e 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8002e60:	61b8      	str	r0, [r7, #24]
        break;
 8002e62:	e00f      	b.n	8002e84 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <UART_SetConfig+0x268>)
 8002e66:	61bb      	str	r3, [r7, #24]
        break;
 8002e68:	e00c      	b.n	8002e84 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e6a:	f7ff fa7f 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002e6e:	61b8      	str	r0, [r7, #24]
        break;
 8002e70:	e008      	b.n	8002e84 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e76:	61bb      	str	r3, [r7, #24]
        break;
 8002e78:	e004      	b.n	8002e84 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	77bb      	strb	r3, [r7, #30]
        break;
 8002e82:	bf00      	nop
    }

    if (pclk != 0U)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d018      	beq.n	8002ebc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	085a      	lsrs	r2, r3, #1
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	441a      	add	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b0f      	cmp	r3, #15
 8002ea2:	d909      	bls.n	8002eb8 <UART_SetConfig+0x238>
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eaa:	d205      	bcs.n	8002eb8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	e001      	b.n	8002ebc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ec8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	efff69f3 	.word	0xefff69f3
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	40004800 	.word	0x40004800
 8002ee8:	007a1200 	.word	0x007a1200

08002eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01a      	beq.n	8003002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fea:	d10a      	bne.n	8003002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  }
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b098      	sub	sp, #96	; 0x60
 8003034:	af02      	add	r7, sp, #8
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003040:	f7fd fb18 	bl	8000674 <HAL_GetTick>
 8003044:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b08      	cmp	r3, #8
 8003052:	d12e      	bne.n	80030b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305c:	2200      	movs	r2, #0
 800305e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f88c 	bl	8003180 <UART_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d021      	beq.n	80030b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003082:	653b      	str	r3, [r7, #80]	; 0x50
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308c:	647b      	str	r3, [r7, #68]	; 0x44
 800308e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e6      	bne.n	800306e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e062      	b.n	8003178 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d149      	bne.n	8003154 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f856 	bl	8003180 <UART_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d03c      	beq.n	8003154 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	623b      	str	r3, [r7, #32]
   return(result);
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30
 80030fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e6      	bne.n	80030da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3308      	adds	r3, #8
 8003112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	60fb      	str	r3, [r7, #12]
   return(result);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3308      	adds	r3, #8
 800312a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800312c:	61fa      	str	r2, [r7, #28]
 800312e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	617b      	str	r3, [r7, #20]
   return(result);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e5      	bne.n	800310c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e011      	b.n	8003178 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3758      	adds	r7, #88	; 0x58
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003190:	e049      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d045      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fd fa6b 	bl	8000674 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e048      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d031      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d110      	bne.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2208      	movs	r2, #8
 80031d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f85e 	bl	800329a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2208      	movs	r2, #8
 80031e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e029      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003200:	d111      	bne.n	8003226 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800320a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f844 	bl	800329a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e00f      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	429a      	cmp	r2, r3
 8003242:	d0a6      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800324e:	b480      	push	{r7}
 8003250:	b089      	sub	sp, #36	; 0x24
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	60bb      	str	r3, [r7, #8]
   return(result);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6979      	ldr	r1, [r7, #20]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	613b      	str	r3, [r7, #16]
   return(result);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e6      	bne.n	8003256 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800328e:	bf00      	nop
 8003290:	3724      	adds	r7, #36	; 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800329a:	b480      	push	{r7}
 800329c:	b095      	sub	sp, #84	; 0x54
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c0:	643b      	str	r3, [r7, #64]	; 0x40
 80032c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e6      	bne.n	80032a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3308      	adds	r3, #8
 80032f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330c:	2b01      	cmp	r3, #1
 800330e:	d118      	bne.n	8003342 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	60bb      	str	r3, [r7, #8]
   return(result);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f023 0310 	bic.w	r3, r3, #16
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6979      	ldr	r1, [r7, #20]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	613b      	str	r3, [r7, #16]
   return(result);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e6      	bne.n	8003310 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003356:	bf00      	nop
 8003358:	3754      	adds	r7, #84	; 0x54
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b090      	sub	sp, #64	; 0x40
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b20      	cmp	r3, #32
 8003376:	d037      	beq.n	80033e8 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337a:	2200      	movs	r2, #0
 800337c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3308      	adds	r3, #8
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	623b      	str	r3, [r7, #32]
   return(result);
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a0:	633a      	str	r2, [r7, #48]	; 0x30
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	69b9      	ldr	r1, [r7, #24]
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	617b      	str	r3, [r7, #20]
   return(result);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e6      	bne.n	80033b4 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80033e6:	e002      	b.n	80033ee <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80033e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033ea:	f7fc feed 	bl	80001c8 <HAL_UART_TxCpltCallback>
}
 80033ee:	bf00      	nop
 80033f0:	3740      	adds	r7, #64	; 0x40
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fc1b 	bl	8002c40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003424:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b80      	cmp	r3, #128	; 0x80
 800343a:	d109      	bne.n	8003450 <UART_DMAError+0x3e>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b21      	cmp	r3, #33	; 0x21
 8003440:	d106      	bne.n	8003450 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f7ff feff 	bl	800324e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d109      	bne.n	8003472 <UART_DMAError+0x60>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b22      	cmp	r3, #34	; 0x22
 8003462:	d106      	bne.n	8003472 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2200      	movs	r2, #0
 8003468:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800346c:	6978      	ldr	r0, [r7, #20]
 800346e:	f7ff ff14 	bl	800329a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003478:	f043 0210 	orr.w	r2, r3, #16
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff fbe6 	bl	8002c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003488:	bf00      	nop
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff fbd0 	bl	8002c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	613b      	str	r3, [r7, #16]
   return(result);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e6      	bne.n	80034c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fc fe60 	bl	80001c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003508:	bf00      	nop
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <memset>:
 8003524:	4402      	add	r2, r0
 8003526:	4603      	mov	r3, r0
 8003528:	4293      	cmp	r3, r2
 800352a:	d100      	bne.n	800352e <memset+0xa>
 800352c:	4770      	bx	lr
 800352e:	f803 1b01 	strb.w	r1, [r3], #1
 8003532:	e7f9      	b.n	8003528 <memset+0x4>

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	4d0d      	ldr	r5, [pc, #52]	; (800356c <__libc_init_array+0x38>)
 8003538:	4c0d      	ldr	r4, [pc, #52]	; (8003570 <__libc_init_array+0x3c>)
 800353a:	1b64      	subs	r4, r4, r5
 800353c:	10a4      	asrs	r4, r4, #2
 800353e:	2600      	movs	r6, #0
 8003540:	42a6      	cmp	r6, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	4d0b      	ldr	r5, [pc, #44]	; (8003574 <__libc_init_array+0x40>)
 8003546:	4c0c      	ldr	r4, [pc, #48]	; (8003578 <__libc_init_array+0x44>)
 8003548:	f000 f818 	bl	800357c <_init>
 800354c:	1b64      	subs	r4, r4, r5
 800354e:	10a4      	asrs	r4, r4, #2
 8003550:	2600      	movs	r6, #0
 8003552:	42a6      	cmp	r6, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	f855 3b04 	ldr.w	r3, [r5], #4
 800355c:	4798      	blx	r3
 800355e:	3601      	adds	r6, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	f855 3b04 	ldr.w	r3, [r5], #4
 8003566:	4798      	blx	r3
 8003568:	3601      	adds	r6, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	080035dc 	.word	0x080035dc
 8003570:	080035dc 	.word	0x080035dc
 8003574:	080035dc 	.word	0x080035dc
 8003578:	080035e0 	.word	0x080035e0

0800357c <_init>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	bf00      	nop
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr

08003588 <_fini>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr
