
tst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003330  08003330  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003330  08003330  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003330  08003330  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003334  08003334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000134  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b9d8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018a9  00000000  00000000  0002ba57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000738  00000000  00000000  0002dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ab4e  00000000  00000000  0002e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bb93  00000000  00000000  00048ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e7ae  00000000  00000000  00054a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002680  00000000  00000000  000f3220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000f58a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032d8 	.word	0x080032d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032d8 	.word	0x080032d8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fac1 	bl	8000754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f81f 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f907 	bl	80003e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f8d5 	bl	8000388 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001de:	f000 f85f 	bl	80002a0 <MX_CAN_Init>
  MX_SPI1_Init();
 80001e2:	f000 f893 	bl	800030c <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  char msg[] = "hello";
 80001e6:	4a09      	ldr	r2, [pc, #36]	; (800020c <main+0x44>)
 80001e8:	463b      	mov	r3, r7
 80001ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001ee:	6018      	str	r0, [r3, #0]
 80001f0:	3304      	adds	r3, #4
 80001f2:	8019      	strh	r1, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 1000);
 80001f4:	4639      	mov	r1, r7
 80001f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001fa:	2206      	movs	r2, #6
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <main+0x48>)
 80001fe:	f002 fc68 	bl	8002ad2 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f000 fb0b 	bl	8000820 <HAL_Delay>
  {
 800020a:	e7ec      	b.n	80001e6 <main+0x1e>
 800020c:	080032f0 	.word	0x080032f0
 8000210:	200000b4 	.word	0x200000b4

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 f82b 	bl	800327e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000236:	2301      	movs	r3, #1
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800023a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800023e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000240:	2301      	movs	r3, #1
 8000242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000248:	2302      	movs	r3, #2
 800024a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000252:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000256:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	4618      	mov	r0, r3
 800025e:	f001 f8d3 	bl	8001408 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000268:	f000 f908 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2302      	movs	r3, #2
 8000272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f002 f8fc 	bl	8002484 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000292:	f000 f8f3 	bl	800047c <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3740      	adds	r7, #64	; 0x40
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_CAN_Init+0x64>)
 80002a6:	4a18      	ldr	r2, [pc, #96]	; (8000308 <MX_CAN_Init+0x68>)
 80002a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <MX_CAN_Init+0x64>)
 80002ac:	2203      	movs	r2, #3
 80002ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_CAN_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002b6:	4b13      	ldr	r3, [pc, #76]	; (8000304 <MX_CAN_Init+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80002bc:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_CAN_Init+0x64>)
 80002be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002c2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_CAN_Init+0x64>)
 80002c6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80002ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <MX_CAN_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_CAN_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <MX_CAN_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_CAN_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <MX_CAN_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_CAN_Init+0x64>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_CAN_Init+0x64>)
 80002f2:	f000 fab9 	bl	8000868 <HAL_CAN_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002fc:	f000 f8be 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000028 	.word	0x20000028
 8000308:	40006400 	.word	0x40006400

0800030c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <MX_SPI1_Init+0x74>)
 8000312:	4a1c      	ldr	r2, [pc, #112]	; (8000384 <MX_SPI1_Init+0x78>)
 8000314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_SPI1_Init+0x74>)
 8000318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800031c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800031e:	4b18      	ldr	r3, [pc, #96]	; (8000380 <MX_SPI1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000324:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_SPI1_Init+0x74>)
 8000326:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800032a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_SPI1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_SPI1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_SPI1_Init+0x74>)
 800033a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800033e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_SPI1_Init+0x74>)
 8000342:	2210      	movs	r2, #16
 8000344:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_SPI1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_SPI1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_SPI1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_SPI1_Init+0x74>)
 800035a:	2207      	movs	r2, #7
 800035c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_SPI1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_SPI1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_SPI1_Init+0x74>)
 800036c:	f002 fac0 	bl	80028f0 <HAL_SPI_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000376:	f000 f881 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000050 	.word	0x20000050
 8000384:	40013000 	.word	0x40013000

08000388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 800038e:	4a15      	ldr	r2, [pc, #84]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 8000390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 8000394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003ae:	220c      	movs	r2, #12
 80003b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_USART2_UART_Init+0x58>)
 80003cc:	f002 fb33 	bl	8002a36 <HAL_UART_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003d6:	f000 f851 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000b4 	.word	0x200000b4
 80003e4:	40004400 	.word	0x40004400

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_GPIO_Init+0x8c>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a16      	ldr	r2, [pc, #88]	; (8000474 <MX_GPIO_Init+0x8c>)
 800041c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a10      	ldr	r2, [pc, #64]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_GPIO_Init+0x8c>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2108      	movs	r1, #8
 800044a:	480b      	ldr	r0, [pc, #44]	; (8000478 <MX_GPIO_Init+0x90>)
 800044c:	f000 ffc4 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000450:	2308      	movs	r3, #8
 8000452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	f107 030c 	add.w	r3, r7, #12
 8000464:	4619      	mov	r1, r3
 8000466:	4804      	ldr	r0, [pc, #16]	; (8000478 <MX_GPIO_Init+0x90>)
 8000468:	f000 fe44 	bl	80010f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	48000400 	.word	0x48000400

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_MspInit+0x44>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <HAL_MspInit+0x44>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <HAL_MspInit+0x44>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <HAL_MspInit+0x44>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a08      	ldr	r2, [pc, #32]	; (80004cc <HAL_MspInit+0x44>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <HAL_MspInit+0x44>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <HAL_CAN_MspInit+0x90>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d131      	bne.n	8000556 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <HAL_CAN_MspInit+0x94>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <HAL_CAN_MspInit+0x94>)
 80004f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <HAL_CAN_MspInit+0x94>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_CAN_MspInit+0x94>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a15      	ldr	r2, [pc, #84]	; (8000564 <HAL_CAN_MspInit+0x94>)
 8000510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_CAN_MspInit+0x94>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000522:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000528:	2302      	movs	r3, #2
 800052a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000530:	2303      	movs	r3, #3
 8000532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000534:	2309      	movs	r3, #9
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4619      	mov	r1, r3
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 fdd7 	bl	80010f4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2014      	movs	r0, #20
 800054c:	f000 fd9b 	bl	8001086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000550:	2014      	movs	r0, #20
 8000552:	f000 fdb4 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000556:	bf00      	nop
 8000558:	3728      	adds	r7, #40	; 0x28
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40006400 	.word	0x40006400
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <HAL_SPI_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d128      	bne.n	80005dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <HAL_SPI_MspInit+0x80>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <HAL_SPI_MspInit+0x80>)
 8000590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_SPI_MspInit+0x80>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_SPI_MspInit+0x80>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <HAL_SPI_MspInit+0x80>)
 80005a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <HAL_SPI_MspInit+0x80>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005ba:	23e0      	movs	r3, #224	; 0xe0
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005ca:	2305      	movs	r3, #5
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fd8c 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40013000 	.word	0x40013000
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <HAL_UART_MspInit+0x80>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d129      	bne.n	8000662 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_UART_MspInit+0x84>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a17      	ldr	r2, [pc, #92]	; (8000670 <HAL_UART_MspInit+0x84>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_UART_MspInit+0x84>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_UART_MspInit+0x84>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <HAL_UART_MspInit+0x84>)
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_UART_MspInit+0x84>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800063e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000650:	2307      	movs	r3, #7
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f000 fd49 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	; 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40004400 	.word	0x40004400
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f88e 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <CAN_RX0_IRQHandler+0x10>)
 80006ce:	f000 f9c6 	bl	8000a5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000028 	.word	0x20000028

080006dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <SystemInit+0x20>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <SystemInit+0x20>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000738 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000704:	f7ff ffea 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072e:	f002 fdaf 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000732:	f7ff fd49 	bl	80001c8 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000738:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000744:	08003338 	.word	0x08003338
  ldr r2, =_sbss
 8000748:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800074c:	20000140 	.word	0x20000140

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>
	...

08000754 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_Init+0x28>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_Init+0x28>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 fc83 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f808 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000770:	f7ff fe8a 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40022000 	.word	0x40022000

08000780 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x54>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x58>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	fbb3 f3f1 	udiv	r3, r3, r1
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fc9b 	bl	80010da <HAL_SYSTICK_Config>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00e      	b.n	80007cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d80a      	bhi.n	80007ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b4:	2200      	movs	r2, #0
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f000 fc63 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_InitTick+0x5c>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e000      	b.n	80007cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000004 	.word	0x20000004

080007e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x24>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_IncTick+0x24>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008
 8000804:	2000013c 	.word	0x2000013c

08000808 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;  
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_GetTick+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	2000013c 	.word	0x2000013c

08000820 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000828:	f7ff ffee 	bl	8000808 <HAL_GetTick>
 800082c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000838:	d005      	beq.n	8000846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_Delay+0x44>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000846:	bf00      	nop
 8000848:	f7ff ffde 	bl	8000808 <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	429a      	cmp	r2, r3
 8000856:	d8f7      	bhi.n	8000848 <HAL_Delay+0x28>
  {
  }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008

08000868 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e0ed      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d102      	bne.n	800088c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fe22 	bl	80004d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0201 	orr.w	r2, r2, #1
 800089a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800089c:	f7ff ffb4 	bl	8000808 <HAL_GetTick>
 80008a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008a2:	e012      	b.n	80008ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008a4:	f7ff ffb0 	bl	8000808 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	2b0a      	cmp	r3, #10
 80008b0:	d90b      	bls.n	80008ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2205      	movs	r2, #5
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e0c5      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0e5      	beq.n	80008a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f022 0202 	bic.w	r2, r2, #2
 80008e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008e8:	f7ff ff8e 	bl	8000808 <HAL_GetTick>
 80008ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ee:	e012      	b.n	8000916 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008f0:	f7ff ff8a 	bl	8000808 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b0a      	cmp	r3, #10
 80008fc:	d90b      	bls.n	8000916 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2205      	movs	r2, #5
 800090e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e09f      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1e5      	bne.n	80008f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7e1b      	ldrb	r3, [r3, #24]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d108      	bne.n	800093e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	e007      	b.n	800094e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7e5b      	ldrb	r3, [r3, #25]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d108      	bne.n	8000968 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e007      	b.n	8000978 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000976:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7e9b      	ldrb	r3, [r3, #26]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d108      	bne.n	8000992 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f042 0220 	orr.w	r2, r2, #32
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	e007      	b.n	80009a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0220 	bic.w	r2, r2, #32
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7edb      	ldrb	r3, [r3, #27]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d108      	bne.n	80009bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0210 	bic.w	r2, r2, #16
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	e007      	b.n	80009cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0210 	orr.w	r2, r2, #16
 80009ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7f1b      	ldrb	r3, [r3, #28]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d108      	bne.n	80009e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0208 	orr.w	r2, r2, #8
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	e007      	b.n	80009f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0208 	bic.w	r2, r2, #8
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7f5b      	ldrb	r3, [r3, #29]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d108      	bne.n	8000a10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f042 0204 	orr.w	r2, r2, #4
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e007      	b.n	8000a20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0204 	bic.w	r2, r2, #4
 8000a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	ea42 0103 	orr.w	r1, r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b08a      	sub	sp, #40	; 0x28
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d07c      	beq.n	8000b9e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d023      	beq.n	8000af6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f983 	bl	8000dcc <HAL_CAN_TxMailbox0CompleteCallback>
 8000ac6:	e016      	b.n	8000af6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d004      	beq.n	8000adc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ada:	e00c      	b.n	8000af6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d004      	beq.n	8000af0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	e002      	b.n	8000af6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f989 	bl	8000e08 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d024      	beq.n	8000b4a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f963 	bl	8000de0 <HAL_CAN_TxMailbox1CompleteCallback>
 8000b1a:	e016      	b.n	8000b4a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d004      	beq.n	8000b30 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b2e:	e00c      	b.n	8000b4a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
 8000b42:	e002      	b.n	8000b4a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f969 	bl	8000e1c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d024      	beq.n	8000b9e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f943 	bl	8000df4 <HAL_CAN_TxMailbox2CompleteCallback>
 8000b6e:	e016      	b.n	8000b9e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d004      	beq.n	8000b84 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
 8000b82:	e00c      	b.n	8000b9e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
 8000b96:	e002      	b.n	8000b9e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 f949 	bl	8000e30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00c      	beq.n	8000bc2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d007      	beq.n	8000bc2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2208      	movs	r2, #8
 8000bdc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f93a 	bl	8000e58 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d009      	beq.n	8000c02 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f921 	bl	8000e44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00c      	beq.n	8000c26 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2210      	movs	r2, #16
 8000c24:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	f003 0320 	and.w	r3, r3, #32
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00b      	beq.n	8000c48 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d006      	beq.n	8000c48 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2208      	movs	r2, #8
 8000c40:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f91c 	bl	8000e80 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d009      	beq.n	8000c66 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d002      	beq.n	8000c66 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f903 	bl	8000e6c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00b      	beq.n	8000c88 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2210      	movs	r2, #16
 8000c80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 f906 	bl	8000e94 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00b      	beq.n	8000caa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f8ff 	bl	8000ea8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d07b      	beq.n	8000dac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d072      	beq.n	8000da4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d008      	beq.n	8000cda <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d008      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d043      	beq.n	8000da4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d03e      	beq.n	8000da4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d2c:	2b60      	cmp	r3, #96	; 0x60
 8000d2e:	d02b      	beq.n	8000d88 <HAL_CAN_IRQHandler+0x32a>
 8000d30:	2b60      	cmp	r3, #96	; 0x60
 8000d32:	d82e      	bhi.n	8000d92 <HAL_CAN_IRQHandler+0x334>
 8000d34:	2b50      	cmp	r3, #80	; 0x50
 8000d36:	d022      	beq.n	8000d7e <HAL_CAN_IRQHandler+0x320>
 8000d38:	2b50      	cmp	r3, #80	; 0x50
 8000d3a:	d82a      	bhi.n	8000d92 <HAL_CAN_IRQHandler+0x334>
 8000d3c:	2b40      	cmp	r3, #64	; 0x40
 8000d3e:	d019      	beq.n	8000d74 <HAL_CAN_IRQHandler+0x316>
 8000d40:	2b40      	cmp	r3, #64	; 0x40
 8000d42:	d826      	bhi.n	8000d92 <HAL_CAN_IRQHandler+0x334>
 8000d44:	2b30      	cmp	r3, #48	; 0x30
 8000d46:	d010      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x30c>
 8000d48:	2b30      	cmp	r3, #48	; 0x30
 8000d4a:	d822      	bhi.n	8000d92 <HAL_CAN_IRQHandler+0x334>
 8000d4c:	2b10      	cmp	r3, #16
 8000d4e:	d002      	beq.n	8000d56 <HAL_CAN_IRQHandler+0x2f8>
 8000d50:	2b20      	cmp	r3, #32
 8000d52:	d005      	beq.n	8000d60 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000d54:	e01d      	b.n	8000d92 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d5e:	e019      	b.n	8000d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d68:	e014      	b.n	8000d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d72:	e00f      	b.n	8000d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d7c:	e00a      	b.n	8000d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d86:	e005      	b.n	8000d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d90:	e000      	b.n	8000d94 <HAL_CAN_IRQHandler+0x336>
            break;
 8000d92:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000da2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2204      	movs	r2, #4
 8000daa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d008      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f87c 	bl	8000ebc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <__NVIC_EnableIRQ+0x38>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff8e 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff29 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff3e 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff8e 	bl	8000fc4 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff31 	bl	8000f34 <__NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffa2 	bl	800102c <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	e14e      	b.n	80013a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8140 	beq.w	800139c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d005      	beq.n	8001134 <HAL_GPIO_Init+0x40>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d130      	bne.n	8001196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	f003 0201 	and.w	r2, r3, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d017      	beq.n	80011d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d123      	bne.n	8001226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	6939      	ldr	r1, [r7, #16]
 8001222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0203 	and.w	r2, r3, #3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 809a 	beq.w	800139c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <HAL_GPIO_Init+0x2cc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a54      	ldr	r2, [pc, #336]	; (80013c0 <HAL_GPIO_Init+0x2cc>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b52      	ldr	r3, [pc, #328]	; (80013c0 <HAL_GPIO_Init+0x2cc>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001280:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012aa:	d013      	beq.n	80012d4 <HAL_GPIO_Init+0x1e0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a46      	ldr	r2, [pc, #280]	; (80013c8 <HAL_GPIO_Init+0x2d4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d00d      	beq.n	80012d0 <HAL_GPIO_Init+0x1dc>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a45      	ldr	r2, [pc, #276]	; (80013cc <HAL_GPIO_Init+0x2d8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d007      	beq.n	80012cc <HAL_GPIO_Init+0x1d8>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a44      	ldr	r2, [pc, #272]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_GPIO_Init+0x1d4>
 80012c4:	2303      	movs	r3, #3
 80012c6:	e006      	b.n	80012d6 <HAL_GPIO_Init+0x1e2>
 80012c8:	2305      	movs	r3, #5
 80012ca:	e004      	b.n	80012d6 <HAL_GPIO_Init+0x1e2>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e002      	b.n	80012d6 <HAL_GPIO_Init+0x1e2>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <HAL_GPIO_Init+0x1e2>
 80012d4:	2300      	movs	r3, #0
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	f002 0203 	and.w	r2, r2, #3
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	4093      	lsls	r3, r2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e6:	4937      	ldr	r1, [pc, #220]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f4:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001318:	4a2e      	ldr	r2, [pc, #184]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001342:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f47f aea9 	bne.w	8001104 <HAL_GPIO_Init+0x10>
  }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010000 	.word	0x40010000
 80013c8:	48000400 	.word	0x48000400
 80013cc:	48000800 	.word	0x48000800
 80013d0:	48000c00 	.word	0x48000c00
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800140e:	af00      	add	r7, sp, #0
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001418:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800141a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	f001 b823 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 817d 	beq.w	800173e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001444:	4bbc      	ldr	r3, [pc, #752]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b04      	cmp	r3, #4
 800144e:	d00c      	beq.n	800146a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001450:	4bb9      	ldr	r3, [pc, #740]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d15c      	bne.n	8001516 <HAL_RCC_OscConfig+0x10e>
 800145c:	4bb6      	ldr	r3, [pc, #728]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d155      	bne.n	8001516 <HAL_RCC_OscConfig+0x10e>
 800146a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800147e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	095b      	lsrs	r3, r3, #5
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <HAL_RCC_OscConfig+0x94>
 8001496:	4ba8      	ldr	r3, [pc, #672]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	e015      	b.n	80014c8 <HAL_RCC_OscConfig+0xc0>
 800149c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80014c4:	4b9c      	ldr	r3, [pc, #624]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80014d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014d4:	fa92 f2a2 	rbit	r2, r2
 80014d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80014dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80014e0:	fab2 f282 	clz	r2, r2
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	f042 0220 	orr.w	r2, r2, #32
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	f002 021f 	and.w	r2, r2, #31
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 811f 	beq.w	800173c <HAL_RCC_OscConfig+0x334>
 80014fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 8116 	bne.w	800173c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	f000 bfaf 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x12e>
 8001528:	4b83      	ldr	r3, [pc, #524]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a82      	ldr	r2, [pc, #520]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e036      	b.n	80015a4 <HAL_RCC_OscConfig+0x19c>
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x158>
 8001546:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7b      	ldr	r2, [pc, #492]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b79      	ldr	r3, [pc, #484]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a78      	ldr	r2, [pc, #480]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e021      	b.n	80015a4 <HAL_RCC_OscConfig+0x19c>
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x184>
 8001572:	4b71      	ldr	r3, [pc, #452]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a70      	ldr	r2, [pc, #448]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6d      	ldr	r2, [pc, #436]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0x19c>
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 8001592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	f023 020f 	bic.w	r2, r3, #15
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	495f      	ldr	r1, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d059      	beq.n	8001682 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff f91b 	bl	8000808 <HAL_GetTick>
 80015d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff f916 	bl	8000808 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d902      	bls.n	80015ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f000 bf43 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>
 80015ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001602:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	095b      	lsrs	r3, r3, #5
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0x218>
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e015      	b.n	800164c <HAL_RCC_OscConfig+0x244>
 8001620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001624:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001638:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800163c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001648:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001650:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001654:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001658:	fa92 f2a2 	rbit	r2, r2
 800165c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001660:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001664:	fab2 f282 	clz	r2, r2
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f002 021f 	and.w	r2, r2, #31
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ab      	beq.n	80015d8 <HAL_RCC_OscConfig+0x1d0>
 8001680:	e05d      	b.n	800173e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff f8c1 	bl	8000808 <HAL_GetTick>
 8001686:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff f8bc 	bl	8000808 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d902      	bls.n	80016a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	f000 bee9 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>
 80016a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	095b      	lsrs	r3, r3, #5
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2cc>
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	e015      	b.n	8001700 <HAL_RCC_OscConfig+0x2f8>
 80016d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016f4:	fa93 f3a3 	rbit	r3, r3
 80016f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_RCC_OscConfig+0x330>)
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001704:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001708:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800170c:	fa92 f2a2 	rbit	r2, r2
 8001710:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001714:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001718:	fab2 f282 	clz	r2, r2
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	f042 0220 	orr.w	r2, r2, #32
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	f002 021f 	and.w	r2, r2, #31
 8001728:	2101      	movs	r1, #1
 800172a:	fa01 f202 	lsl.w	r2, r1, r2
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ab      	bne.n	800168c <HAL_RCC_OscConfig+0x284>
 8001734:	e003      	b.n	800173e <HAL_RCC_OscConfig+0x336>
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 817d 	beq.w	8001a4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001754:	4ba6      	ldr	r3, [pc, #664]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001760:	4ba3      	ldr	r3, [pc, #652]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d172      	bne.n	8001852 <HAL_RCC_OscConfig+0x44a>
 800176c:	4ba0      	ldr	r3, [pc, #640]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d16c      	bne.n	8001852 <HAL_RCC_OscConfig+0x44a>
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800178a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0x3a0>
 80017a2:	4b93      	ldr	r3, [pc, #588]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	e013      	b.n	80017d0 <HAL_RCC_OscConfig+0x3c8>
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017cc:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2202      	movs	r2, #2
 80017d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017da:	fa92 f2a2 	rbit	r2, r2
 80017de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80017e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80017e6:	fab2 f282 	clz	r2, r2
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f042 0220 	orr.w	r2, r2, #32
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f002 021f 	and.w	r2, r2, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_RCC_OscConfig+0x410>
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d002      	beq.n	8001818 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f000 be2e 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	21f8      	movs	r1, #248	; 0xf8
 800182e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001836:	fa91 f1a1 	rbit	r1, r1
 800183a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800183e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001842:	fab1 f181 	clz	r1, r1
 8001846:	b2c9      	uxtb	r1, r1
 8001848:	408b      	lsls	r3, r1
 800184a:	4969      	ldr	r1, [pc, #420]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001850:	e0fd      	b.n	8001a4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8088 	beq.w	8001974 <HAL_RCC_OscConfig+0x56c>
 8001864:	2301      	movs	r3, #1
 8001866:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001876:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	461a      	mov	r2, r3
 800188c:	2301      	movs	r3, #1
 800188e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7fe ffba 	bl	8000808 <HAL_GetTick>
 8001894:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189a:	f7fe ffb5 	bl	8000808 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d902      	bls.n	80018b0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	f000 bde2 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	095b      	lsrs	r3, r3, #5
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4d8>
 80018da:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	e013      	b.n	8001908 <HAL_RCC_OscConfig+0x500>
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001904:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	2202      	movs	r2, #2
 800190a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800190e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001912:	fa92 f2a2 	rbit	r2, r2
 8001916:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800191a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800191e:	fab2 f282 	clz	r2, r2
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	f042 0220 	orr.w	r2, r2, #32
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f002 021f 	and.w	r2, r2, #31
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0af      	beq.n	800189a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	21f8      	movs	r1, #248	; 0xf8
 8001950:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001958:	fa91 f1a1 	rbit	r1, r1
 800195c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001960:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001964:	fab1 f181 	clz	r1, r1
 8001968:	b2c9      	uxtb	r1, r1
 800196a:	408b      	lsls	r3, r1
 800196c:	4920      	ldr	r1, [pc, #128]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
 8001972:	e06c      	b.n	8001a4e <HAL_RCC_OscConfig+0x646>
 8001974:	2301      	movs	r3, #1
 8001976:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001986:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	461a      	mov	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7fe ff32 	bl	8000808 <HAL_GetTick>
 80019a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019aa:	f7fe ff2d 	bl	8000808 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d902      	bls.n	80019c0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	f000 bd5a 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>
 80019c0:	2302      	movs	r3, #2
 80019c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019ca:	fa93 f3a3 	rbit	r3, r3
 80019ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	095b      	lsrs	r3, r3, #5
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d104      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5ec>
 80019ea:	4b01      	ldr	r3, [pc, #4]	; (80019f0 <HAL_RCC_OscConfig+0x5e8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	e015      	b.n	8001a1c <HAL_RCC_OscConfig+0x614>
 80019f0:	40021000 	.word	0x40021000
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a18:	4bc8      	ldr	r3, [pc, #800]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a26:	fa92 f2a2 	rbit	r2, r2
 8001a2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f042 0220 	orr.w	r2, r2, #32
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ad      	bne.n	80019aa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8110 	beq.w	8001c84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d079      	beq.n	8001b68 <HAL_RCC_OscConfig+0x760>
 8001a74:	2301      	movs	r3, #1
 8001a76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	fab3 f383 	clz	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	4bab      	ldr	r3, [pc, #684]	; (8001d40 <HAL_RCC_OscConfig+0x938>)
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7fe feb3 	bl	8000808 <HAL_GetTick>
 8001aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7fe feae 	bl	8000808 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d902      	bls.n	8001abe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	f000 bcdb 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ad8:	2202      	movs	r2, #2
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001afc:	2202      	movs	r2, #2
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b18:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b24:	2102      	movs	r1, #2
 8001b26:	6019      	str	r1, [r3, #0]
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f1a3 	rbit	r1, r3
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b3e:	6019      	str	r1, [r3, #0]
  return result;
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fab3 f383 	clz	r3, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0a0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x6a0>
 8001b66:	e08d      	b.n	8001c84 <HAL_RCC_OscConfig+0x87c>
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b8a:	601a      	str	r2, [r3, #0]
  return result;
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x938>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7fe fe2d 	bl	8000808 <HAL_GetTick>
 8001bae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7fe fe28 	bl	8000808 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d902      	bls.n	8001bca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	f000 bc55 	b.w	8002474 <HAL_RCC_OscConfig+0x106c>
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c42:	2102      	movs	r1, #2
 8001c44:	6019      	str	r1, [r3, #0]
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f1a3 	rbit	r1, r3
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c5c:	6019      	str	r1, [r3, #0]
  return result;
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d197      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 81a1 	beq.w	8001fdc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d116      	bne.n	8001cda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	61d3      	str	r3, [r2, #28]
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001cd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_OscConfig+0x93c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11a      	bne.n	8001d1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_RCC_OscConfig+0x93c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_RCC_OscConfig+0x93c>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf2:	f7fe fd89 	bl	8000808 <HAL_GetTick>
 8001cf6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	e009      	b.n	8001d10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7fe fd84 	bl	8000808 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	; 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e3b1      	b.n	8002474 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_RCC_OscConfig+0x93c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ef      	beq.n	8001cfc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d10d      	bne.n	8001d48 <HAL_RCC_OscConfig+0x940>
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a02      	ldr	r2, [pc, #8]	; (8001d3c <HAL_RCC_OscConfig+0x934>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	e03c      	b.n	8001db4 <HAL_RCC_OscConfig+0x9ac>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	10908120 	.word	0x10908120
 8001d44:	40007000 	.word	0x40007000
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x96a>
 8001d58:	4bc1      	ldr	r3, [pc, #772]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4ac0      	ldr	r2, [pc, #768]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6213      	str	r3, [r2, #32]
 8001d64:	4bbe      	ldr	r3, [pc, #760]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4abd      	ldr	r2, [pc, #756]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	e020      	b.n	8001db4 <HAL_RCC_OscConfig+0x9ac>
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x994>
 8001d82:	4bb7      	ldr	r3, [pc, #732]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4ab6      	ldr	r2, [pc, #728]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4bb4      	ldr	r3, [pc, #720]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4ab3      	ldr	r2, [pc, #716]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0x9ac>
 8001d9c:	4bb0      	ldr	r3, [pc, #704]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4aaf      	ldr	r2, [pc, #700]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	4bad      	ldr	r3, [pc, #692]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4aac      	ldr	r2, [pc, #688]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8081 	beq.w	8001ec8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe fd1f 	bl	8000808 <HAL_GetTick>
 8001dca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7fe fd1a 	bl	8000808 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e345      	b.n	8002474 <HAL_RCC_OscConfig+0x106c>
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001df0:	2202      	movs	r2, #2
 8001df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e14:	2202      	movs	r2, #2
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e2e:	601a      	str	r2, [r3, #0]
  return result;
 8001e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e34:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_OscConfig+0xa4c>
 8001e4e:	4b84      	ldr	r3, [pc, #528]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	e013      	b.n	8001e7c <HAL_RCC_OscConfig+0xa74>
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e80:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e84:	2102      	movs	r1, #2
 8001e86:	6011      	str	r1, [r2, #0]
 8001e88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e8c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	fa92 f1a2 	rbit	r1, r2
 8001e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e9e:	6011      	str	r1, [r2, #0]
  return result;
 8001ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	fab2 f282 	clz	r2, r2
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	f002 021f 	and.w	r2, r2, #31
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d084      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x9c8>
 8001ec6:	e07f      	b.n	8001fc8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7fe fc9e 	bl	8000808 <HAL_GetTick>
 8001ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed0:	e00b      	b.n	8001eea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe fc99 	bl	8000808 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e2c4      	b.n	8002474 <HAL_RCC_OscConfig+0x106c>
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f16:	2202      	movs	r2, #2
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f30:	601a      	str	r2, [r3, #0]
  return result;
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_OscConfig+0xb4e>
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	e013      	b.n	8001f7e <HAL_RCC_OscConfig+0xb76>
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f5e:	2202      	movs	r2, #2
 8001f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f66:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f2a3 	rbit	r2, r3
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f86:	2102      	movs	r1, #2
 8001f88:	6011      	str	r1, [r2, #0]
 8001f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f8e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	fa92 f1a2 	rbit	r1, r2
 8001f98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fa0:	6011      	str	r1, [r2, #0]
  return result;
 8001fa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	fab2 f282 	clz	r2, r2
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f002 021f 	and.w	r2, r2, #31
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d184      	bne.n	8001ed2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8242 	beq.w	8002472 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_RCC_OscConfig+0xc58>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	f000 8213 	beq.w	8002422 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b02      	cmp	r3, #2
 800200a:	f040 8162 	bne.w	80022d2 <HAL_RCC_OscConfig+0xeca>
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002016:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800201a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002020:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f2a3 	rbit	r2, r3
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002032:	601a      	str	r2, [r3, #0]
  return result;
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800203c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002048:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	461a      	mov	r2, r3
 8002050:	2300      	movs	r3, #0
 8002052:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fbd8 	bl	8000808 <HAL_GetTick>
 8002058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	e00c      	b.n	8002078 <HAL_RCC_OscConfig+0xc70>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe fbd0 	bl	8000808 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e1fd      	b.n	8002474 <HAL_RCC_OscConfig+0x106c>
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002098:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800209c:	601a      	str	r2, [r3, #0]
  return result;
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0xcba>
 80020bc:	4bb0      	ldr	r3, [pc, #704]	; (8002380 <HAL_RCC_OscConfig+0xf78>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e027      	b.n	8002112 <HAL_RCC_OscConfig+0xd0a>
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fa93 f2a3 	rbit	r2, r3
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	4b9c      	ldr	r3, [pc, #624]	; (8002380 <HAL_RCC_OscConfig+0xf78>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002116:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800211a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800211e:	6011      	str	r1, [r2, #0]
 8002120:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002124:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	fa92 f1a2 	rbit	r1, r2
 800212e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002132:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002136:	6011      	str	r1, [r2, #0]
  return result;
 8002138:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800213c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	fab2 f282 	clz	r2, r2
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f002 021f 	and.w	r2, r2, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d182      	bne.n	8002064 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215e:	4b88      	ldr	r3, [pc, #544]	; (8002380 <HAL_RCC_OscConfig+0xf78>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	430b      	orrs	r3, r1
 8002180:	497f      	ldr	r1, [pc, #508]	; (8002380 <HAL_RCC_OscConfig+0xf78>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800218e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f2a3 	rbit	r2, r3
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021aa:	601a      	str	r2, [r3, #0]
  return result;
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	461a      	mov	r2, r3
 80021c8:	2301      	movs	r3, #1
 80021ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fb1c 	bl	8000808 <HAL_GetTick>
 80021d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d4:	e009      	b.n	80021ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d6:	f7fe fb17 	bl	8000808 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e144      	b.n	8002474 <HAL_RCC_OscConfig+0x106c>
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fa93 f2a3 	rbit	r2, r3
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800220e:	601a      	str	r2, [r3, #0]
  return result;
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002218:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_RCC_OscConfig+0xe2c>
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_RCC_OscConfig+0xf78>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e027      	b.n	8002284 <HAL_RCC_OscConfig+0xe7c>
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800223c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	fa93 f2a3 	rbit	r2, r3
 8002250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002254:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fa93 f2a3 	rbit	r2, r3
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_OscConfig+0xf78>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002288:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800228c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002290:	6011      	str	r1, [r2, #0]
 8002292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002296:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	fa92 f1a2 	rbit	r1, r2
 80022a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022a8:	6011      	str	r1, [r2, #0]
  return result;
 80022aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	f042 0220 	orr.w	r2, r2, #32
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f002 021f 	and.w	r2, r2, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d082      	beq.n	80021d6 <HAL_RCC_OscConfig+0xdce>
 80022d0:	e0cf      	b.n	8002472 <HAL_RCC_OscConfig+0x106a>
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022f6:	601a      	str	r2, [r3, #0]
  return result;
 80022f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002300:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800230c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	461a      	mov	r2, r3
 8002314:	2300      	movs	r3, #0
 8002316:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fa76 	bl	8000808 <HAL_GetTick>
 800231c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	e009      	b.n	8002336 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002322:	f7fe fa71 	bl	8000808 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e09e      	b.n	8002474 <HAL_RCC_OscConfig+0x106c>
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800233e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800235a:	601a      	str	r2, [r3, #0]
  return result;
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002364:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d104      	bne.n	8002384 <HAL_RCC_OscConfig+0xf7c>
 800237a:	4b01      	ldr	r3, [pc, #4]	; (8002380 <HAL_RCC_OscConfig+0xf78>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e029      	b.n	80023d4 <HAL_RCC_OscConfig+0xfcc>
 8002380:	40021000 	.word	0x40021000
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800238c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f2a3 	rbit	r2, r3
 80023a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_RCC_OscConfig+0x1078>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023e0:	6011      	str	r1, [r2, #0]
 80023e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	fa92 f1a2 	rbit	r1, r2
 80023f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023f8:	6011      	str	r1, [r2, #0]
  return result;
 80023fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d180      	bne.n	8002322 <HAL_RCC_OscConfig+0xf1a>
 8002420:	e027      	b.n	8002472 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e01e      	b.n	8002474 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_RCC_OscConfig+0x1078>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800243e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002442:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	429a      	cmp	r2, r3
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002456:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800245a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000

08002484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b09e      	sub	sp, #120	; 0x78
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e162      	b.n	8002762 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800249c:	4b90      	ldr	r3, [pc, #576]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d910      	bls.n	80024cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b8d      	ldr	r3, [pc, #564]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	498b      	ldr	r1, [pc, #556]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b89      	ldr	r3, [pc, #548]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e14a      	b.n	8002762 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	497f      	ldr	r1, [pc, #508]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80dc 	beq.w	80026b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d13c      	bne.n	800257a <HAL_RCC_ClockConfig+0xf6>
 8002500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002504:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800250e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <HAL_RCC_ClockConfig+0xa6>
 8002524:	4b6f      	ldr	r3, [pc, #444]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	e00f      	b.n	800254a <HAL_RCC_ClockConfig+0xc6>
 800252a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	667b      	str	r3, [r7, #100]	; 0x64
 8002538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253c:	663b      	str	r3, [r7, #96]	; 0x60
 800253e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002546:	4b67      	ldr	r3, [pc, #412]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800254e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002552:	fa92 f2a2 	rbit	r2, r2
 8002556:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800255a:	fab2 f282 	clz	r2, r2
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f042 0220 	orr.w	r2, r2, #32
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f002 021f 	and.w	r2, r2, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d17b      	bne.n	800266e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0f3      	b.n	8002762 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d13c      	bne.n	80025fc <HAL_RCC_ClockConfig+0x178>
 8002582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002586:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d102      	bne.n	80025ac <HAL_RCC_ClockConfig+0x128>
 80025a6:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_ClockConfig+0x148>
 80025ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025be:	643b      	str	r3, [r7, #64]	; 0x40
 80025c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c8:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80025d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025d4:	fa92 f2a2 	rbit	r2, r2
 80025d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025dc:	fab2 f282 	clz	r2, r2
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f042 0220 	orr.w	r2, r2, #32
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f002 021f 	and.w	r2, r2, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f202 	lsl.w	r2, r1, r2
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d13a      	bne.n	800266e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0b2      	b.n	8002762 <HAL_RCC_ClockConfig+0x2de>
 80025fc:	2302      	movs	r3, #2
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d102      	bne.n	8002624 <HAL_RCC_ClockConfig+0x1a0>
 800261e:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	e00d      	b.n	8002640 <HAL_RCC_ClockConfig+0x1bc>
 8002624:	2302      	movs	r3, #2
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
 8002630:	2302      	movs	r3, #2
 8002632:	623b      	str	r3, [r7, #32]
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	2202      	movs	r2, #2
 8002642:	61ba      	str	r2, [r7, #24]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	fa92 f2a2 	rbit	r2, r2
 800264a:	617a      	str	r2, [r7, #20]
  return result;
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	fab2 f282 	clz	r2, r2
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f042 0220 	orr.w	r2, r2, #32
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f002 021f 	and.w	r2, r2, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e079      	b.n	8002762 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f023 0203 	bic.w	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	491a      	ldr	r1, [pc, #104]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002680:	f7fe f8c2 	bl	8000808 <HAL_GetTick>
 8002684:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	e00a      	b.n	800269e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002688:	f7fe f8be 	bl	8000808 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e061      	b.n	8002762 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 020c 	and.w	r2, r3, #12
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1eb      	bne.n	8002688 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d214      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	4906      	ldr	r1, [pc, #24]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e040      	b.n	8002762 <HAL_RCC_ClockConfig+0x2de>
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_RCC_ClockConfig+0x2e8>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	491a      	ldr	r1, [pc, #104]	; (800276c <HAL_RCC_ClockConfig+0x2e8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_RCC_ClockConfig+0x2e8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4912      	ldr	r1, [pc, #72]	; (800276c <HAL_RCC_ClockConfig+0x2e8>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002726:	f000 f829 	bl	800277c <HAL_RCC_GetSysClockFreq>
 800272a:	4601      	mov	r1, r0
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_RCC_ClockConfig+0x2e8>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002734:	22f0      	movs	r2, #240	; 0xf0
 8002736:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	fa92 f2a2 	rbit	r2, r2
 800273e:	60fa      	str	r2, [r7, #12]
  return result;
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	fab2 f282 	clz	r2, r2
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	40d3      	lsrs	r3, r2
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x2ec>)
 800274c:	5cd3      	ldrb	r3, [r2, r3]
 800274e:	fa21 f303 	lsr.w	r3, r1, r3
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_RCC_ClockConfig+0x2f0>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_RCC_ClockConfig+0x2f4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe f810 	bl	8000780 <HAL_InitTick>
  
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3778      	adds	r7, #120	; 0x78
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	080032f8 	.word	0x080032f8
 8002774:	20000000 	.word	0x20000000
 8002778:	20000004 	.word	0x20000004

0800277c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	b08b      	sub	sp, #44	; 0x2c
 8002780:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d002      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x30>
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x36>
 80027aa:	e03c      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027ae:	623b      	str	r3, [r7, #32]
      break;
 80027b0:	e03c      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	fa92 f2a2 	rbit	r2, r2
 80027c4:	607a      	str	r2, [r7, #4]
  return result;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	fab2 f282 	clz	r2, r2
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	40d3      	lsrs	r3, r2
 80027d0:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	220f      	movs	r2, #15
 80027e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	fa92 f2a2 	rbit	r2, r2
 80027e8:	60fa      	str	r2, [r7, #12]
  return result;
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	40d3      	lsrs	r3, r2
 80027f4:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	fbb2 f2f3 	udiv	r2, r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
 8002814:	e004      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_RCC_GetSysClockFreq+0xd0>)
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	623b      	str	r3, [r7, #32]
      break;
 8002824:	e002      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002828:	623b      	str	r3, [r7, #32]
      break;
 800282a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282c:	6a3b      	ldr	r3, [r7, #32]
}
 800282e:	4618      	mov	r0, r3
 8002830:	372c      	adds	r7, #44	; 0x2c
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	007a1200 	.word	0x007a1200
 8002844:	08003310 	.word	0x08003310
 8002848:	08003320 	.word	0x08003320
 800284c:	003d0900 	.word	0x003d0900

08002850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_RCC_GetHCLKFreq+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000000 	.word	0x20000000

08002868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800286e:	f7ff ffef 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002872:	4601      	mov	r1, r0
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800287c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002880:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	fa92 f2a2 	rbit	r2, r2
 8002888:	603a      	str	r2, [r7, #0]
  return result;
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	fab2 f282 	clz	r2, r2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	40d3      	lsrs	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08003308 	.word	0x08003308

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028b2:	f7ff ffcd 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 80028b6:	4601      	mov	r1, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	603a      	str	r2, [r7, #0]
  return result;
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	40d3      	lsrs	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08003308 	.word	0x08003308

080028f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e095      	b.n	8002a2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	2b00      	cmp	r3, #0
 8002908:	d108      	bne.n	800291c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002912:	d009      	beq.n	8002928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
 800291a:	e005      	b.n	8002928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fd fe10 	bl	8000568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002968:	d902      	bls.n	8002970 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e002      	b.n	8002976 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002974:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800297e:	d007      	beq.n	8002990 <HAL_SPI_Init+0xa0>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002988:	d002      	beq.n	8002990 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	ea42 0103 	orr.w	r1, r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	0c1b      	lsrs	r3, r3, #16
 80029ec:	f003 0204 	and.w	r2, r3, #4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a0c:	ea42 0103 	orr.w	r1, r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e040      	b.n	8002aca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fd fdc7 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2224      	movs	r2, #36	; 0x24
 8002a62:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8b7 	bl	8002be8 <UART_SetConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e022      	b.n	8002aca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f9e1 	bl	8002e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa68 	bl	8002f98 <UART_CheckIdleState>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b08a      	sub	sp, #40	; 0x28
 8002ad6:	af02      	add	r7, sp, #8
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d178      	bne.n	8002bdc <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_UART_Transmit+0x24>
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e071      	b.n	8002bde <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2221      	movs	r2, #33	; 0x21
 8002b06:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b08:	f7fd fe7e 	bl	8000808 <HAL_GetTick>
 8002b0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	88fa      	ldrh	r2, [r7, #6]
 8002b12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b26:	d108      	bne.n	8002b3a <HAL_UART_Transmit+0x68>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e003      	b.n	8002b42 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b42:	e030      	b.n	8002ba6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 faca 	bl	80030e8 <UART_WaitOnFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e03c      	b.n	8002bde <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b76:	b292      	uxth	r2, r2
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e008      	b.n	8002b94 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3301      	adds	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1c8      	bne.n	8002b44 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2140      	movs	r1, #64	; 0x40
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fa93 	bl	80030e8 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e005      	b.n	8002bde <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b8a      	ldr	r3, [pc, #552]	; (8002e3c <UART_SetConfig+0x254>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a78      	ldr	r2, [pc, #480]	; (8002e40 <UART_SetConfig+0x258>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d120      	bne.n	8002ca6 <UART_SetConfig+0xbe>
 8002c64:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <UART_SetConfig+0x25c>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d817      	bhi.n	8002ca0 <UART_SetConfig+0xb8>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <UART_SetConfig+0x90>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002c95 	.word	0x08002c95
 8002c80:	08002c9b 	.word	0x08002c9b
 8002c84:	08002c8f 	.word	0x08002c8f
 8002c88:	2300      	movs	r3, #0
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	e01d      	b.n	8002cca <UART_SetConfig+0xe2>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	77fb      	strb	r3, [r7, #31]
 8002c92:	e01a      	b.n	8002cca <UART_SetConfig+0xe2>
 8002c94:	2304      	movs	r3, #4
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e017      	b.n	8002cca <UART_SetConfig+0xe2>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e014      	b.n	8002cca <UART_SetConfig+0xe2>
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e011      	b.n	8002cca <UART_SetConfig+0xe2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a67      	ldr	r2, [pc, #412]	; (8002e48 <UART_SetConfig+0x260>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d102      	bne.n	8002cb6 <UART_SetConfig+0xce>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e009      	b.n	8002cca <UART_SetConfig+0xe2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a64      	ldr	r2, [pc, #400]	; (8002e4c <UART_SetConfig+0x264>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d102      	bne.n	8002cc6 <UART_SetConfig+0xde>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e001      	b.n	8002cca <UART_SetConfig+0xe2>
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd2:	d15a      	bne.n	8002d8a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002cd4:	7ffb      	ldrb	r3, [r7, #31]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d827      	bhi.n	8002d2a <UART_SetConfig+0x142>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <UART_SetConfig+0xf8>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002d05 	.word	0x08002d05
 8002ce4:	08002d0d 	.word	0x08002d0d
 8002ce8:	08002d15 	.word	0x08002d15
 8002cec:	08002d2b 	.word	0x08002d2b
 8002cf0:	08002d1b 	.word	0x08002d1b
 8002cf4:	08002d2b 	.word	0x08002d2b
 8002cf8:	08002d2b 	.word	0x08002d2b
 8002cfc:	08002d2b 	.word	0x08002d2b
 8002d00:	08002d23 	.word	0x08002d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d04:	f7ff fdb0 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8002d08:	61b8      	str	r0, [r7, #24]
        break;
 8002d0a:	e013      	b.n	8002d34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d0c:	f7ff fdce 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8002d10:	61b8      	str	r0, [r7, #24]
        break;
 8002d12:	e00f      	b.n	8002d34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d14:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <UART_SetConfig+0x268>)
 8002d16:	61bb      	str	r3, [r7, #24]
        break;
 8002d18:	e00c      	b.n	8002d34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1a:	f7ff fd2f 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8002d1e:	61b8      	str	r0, [r7, #24]
        break;
 8002d20:	e008      	b.n	8002d34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d26:	61bb      	str	r3, [r7, #24]
        break;
 8002d28:	e004      	b.n	8002d34 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	77bb      	strb	r3, [r7, #30]
        break;
 8002d32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d074      	beq.n	8002e24 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	005a      	lsls	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	441a      	add	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	d916      	bls.n	8002d84 <UART_SetConfig+0x19c>
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d212      	bcs.n	8002d84 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f023 030f 	bic.w	r3, r3, #15
 8002d66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	89fa      	ldrh	r2, [r7, #14]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	e04f      	b.n	8002e24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	77bb      	strb	r3, [r7, #30]
 8002d88:	e04c      	b.n	8002e24 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d828      	bhi.n	8002de2 <UART_SetConfig+0x1fa>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <UART_SetConfig+0x1b0>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dbd 	.word	0x08002dbd
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	08002dcd 	.word	0x08002dcd
 8002da4:	08002de3 	.word	0x08002de3
 8002da8:	08002dd3 	.word	0x08002dd3
 8002dac:	08002de3 	.word	0x08002de3
 8002db0:	08002de3 	.word	0x08002de3
 8002db4:	08002de3 	.word	0x08002de3
 8002db8:	08002ddb 	.word	0x08002ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dbc:	f7ff fd54 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8002dc0:	61b8      	str	r0, [r7, #24]
        break;
 8002dc2:	e013      	b.n	8002dec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc4:	f7ff fd72 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8002dc8:	61b8      	str	r0, [r7, #24]
        break;
 8002dca:	e00f      	b.n	8002dec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <UART_SetConfig+0x268>)
 8002dce:	61bb      	str	r3, [r7, #24]
        break;
 8002dd0:	e00c      	b.n	8002dec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd2:	f7ff fcd3 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8002dd6:	61b8      	str	r0, [r7, #24]
        break;
 8002dd8:	e008      	b.n	8002dec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dde:	61bb      	str	r3, [r7, #24]
        break;
 8002de0:	e004      	b.n	8002dec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	77bb      	strb	r3, [r7, #30]
        break;
 8002dea:	bf00      	nop
    }

    if (pclk != 0U)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d018      	beq.n	8002e24 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	085a      	lsrs	r2, r3, #1
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	441a      	add	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d909      	bls.n	8002e20 <UART_SetConfig+0x238>
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e12:	d205      	bcs.n	8002e20 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e001      	b.n	8002e24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e30:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	efff69f3 	.word	0xefff69f3
 8002e40:	40013800 	.word	0x40013800
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40004400 	.word	0x40004400
 8002e4c:	40004800 	.word	0x40004800
 8002e50:	007a1200 	.word	0x007a1200

08002e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01a      	beq.n	8002f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f52:	d10a      	bne.n	8002f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b098      	sub	sp, #96	; 0x60
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fa8:	f7fd fc2e 	bl	8000808 <HAL_GetTick>
 8002fac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d12e      	bne.n	800301a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f88c 	bl	80030e8 <UART_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d021      	beq.n	800301a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fea:	653b      	str	r3, [r7, #80]	; 0x50
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e6      	bne.n	8002fd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e062      	b.n	80030e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d149      	bne.n	80030bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003030:	2200      	movs	r2, #0
 8003032:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f856 	bl	80030e8 <UART_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03c      	beq.n	80030bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	623b      	str	r3, [r7, #32]
   return(result);
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
 8003062:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e6      	bne.n	8003042 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3308      	adds	r3, #8
 800307a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	60fb      	str	r3, [r7, #12]
   return(result);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	64bb      	str	r3, [r7, #72]	; 0x48
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3308      	adds	r3, #8
 8003092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003094:	61fa      	str	r2, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	617b      	str	r3, [r7, #20]
   return(result);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e011      	b.n	80030e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3758      	adds	r7, #88	; 0x58
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f8:	e049      	b.n	800318e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d045      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7fd fb81 	bl	8000808 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <UART_WaitOnFlagUntilTimeout+0x30>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e048      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d031      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b08      	cmp	r3, #8
 8003136:	d110      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2208      	movs	r2, #8
 800313e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f838 	bl	80031b6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2208      	movs	r2, #8
 800314a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e029      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003168:	d111      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f81e 	bl	80031b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00f      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d0a6      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b095      	sub	sp, #84	; 0x54
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
 80031de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e6      	bne.n	80031be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3308      	adds	r3, #8
 80031f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	64bb      	str	r3, [r7, #72]	; 0x48
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3308      	adds	r3, #8
 800320e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e5      	bne.n	80031f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003228:	2b01      	cmp	r3, #1
 800322a:	d118      	bne.n	800325e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	60bb      	str	r3, [r7, #8]
   return(result);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f023 0310 	bic.w	r3, r3, #16
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6979      	ldr	r1, [r7, #20]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	613b      	str	r3, [r7, #16]
   return(result);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e6      	bne.n	800322c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003272:	bf00      	nop
 8003274:	3754      	adds	r7, #84	; 0x54
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <memset>:
 800327e:	4402      	add	r2, r0
 8003280:	4603      	mov	r3, r0
 8003282:	4293      	cmp	r3, r2
 8003284:	d100      	bne.n	8003288 <memset+0xa>
 8003286:	4770      	bx	lr
 8003288:	f803 1b01 	strb.w	r1, [r3], #1
 800328c:	e7f9      	b.n	8003282 <memset+0x4>
	...

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	; (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	; (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 f818 	bl	80032d8 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003330 	.word	0x08003330
 80032cc:	08003330 	.word	0x08003330
 80032d0:	08003330 	.word	0x08003330
 80032d4:	08003334 	.word	0x08003334

080032d8 <_init>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr

080032e4 <_fini>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr
