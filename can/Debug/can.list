
can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b88  08004b88  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b88  08004b88  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b88  08004b88  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000002b8  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bc90  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c85  00000000  00000000  0002bd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008a8  00000000  00000000  0002d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000069d  00000000  00000000  0002e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ae38  00000000  00000000  0002e92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b853  00000000  00000000  00049765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009d4ae  00000000  00000000  00054fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000279c  00000000  00000000  000f2468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000f4c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004aac 	.word	0x08004aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004aac 	.word	0x08004aac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;
uint8_t cnt;
uint8_t uartTXData[50];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	//受信メッセージの取得
	if((HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK))
 8000288:	4b21      	ldr	r3, [pc, #132]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800028a:	4a22      	ldr	r2, [pc, #136]	; (8000314 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800028c:	2100      	movs	r1, #0
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f000 fe05 	bl	8000e9e <HAL_CAN_GetRxMessage>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 800029a:	f000 f9a3 	bl	80005e4 <Error_Handler>
	}
    // IDを表示
    int len = sprintf((char *)uartTXData, "ID: 0x%lX Data: ", RxHeader.StdId);
 800029e:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	461a      	mov	r2, r3
 80002a4:	491c      	ldr	r1, [pc, #112]	; (8000318 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80002a6:	481d      	ldr	r0, [pc, #116]	; (800031c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80002a8:	f003 ff5c 	bl	8004164 <siprintf>
 80002ac:	60f8      	str	r0, [r7, #12]

    // DLC（Data Length Code）の長さだけデータを取り出し、そのままASCII文字として扱う
    for (int i = 0; i < RxHeader.DLC; i++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	e011      	b.n	80002d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
    {
        len += sprintf((char *)uartTXData + len, "%c", RxData[i]);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4a19      	ldr	r2, [pc, #100]	; (800031c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80002b8:	1898      	adds	r0, r3, r2
 80002ba:	4a15      	ldr	r2, [pc, #84]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	4413      	add	r3, r2
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	4916      	ldr	r1, [pc, #88]	; (8000320 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80002c6:	f003 ff4d 	bl	8004164 <siprintf>
 80002ca:	4602      	mov	r2, r0
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	4413      	add	r3, r2
 80002d0:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < RxHeader.DLC; i++)
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	3301      	adds	r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80002da:	691a      	ldr	r2, [r3, #16]
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d8e8      	bhi.n	80002b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
    }

    // 改行を追加
    sprintf((char *)uartTXData + len, "\r\n");
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80002e6:	4413      	add	r3, r2
 80002e8:	490e      	ldr	r1, [pc, #56]	; (8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 ff3a 	bl	8004164 <siprintf>

	HAL_UART_Transmit(&huart2, uartTXData, strlen((char *)uartTXData), HAL_MAX_DELAY);
 80002f0:	480a      	ldr	r0, [pc, #40]	; (800031c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80002f2:	f7ff ff6d 	bl	80001d0 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295
 80002fe:	4907      	ldr	r1, [pc, #28]	; (800031c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000302:	f003 f809 	bl	8003318 <HAL_UART_Transmit>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000188 	.word	0x20000188
 8000314:	200000a0 	.word	0x200000a0
 8000318:	08004ac4 	.word	0x08004ac4
 800031c:	20000190 	.word	0x20000190
 8000320:	08004ad8 	.word	0x08004ad8
 8000324:	08004adc 	.word	0x08004adc
 8000328:	200000bc 	.word	0x200000bc

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b5b0      	push	{r4, r5, r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000332:	f000 fb21 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000336:	f000 f851 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033a:	f000 f92f 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 800033e:	f000 f90f 	bl	8000560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000342:	f000 f8dd 	bl	8000500 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000346:	f000 f88b 	bl	8000460 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 800034a:	481f      	ldr	r0, [pc, #124]	; (80003c8 <main+0x9c>)
 800034c:	f000 fd63 	bl	8000e16 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000350:	2102      	movs	r1, #2
 8000352:	481d      	ldr	r0, [pc, #116]	; (80003c8 <main+0x9c>)
 8000354:	f000 fec5 	bl	80010e2 <HAL_CAN_ActivateNotification>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d011      	beq.n	8000382 <main+0x56>
   {
	 uint8_t msg[] = "CAN start failed!";
 800035e:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <main+0xa0>)
 8000360:	f107 041c 	add.w	r4, r7, #28
 8000364:	461d      	mov	r5, r3
 8000366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	8023      	strh	r3, [r4, #0]
	 HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 800036e:	f107 011c 	add.w	r1, r7, #28
 8000372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000376:	2212      	movs	r2, #18
 8000378:	4815      	ldr	r0, [pc, #84]	; (80003d0 <main+0xa4>)
 800037a:	f002 ffcd 	bl	8003318 <HAL_UART_Transmit>
     Error_Handler();
 800037e:	f000 f931 	bl	80005e4 <Error_Handler>
   }

  uint8_t msg2[] ="CAN started!\n";
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <main+0xa8>)
 8000384:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800038a:	c407      	stmia	r4!, {r0, r1, r2}
 800038c:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, msg2, sizeof(msg2), 1000);
 800038e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000396:	220e      	movs	r2, #14
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <main+0xa4>)
 800039a:	f002 ffbd 	bl	8003318 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t msg3[] = "waiting CAN message...\n";
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <main+0xac>)
 80003a0:	1d3c      	adds	r4, r7, #4
 80003a2:	461d      	mov	r5, r3
 80003a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003ac:	e884 0003 	stmia.w	r4, {r0, r1}
	  HAL_UART_Transmit(&huart2, msg3, sizeof(msg3), 1000);
 80003b0:	1d39      	adds	r1, r7, #4
 80003b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b6:	2218      	movs	r2, #24
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <main+0xa4>)
 80003ba:	f002 ffad 	bl	8003318 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80003be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c2:	f000 fb3f 	bl	8000a44 <HAL_Delay>
  {
 80003c6:	e7ea      	b.n	800039e <main+0x72>
 80003c8:	20000078 	.word	0x20000078
 80003cc:	08004ae0 	.word	0x08004ae0
 80003d0:	200000bc 	.word	0x200000bc
 80003d4:	08004af4 	.word	0x08004af4
 80003d8:	08004b04 	.word	0x08004b04

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b090      	sub	sp, #64	; 0x40
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	2228      	movs	r2, #40	; 0x28
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 feda 	bl	80041a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fe:	2302      	movs	r3, #2
 8000400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000402:	2301      	movs	r3, #1
 8000404:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000406:	2310      	movs	r3, #16
 8000408:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040a:	2302      	movs	r3, #2
 800040c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800040e:	2300      	movs	r3, #0
 8000410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000412:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000416:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0318 	add.w	r3, r7, #24
 800041c:	4618      	mov	r0, r3
 800041e:	f001 fcb9 	bl	8001d94 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000428:	f000 f8dc 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2302      	movs	r3, #2
 8000432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2102      	movs	r1, #2
 8000446:	4618      	mov	r0, r3
 8000448:	f002 fce2 	bl	8002e10 <HAL_RCC_ClockConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000452:	f000 f8c7 	bl	80005e4 <Error_Handler>
  }
}
 8000456:	bf00      	nop
 8000458:	3740      	adds	r7, #64	; 0x40
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <MX_CAN_Init+0x98>)
 8000468:	4a24      	ldr	r2, [pc, #144]	; (80004fc <MX_CAN_Init+0x9c>)
 800046a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <MX_CAN_Init+0x98>)
 800046e:	2203      	movs	r2, #3
 8000470:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <MX_CAN_Init+0x98>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000478:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <MX_CAN_Init+0x98>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <MX_CAN_Init+0x98>)
 8000480:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000484:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <MX_CAN_Init+0x98>)
 8000488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800048c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MX_CAN_Init+0x98>)
 8000490:	2200      	movs	r2, #0
 8000492:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_CAN_Init+0x98>)
 8000496:	2200      	movs	r2, #0
 8000498:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_CAN_Init+0x98>)
 800049c:	2200      	movs	r2, #0
 800049e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_CAN_Init+0x98>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_CAN_Init+0x98>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_CAN_Init+0x98>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004b2:	4811      	ldr	r0, [pc, #68]	; (80004f8 <MX_CAN_Init+0x98>)
 80004b4:	f000 faea 	bl	8000a8c <HAL_CAN_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80004be:	f000 f891 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  // CANフィルタ設定
  CAN_FilterTypeDef filterConfig;
  filterConfig.FilterBank = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x0000;
 80004ce:	2300      	movs	r3, #0
 80004d0:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 80004e2:	2301      	movs	r3, #1
 80004e4:	623b      	str	r3, [r7, #32]
  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80004e6:	463b      	mov	r3, r7
 80004e8:	4619      	mov	r1, r3
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <MX_CAN_Init+0x98>)
 80004ec:	f000 fbc9 	bl	8000c82 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	3728      	adds	r7, #40	; 0x28
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000078 	.word	0x20000078
 80004fc:	40006400 	.word	0x40006400

08000500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000506:	4a15      	ldr	r2, [pc, #84]	; (800055c <MX_USART2_UART_Init+0x5c>)
 8000508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_USART2_UART_Init+0x58>)
 800050c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_USART2_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000526:	220c      	movs	r2, #12
 8000528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_USART2_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_USART2_UART_Init+0x58>)
 800053e:	2200      	movs	r2, #0
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_USART2_UART_Init+0x58>)
 8000544:	f002 fe9a 	bl	800327c <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800054e:	f000 f849 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000bc 	.word	0x200000bc
 800055c:	40004400 	.word	0x40004400

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_DMA_Init+0x38>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <MX_DMA_Init+0x38>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_DMA_Init+0x38>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2011      	movs	r0, #17
 8000584:	f001 f8dd 	bl	8001742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000588:	2011      	movs	r0, #17
 800058a:	f001 f8f6 	bl	800177a <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_GPIO_Init+0x44>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <MX_GPIO_Init+0x44>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_GPIO_Init+0x44>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_GPIO_Init+0x44>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <MX_GPIO_Init+0x44>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_GPIO_Init+0x44>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>
	...

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_MspInit+0x44>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_MspInit+0x44>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_MspInit+0x44>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_MspInit+0x44>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_MspInit+0x44>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a24      	ldr	r2, [pc, #144]	; (80006e8 <HAL_CAN_MspInit+0xb0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d141      	bne.n	80006de <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <HAL_CAN_MspInit+0xb4>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a23      	ldr	r2, [pc, #140]	; (80006ec <HAL_CAN_MspInit+0xb4>)
 8000660:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <HAL_CAN_MspInit+0xb4>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <HAL_CAN_MspInit+0xb4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <HAL_CAN_MspInit+0xb4>)
 8000678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_CAN_MspInit+0xb4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800068a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800068e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800069c:	2309      	movs	r3, #9
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 fa01 	bl	8001ab0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2013      	movs	r0, #19
 80006b4:	f001 f845 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80006b8:	2013      	movs	r0, #19
 80006ba:	f001 f85e 	bl	800177a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2014      	movs	r0, #20
 80006c4:	f001 f83d 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80006c8:	2014      	movs	r0, #20
 80006ca:	f001 f856 	bl	800177a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2015      	movs	r0, #21
 80006d4:	f001 f835 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80006d8:	2015      	movs	r0, #21
 80006da:	f001 f84e 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40006400 	.word	0x40006400
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <HAL_UART_MspInit+0xdc>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d157      	bne.n	80007c2 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <HAL_UART_MspInit+0xe0>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <HAL_UART_MspInit+0xe0>)
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <HAL_UART_MspInit+0xe0>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <HAL_UART_MspInit+0xe0>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a28      	ldr	r2, [pc, #160]	; (80007d0 <HAL_UART_MspInit+0xe0>)
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <HAL_UART_MspInit+0xe0>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000742:	f248 0304 	movw	r3, #32772	; 0x8004
 8000746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000754:	2307      	movs	r3, #7
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f001 f9a5 	bl	8001ab0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <HAL_UART_MspInit+0xe8>)
 800076a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 800076e:	2210      	movs	r2, #16
 8000770:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000796:	480f      	ldr	r0, [pc, #60]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 8000798:	f001 f809 	bl	80017ae <HAL_DMA_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80007a2:	f7ff ff1f 	bl	80005e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 80007aa:	671a      	str	r2, [r3, #112]	; 0x70
 80007ac:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <HAL_UART_MspInit+0xe4>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2026      	movs	r0, #38	; 0x26
 80007b8:	f000 ffc3 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007bc:	2026      	movs	r0, #38	; 0x26
 80007be:	f000 ffdc 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40004400 	.word	0x40004400
 80007d0:	40021000 	.word	0x40021000
 80007d4:	20000144 	.word	0x20000144
 80007d8:	40020080 	.word	0x40020080

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f8ec 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <DMA1_Channel7_IRQHandler+0x10>)
 8000836:	f001 f878 	bl	800192a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000144 	.word	0x20000144

08000844 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <CAN_TX_IRQHandler+0x10>)
 800084a:	f000 fc70 	bl	800112e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000078 	.word	0x20000078

08000858 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <CAN_RX0_IRQHandler+0x10>)
 800085e:	f000 fc66 	bl	800112e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000078 	.word	0x20000078

0800086c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <CAN_RX1_IRQHandler+0x10>)
 8000872:	f000 fc5c 	bl	800112e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000078 	.word	0x20000078

08000880 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <USART2_IRQHandler+0x10>)
 8000886:	f002 fdd1 	bl	800342c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000bc 	.word	0x200000bc

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f003 fc76 	bl	80041b4 <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20003000 	.word	0x20003000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	200001c4 	.word	0x200001c4
 80008fc:	20000318 	.word	0x20000318

08000900 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800095c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000928:	f7ff ffea 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000952:	f003 fc35 	bl	80041c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000956:	f7ff fce9 	bl	800032c <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800095c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000968:	08004b90 	.word	0x08004b90
  ldr r2, =_sbss
 800096c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000970:	20000314 	.word	0x20000314

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 fecf 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fe2c 	bl	80005f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fee7 	bl	8001796 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 feaf 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200001c8 	.word	0x200001c8

08000a2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200001c8 	.word	0x200001c8

08000a44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffde 	bl	8000a2c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e0ed      	b.n	8000c7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff fdc4 	bl	8000638 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f042 0201 	orr.w	r2, r2, #1
 8000abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac0:	f7ff ffb4 	bl	8000a2c <HAL_GetTick>
 8000ac4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ac6:	e012      	b.n	8000aee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ac8:	f7ff ffb0 	bl	8000a2c <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	2b0a      	cmp	r3, #10
 8000ad4:	d90b      	bls.n	8000aee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e0c5      	b.n	8000c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0e5      	beq.n	8000ac8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0202 	bic.w	r2, r2, #2
 8000b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b0c:	f7ff ff8e 	bl	8000a2c <HAL_GetTick>
 8000b10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b12:	e012      	b.n	8000b3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b14:	f7ff ff8a 	bl	8000a2c <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b0a      	cmp	r3, #10
 8000b20:	d90b      	bls.n	8000b3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2205      	movs	r2, #5
 8000b32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e09f      	b.n	8000c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1e5      	bne.n	8000b14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7e1b      	ldrb	r3, [r3, #24]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d108      	bne.n	8000b62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e007      	b.n	8000b72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7e5b      	ldrb	r3, [r3, #25]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d108      	bne.n	8000b8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	e007      	b.n	8000b9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7e9b      	ldrb	r3, [r3, #26]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d108      	bne.n	8000bb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 0220 	orr.w	r2, r2, #32
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	e007      	b.n	8000bc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0220 	bic.w	r2, r2, #32
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7edb      	ldrb	r3, [r3, #27]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d108      	bne.n	8000be0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 0210 	bic.w	r2, r2, #16
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e007      	b.n	8000bf0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0210 	orr.w	r2, r2, #16
 8000bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7f1b      	ldrb	r3, [r3, #28]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d108      	bne.n	8000c0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0208 	orr.w	r2, r2, #8
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0208 	bic.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7f5b      	ldrb	r3, [r3, #29]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f042 0204 	orr.w	r2, r2, #4
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0204 	bic.w	r2, r2, #4
 8000c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	ea42 0103 	orr.w	r1, r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	1e5a      	subs	r2, r3, #1
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b087      	sub	sp, #28
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c98:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c9a:	7cfb      	ldrb	r3, [r7, #19]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d003      	beq.n	8000ca8 <HAL_CAN_ConfigFilter+0x26>
 8000ca0:	7cfb      	ldrb	r3, [r7, #19]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	f040 80aa 	bne.w	8000dfc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cae:	f043 0201 	orr.w	r2, r3, #1
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	f003 031f 	and.w	r3, r3, #31
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d123      	bne.n	8000d2a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	401a      	ands	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d04:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3248      	adds	r2, #72	; 0x48
 8000d0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d20:	6979      	ldr	r1, [r7, #20]
 8000d22:	3348      	adds	r3, #72	; 0x48
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	440b      	add	r3, r1
 8000d28:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d122      	bne.n	8000d78 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d52:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3248      	adds	r2, #72	; 0x48
 8000d58:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d6c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d6e:	6979      	ldr	r1, [r7, #20]
 8000d70:	3348      	adds	r3, #72	; 0x48
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	440b      	add	r3, r1
 8000d76:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d109      	bne.n	8000d94 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d92:	e007      	b.n	8000da4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d107      	bne.n	8000de8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	431a      	orrs	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dee:	f023 0201 	bic.w	r2, r3, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e006      	b.n	8000e0a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
  }
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d12e      	bne.n	8000e88 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e42:	f7ff fdf3 	bl	8000a2c <HAL_GetTick>
 8000e46:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e48:	e012      	b.n	8000e70 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e4a:	f7ff fdef 	bl	8000a2c <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b0a      	cmp	r3, #10
 8000e56:	d90b      	bls.n	8000e70 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2205      	movs	r2, #5
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e012      	b.n	8000e96 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1e5      	bne.n	8000e4a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e006      	b.n	8000e96 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
  }
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b087      	sub	sp, #28
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d003      	beq.n	8000ec2 <HAL_CAN_GetRxMessage+0x24>
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	f040 8103 	bne.w	80010c8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10e      	bne.n	8000ee6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d116      	bne.n	8000f04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0f7      	b.n	80010d6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d107      	bne.n	8000f04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e0e8      	b.n	80010d6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	331b      	adds	r3, #27
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0204 	and.w	r2, r3, #4
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	331b      	adds	r3, #27
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	4413      	add	r3, r2
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0d5b      	lsrs	r3, r3, #21
 8000f32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e00b      	b.n	8000f54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	331b      	adds	r3, #27
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4413      	add	r3, r2
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	331b      	adds	r3, #27
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	4413      	add	r3, r2
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0202 	and.w	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	331b      	adds	r3, #27
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	4413      	add	r3, r2
 8000f76:	3304      	adds	r3, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2208      	movs	r2, #8
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	e00b      	b.n	8000fa2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	331b      	adds	r3, #27
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	4413      	add	r3, r2
 8000f96:	3304      	adds	r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 020f 	and.w	r2, r3, #15
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	331b      	adds	r3, #27
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	4413      	add	r3, r2
 8000fae:	3304      	adds	r3, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	331b      	adds	r3, #27
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4413      	add	r3, r2
 8000fdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0a1a      	lsrs	r2, r3, #8
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	4413      	add	r3, r2
 800100c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0c1a      	lsrs	r2, r3, #16
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	3302      	adds	r3, #2
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	4413      	add	r3, r2
 8001026:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0e1a      	lsrs	r2, r3, #24
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3303      	adds	r3, #3
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3304      	adds	r3, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	4413      	add	r3, r2
 8001058:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0a1a      	lsrs	r2, r3, #8
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3305      	adds	r3, #5
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4413      	add	r3, r2
 8001072:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0c1a      	lsrs	r2, r3, #16
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3306      	adds	r3, #6
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4413      	add	r3, r2
 800108c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0e1a      	lsrs	r2, r3, #24
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	3307      	adds	r3, #7
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d108      	bne.n	80010b4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0220 	orr.w	r2, r2, #32
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	e007      	b.n	80010c4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0220 	orr.w	r2, r2, #32
 80010c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e006      	b.n	80010d6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
  }
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d002      	beq.n	8001100 <HAL_CAN_ActivateNotification+0x1e>
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d109      	bne.n	8001114 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6959      	ldr	r1, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	e006      	b.n	8001122 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
  }
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b08a      	sub	sp, #40	; 0x28
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d07c      	beq.n	800126e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d023      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f983 	bl	800149c <HAL_CAN_TxMailbox0CompleteCallback>
 8001196:	e016      	b.n	80011c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
 80011aa:	e00c      	b.n	80011c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
 80011be:	e002      	b.n	80011c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f989 	bl	80014d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d024      	beq.n	800121a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f963 	bl	80014b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80011ea:	e016      	b.n	800121a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
 80011fe:	e00c      	b.n	800121a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
 8001212:	e002      	b.n	800121a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f969 	bl	80014ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d024      	beq.n	800126e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f943 	bl	80014c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800123e:	e016      	b.n	800126e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
 8001252:	e00c      	b.n	800126e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
 8001266:	e002      	b.n	800126e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f949 	bl	8001500 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00c      	beq.n	8001292 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2208      	movs	r2, #8
 80012ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f930 	bl	8001514 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7fe ffd7 	bl	8000280 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00c      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2210      	movs	r2, #16
 80012f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2208      	movs	r2, #8
 8001310:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f912 	bl	800153c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f8f9 	bl	8001528 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2210      	movs	r2, #16
 8001350:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f8fc 	bl	8001550 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2208      	movs	r2, #8
 8001372:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f8f5 	bl	8001564 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d07b      	beq.n	800147c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d072      	beq.n	8001474 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d043      	beq.n	8001474 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03e      	beq.n	8001474 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013fc:	2b60      	cmp	r3, #96	; 0x60
 80013fe:	d02b      	beq.n	8001458 <HAL_CAN_IRQHandler+0x32a>
 8001400:	2b60      	cmp	r3, #96	; 0x60
 8001402:	d82e      	bhi.n	8001462 <HAL_CAN_IRQHandler+0x334>
 8001404:	2b50      	cmp	r3, #80	; 0x50
 8001406:	d022      	beq.n	800144e <HAL_CAN_IRQHandler+0x320>
 8001408:	2b50      	cmp	r3, #80	; 0x50
 800140a:	d82a      	bhi.n	8001462 <HAL_CAN_IRQHandler+0x334>
 800140c:	2b40      	cmp	r3, #64	; 0x40
 800140e:	d019      	beq.n	8001444 <HAL_CAN_IRQHandler+0x316>
 8001410:	2b40      	cmp	r3, #64	; 0x40
 8001412:	d826      	bhi.n	8001462 <HAL_CAN_IRQHandler+0x334>
 8001414:	2b30      	cmp	r3, #48	; 0x30
 8001416:	d010      	beq.n	800143a <HAL_CAN_IRQHandler+0x30c>
 8001418:	2b30      	cmp	r3, #48	; 0x30
 800141a:	d822      	bhi.n	8001462 <HAL_CAN_IRQHandler+0x334>
 800141c:	2b10      	cmp	r3, #16
 800141e:	d002      	beq.n	8001426 <HAL_CAN_IRQHandler+0x2f8>
 8001420:	2b20      	cmp	r3, #32
 8001422:	d005      	beq.n	8001430 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001424:	e01d      	b.n	8001462 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800142e:	e019      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	f043 0310 	orr.w	r3, r3, #16
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001438:	e014      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001442:	e00f      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800144c:	e00a      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001456:	e005      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001460:	e000      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            break;
 8001462:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001472:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2204      	movs	r2, #4
 800147a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f872 	bl	8001578 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <__NVIC_EnableIRQ+0x38>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f7ff ff8e 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff29 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff3e 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff8e 	bl	8001680 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5d 	bl	800162c <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff31 	bl	80015f0 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa2 	bl	80016e8 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e037      	b.n	8001834 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f92a 	bl	8001a70 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}  
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800184a:	2b02      	cmp	r3, #2
 800184c:	d008      	beq.n	8001860 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2204      	movs	r2, #4
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e020      	b.n	80018a2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 020e 	bic.w	r2, r2, #14
 800186e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d005      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	e027      	b.n	8001920 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 020e 	bic.w	r2, r2, #14
 80018de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
    } 
  }
  return status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	2204      	movs	r2, #4
 8001948:	409a      	lsls	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d024      	beq.n	800199c <HAL_DMA_IRQHandler+0x72>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01f      	beq.n	800199c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b00      	cmp	r3, #0
 8001968:	d107      	bne.n	800197a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0204 	bic.w	r2, r2, #4
 8001978:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	2104      	movs	r1, #4
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d06a      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800199a:	e065      	b.n	8001a68 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	2202      	movs	r2, #2
 80019a2:	409a      	lsls	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d02c      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xdc>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d027      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10b      	bne.n	80019dc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 020a 	bic.w	r2, r2, #10
 80019d2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	2102      	movs	r1, #2
 80019e6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d035      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a04:	e030      	b.n	8001a68 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d028      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13e>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d023      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 020e 	bic.w	r2, r2, #14
 8001a2e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
    }
  }
}  
 8001a66:	e7ff      	b.n	8001a68 <HAL_DMA_IRQHandler+0x13e>
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <DMA_CalcBaseAndBitshift+0x34>)
 8001a80:	4413      	add	r3, r2
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x38>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	009a      	lsls	r2, r3, #2
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a06      	ldr	r2, [pc, #24]	; (8001aac <DMA_CalcBaseAndBitshift+0x3c>)
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	bffdfff8 	.word	0xbffdfff8
 8001aa8:	cccccccd 	.word	0xcccccccd
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e14e      	b.n	8001d5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8140 	beq.w	8001d58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_GPIO_Init+0x40>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 0201 	and.w	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d017      	beq.n	8001b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d123      	bne.n	8001be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0203 	and.w	r2, r3, #3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 809a 	beq.w	8001d58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1e0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1dc>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1d8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a44      	ldr	r2, [pc, #272]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1d4>
 8001c80:	2303      	movs	r3, #3
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c84:	2305      	movs	r3, #5
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c90:	2300      	movs	r3, #0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca2:	4937      	ldr	r1, [pc, #220]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f aea9 	bne.w	8001ac0 <HAL_GPIO_Init+0x10>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f001 b823 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 817d 	beq.w	80020ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dd0:	4bbc      	ldr	r3, [pc, #752]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d00c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ddc:	4bb9      	ldr	r3, [pc, #740]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d15c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x10e>
 8001de8:	4bb6      	ldr	r3, [pc, #728]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d155      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x10e>
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0x94>
 8001e22:	4ba8      	ldr	r3, [pc, #672]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e015      	b.n	8001e54 <HAL_RCC_OscConfig+0xc0>
 8001e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e50:	4b9c      	ldr	r3, [pc, #624]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e60:	fa92 f2a2 	rbit	r2, r2
 8001e64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f002 021f 	and.w	r2, r2, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 811f 	beq.w	80020c8 <HAL_RCC_OscConfig+0x334>
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 8116 	bne.w	80020c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f000 bfaf 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12e>
 8001eb4:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a82      	ldr	r2, [pc, #520]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e036      	b.n	8001f30 <HAL_RCC_OscConfig+0x19c>
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x158>
 8001ed2:	4b7c      	ldr	r3, [pc, #496]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7b      	ldr	r2, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a78      	ldr	r2, [pc, #480]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e021      	b.n	8001f30 <HAL_RCC_OscConfig+0x19c>
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x184>
 8001efe:	4b71      	ldr	r3, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a70      	ldr	r2, [pc, #448]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6e      	ldr	r3, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6d      	ldr	r2, [pc, #436]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0x19c>
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	f023 020f 	bic.w	r2, r3, #15
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	495f      	ldr	r1, [pc, #380]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d059      	beq.n	800200e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fd67 	bl	8000a2c <HAL_GetTick>
 8001f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fd62 	bl	8000a2c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d902      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f000 bf43 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 8001f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x218>
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e015      	b.n	8001fd8 <HAL_RCC_OscConfig+0x244>
 8001fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fc8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fdc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fe0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ff0:	fab2 f282 	clz	r2, r2
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f042 0220 	orr.w	r2, r2, #32
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	f002 021f 	and.w	r2, r2, #31
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f202 	lsl.w	r2, r1, r2
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ab      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1d0>
 800200c:	e05d      	b.n	80020ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe fd0d 	bl	8000a2c <HAL_GetTick>
 8002012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e00a      	b.n	800202e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002018:	f7fe fd08 	bl	8000a2c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d902      	bls.n	800202e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	f000 bee9 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 800202e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002032:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002042:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_OscConfig+0x2cc>
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e015      	b.n	800208c <HAL_RCC_OscConfig+0x2f8>
 8002060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002064:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800207c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002090:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002094:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80020a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f002 021f 	and.w	r2, r2, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ab      	bne.n	8002018 <HAL_RCC_OscConfig+0x284>
 80020c0:	e003      	b.n	80020ca <HAL_RCC_OscConfig+0x336>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 817d 	beq.w	80023da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020e0:	4ba6      	ldr	r3, [pc, #664]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020ec:	4ba3      	ldr	r3, [pc, #652]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d172      	bne.n	80021de <HAL_RCC_OscConfig+0x44a>
 80020f8:	4ba0      	ldr	r3, [pc, #640]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d16c      	bne.n	80021de <HAL_RCC_OscConfig+0x44a>
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002116:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_RCC_OscConfig+0x3a0>
 800212e:	4b93      	ldr	r3, [pc, #588]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e013      	b.n	800215c <HAL_RCC_OscConfig+0x3c8>
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800214c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002158:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2202      	movs	r2, #2
 800215e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002162:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002166:	fa92 f2a2 	rbit	r2, r2
 800216a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800216e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002172:	fab2 f282 	clz	r2, r2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCC_OscConfig+0x410>
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d002      	beq.n	80021a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f000 be2e 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b75      	ldr	r3, [pc, #468]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	21f8      	movs	r1, #248	; 0xf8
 80021ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021c2:	fa91 f1a1 	rbit	r1, r1
 80021c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021ce:	fab1 f181 	clz	r1, r1
 80021d2:	b2c9      	uxtb	r1, r1
 80021d4:	408b      	lsls	r3, r1
 80021d6:	4969      	ldr	r1, [pc, #420]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021dc:	e0fd      	b.n	80023da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8088 	beq.w	8002300 <HAL_RCC_OscConfig+0x56c>
 80021f0:	2301      	movs	r3, #1
 80021f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002202:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	461a      	mov	r2, r3
 8002218:	2301      	movs	r3, #1
 800221a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fc06 	bl	8000a2c <HAL_GetTick>
 8002220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002226:	f7fe fc01 	bl	8000a2c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d902      	bls.n	800223c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	f000 bde2 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800224e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_RCC_OscConfig+0x4d8>
 8002266:	4b45      	ldr	r3, [pc, #276]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e013      	b.n	8002294 <HAL_RCC_OscConfig+0x500>
 800226c:	2302      	movs	r3, #2
 800226e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002284:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002290:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2202      	movs	r2, #2
 8002296:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800229a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800229e:	fa92 f2a2 	rbit	r2, r2
 80022a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80022a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80022aa:	fab2 f282 	clz	r2, r2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f042 0220 	orr.w	r2, r2, #32
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f002 021f 	and.w	r2, r2, #31
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0af      	beq.n	8002226 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	21f8      	movs	r1, #248	; 0xf8
 80022dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022e4:	fa91 f1a1 	rbit	r1, r1
 80022e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022f0:	fab1 f181 	clz	r1, r1
 80022f4:	b2c9      	uxtb	r1, r1
 80022f6:	408b      	lsls	r3, r1
 80022f8:	4920      	ldr	r1, [pc, #128]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
 80022fe:	e06c      	b.n	80023da <HAL_RCC_OscConfig+0x646>
 8002300:	2301      	movs	r3, #1
 8002302:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002312:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	461a      	mov	r2, r3
 8002328:	2300      	movs	r3, #0
 800232a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fb7e 	bl	8000a2c <HAL_GetTick>
 8002330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe fb79 	bl	8000a2c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d902      	bls.n	800234c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	f000 bd5a 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800235e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d104      	bne.n	8002380 <HAL_RCC_OscConfig+0x5ec>
 8002376:	4b01      	ldr	r3, [pc, #4]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e015      	b.n	80023a8 <HAL_RCC_OscConfig+0x614>
 800237c:	40021000 	.word	0x40021000
 8002380:	2302      	movs	r3, #2
 8002382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002398:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80023a4:	4bc8      	ldr	r3, [pc, #800]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	2202      	movs	r2, #2
 80023aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80023ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023b2:	fa92 f2a2 	rbit	r2, r2
 80023b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023be:	fab2 f282 	clz	r2, r2
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	f042 0220 	orr.w	r2, r2, #32
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f002 021f 	and.w	r2, r2, #31
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ad      	bne.n	8002336 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8110 	beq.w	8002610 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d079      	beq.n	80024f4 <HAL_RCC_OscConfig+0x760>
 8002400:	2301      	movs	r3, #1
 8002402:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4bab      	ldr	r3, [pc, #684]	; (80026cc <HAL_RCC_OscConfig+0x938>)
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	461a      	mov	r2, r3
 8002426:	2301      	movs	r3, #1
 8002428:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe faff 	bl	8000a2c <HAL_GetTick>
 800242e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe fafa 	bl	8000a2c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d902      	bls.n	800244a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	f000 bcdb 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002488:	2202      	movs	r2, #2
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80024a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024b0:	2102      	movs	r1, #2
 80024b2:	6019      	str	r1, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f1a3 	rbit	r1, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024ca:	6019      	str	r1, [r3, #0]
  return result;
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0a0      	beq.n	8002434 <HAL_RCC_OscConfig+0x6a0>
 80024f2:	e08d      	b.n	8002610 <HAL_RCC_OscConfig+0x87c>
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002516:	601a      	str	r2, [r3, #0]
  return result;
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002520:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	4b68      	ldr	r3, [pc, #416]	; (80026cc <HAL_RCC_OscConfig+0x938>)
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	461a      	mov	r2, r3
 8002532:	2300      	movs	r3, #0
 8002534:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7fe fa79 	bl	8000a2c <HAL_GetTick>
 800253a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002540:	f7fe fa74 	bl	8000a2c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d902      	bls.n	8002556 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	f000 bc55 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800255e:	2202      	movs	r2, #2
 8002560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002582:	2202      	movs	r2, #2
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025a6:	2202      	movs	r2, #2
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f2a3 	rbit	r2, r3
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80025c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025ce:	2102      	movs	r1, #2
 80025d0:	6019      	str	r1, [r3, #0]
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f1a3 	rbit	r1, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025e8:	6019      	str	r1, [r3, #0]
  return result;
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d197      	bne.n	8002540 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 81a1 	beq.w	8002968 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d116      	bne.n	8002666 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	61d3      	str	r3, [r2, #28]
 8002644:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800265e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x93c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCC_OscConfig+0x93c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_RCC_OscConfig+0x93c>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7fe f9d5 	bl	8000a2c <HAL_GetTick>
 8002682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	e009      	b.n	800269c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002688:	f7fe f9d0 	bl	8000a2c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e3b1      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_RCC_OscConfig+0x93c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ef      	beq.n	8002688 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10d      	bne.n	80026d4 <HAL_RCC_OscConfig+0x940>
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a02      	ldr	r2, [pc, #8]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6213      	str	r3, [r2, #32]
 80026c4:	e03c      	b.n	8002740 <HAL_RCC_OscConfig+0x9ac>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	10908120 	.word	0x10908120
 80026d0:	40007000 	.word	0x40007000
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x96a>
 80026e4:	4bc1      	ldr	r3, [pc, #772]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4ac0      	ldr	r2, [pc, #768]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	4bbe      	ldr	r3, [pc, #760]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4abd      	ldr	r2, [pc, #756]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	e020      	b.n	8002740 <HAL_RCC_OscConfig+0x9ac>
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x994>
 800270e:	4bb7      	ldr	r3, [pc, #732]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4ab6      	ldr	r2, [pc, #728]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4bb4      	ldr	r3, [pc, #720]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4ab3      	ldr	r2, [pc, #716]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0x9ac>
 8002728:	4bb0      	ldr	r3, [pc, #704]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4aaf      	ldr	r2, [pc, #700]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	4bad      	ldr	r3, [pc, #692]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4aac      	ldr	r2, [pc, #688]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8081 	beq.w	8002854 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7fe f96b 	bl	8000a2c <HAL_GetTick>
 8002756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe f966 	bl	8000a2c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e345      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800277c:	2202      	movs	r2, #2
 800277e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027a0:	2202      	movs	r2, #2
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027ba:	601a      	str	r2, [r3, #0]
  return result;
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_OscConfig+0xa4c>
 80027da:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	e013      	b.n	8002808 <HAL_RCC_OscConfig+0xa74>
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027e8:	2202      	movs	r2, #2
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b79      	ldr	r3, [pc, #484]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002810:	2102      	movs	r1, #2
 8002812:	6011      	str	r1, [r2, #0]
 8002814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002818:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	fa92 f1a2 	rbit	r1, r2
 8002822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002826:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800282a:	6011      	str	r1, [r2, #0]
  return result;
 800282c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002830:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f002 021f 	and.w	r2, r2, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d084      	beq.n	800275c <HAL_RCC_OscConfig+0x9c8>
 8002852:	e07f      	b.n	8002954 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe f8ea 	bl	8000a2c <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe f8e5 	bl	8000a2c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e2c4      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800287e:	2202      	movs	r2, #2
 8002880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028a2:	2202      	movs	r2, #2
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028bc:	601a      	str	r2, [r3, #0]
  return result;
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0302 	orr.w	r3, r3, #2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0xb4e>
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	e013      	b.n	800290a <HAL_RCC_OscConfig+0xb76>
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ea:	2202      	movs	r2, #2
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002912:	2102      	movs	r1, #2
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	fa92 f1a2 	rbit	r1, r2
 8002924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002928:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800292c:	6011      	str	r1, [r2, #0]
  return result;
 800292e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002932:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d184      	bne.n	800285e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002954:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002966:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8242 	beq.w	8002dfe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297a:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	f000 8213 	beq.w	8002dae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b02      	cmp	r3, #2
 8002996:	f040 8162 	bne.w	8002c5e <HAL_RCC_OscConfig+0xeca>
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029be:	601a      	str	r2, [r3, #0]
  return result;
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	461a      	mov	r2, r3
 80029dc:	2300      	movs	r3, #0
 80029de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe f824 	bl	8000a2c <HAL_GetTick>
 80029e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	e00c      	b.n	8002a04 <HAL_RCC_OscConfig+0xc70>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe f81c 	bl	8000a2c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1fd      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a28:	601a      	str	r2, [r3, #0]
  return result;
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_OscConfig+0xcba>
 8002a48:	4bb0      	ldr	r3, [pc, #704]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_OscConfig+0xd0a>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	fa93 f2a3 	rbit	r2, r3
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	4b9c      	ldr	r3, [pc, #624]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002aa6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aaa:	6011      	str	r1, [r2, #0]
 8002aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	fa92 f1a2 	rbit	r1, r2
 8002aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002abe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ac2:	6011      	str	r1, [r2, #0]
  return result;
 8002ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f002 021f 	and.w	r2, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d182      	bne.n	80029f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aea:	4b88      	ldr	r3, [pc, #544]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	497f      	ldr	r1, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b36:	601a      	str	r2, [r3, #0]
  return result;
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	461a      	mov	r2, r3
 8002b54:	2301      	movs	r3, #1
 8002b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fd ff68 	bl	8000a2c <HAL_GetTick>
 8002b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b60:	e009      	b.n	8002b76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fd ff63 	bl	8000a2c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e144      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b9a:	601a      	str	r2, [r3, #0]
  return result;
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ba4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe2c>
 8002bba:	4b54      	ldr	r3, [pc, #336]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e027      	b.n	8002c10 <HAL_RCC_OscConfig+0xe7c>
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f2a3 	rbit	r2, r3
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	fa92 f1a2 	rbit	r1, r2
 8002c2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c34:	6011      	str	r1, [r2, #0]
  return result;
 8002c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 021f 	and.w	r2, r2, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d082      	beq.n	8002b62 <HAL_RCC_OscConfig+0xdce>
 8002c5c:	e0cf      	b.n	8002dfe <HAL_RCC_OscConfig+0x106a>
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fa93 f2a3 	rbit	r2, r3
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c82:	601a      	str	r2, [r3, #0]
  return result;
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fd fec2 	bl	8000a2c <HAL_GetTick>
 8002ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cac:	e009      	b.n	8002cc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fd febd 	bl	8000a2c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e09e      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ce6:	601a      	str	r2, [r3, #0]
  return result;
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d104      	bne.n	8002d10 <HAL_RCC_OscConfig+0xf7c>
 8002d06:	4b01      	ldr	r3, [pc, #4]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e029      	b.n	8002d60 <HAL_RCC_OscConfig+0xfcc>
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fa93 f2a3 	rbit	r2, r3
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCC_OscConfig+0x1078>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d64:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d72:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	fa92 f1a2 	rbit	r1, r2
 8002d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d80:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d84:	6011      	str	r1, [r2, #0]
  return result;
 8002d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d180      	bne.n	8002cae <HAL_RCC_OscConfig+0xf1a>
 8002dac:	e027      	b.n	8002dfe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e01e      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_OscConfig+0x1078>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002de2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b09e      	sub	sp, #120	; 0x78
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e162      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b90      	ldr	r3, [pc, #576]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d910      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 0207 	bic.w	r2, r3, #7
 8002e3e:	498b      	ldr	r1, [pc, #556]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e14a      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e64:	4b82      	ldr	r3, [pc, #520]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	497f      	ldr	r1, [pc, #508]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80dc 	beq.w	800303c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d13c      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xf6>
 8002e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xa6>
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e00f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0xc6>
 8002eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8002eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed2:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eda:	65ba      	str	r2, [r7, #88]	; 0x58
 8002edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ede:	fa92 f2a2 	rbit	r2, r2
 8002ee2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ee6:	fab2 f282 	clz	r2, r2
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f042 0220 	orr.w	r2, r2, #32
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f002 021f 	and.w	r2, r2, #31
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d17b      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0f3      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d13c      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x178>
 8002f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d102      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x128>
 8002f32:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	e00f      	b.n	8002f58 <HAL_RCC_ClockConfig+0x148>
 8002f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
 8002f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f54:	4b46      	ldr	r3, [pc, #280]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f002 021f 	and.w	r2, r2, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d13a      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0b2      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x1a0>
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	e00d      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1bc>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2202      	movs	r2, #2
 8002fce:	61ba      	str	r2, [r7, #24]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	fa92 f2a2 	rbit	r2, r2
 8002fd6:	617a      	str	r2, [r7, #20]
  return result;
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	fab2 f282 	clz	r2, r2
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	f042 0220 	orr.w	r2, r2, #32
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	f002 021f 	and.w	r2, r2, #31
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e079      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	491a      	ldr	r1, [pc, #104]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7fd fd0e 	bl	8000a2c <HAL_GetTick>
 8003010:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fd fd0a 	bl	8000a2c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e061      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d214      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	4906      	ldr	r1, [pc, #24]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e040      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
 800306c:	40022000 	.word	0x40022000
 8003070:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	491a      	ldr	r1, [pc, #104]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4912      	ldr	r1, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030b2:	f000 f829 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030b6:	4601      	mov	r1, r0
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c0:	22f0      	movs	r2, #240	; 0xf0
 80030c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	fa92 f2a2 	rbit	r2, r2
 80030ca:	60fa      	str	r2, [r7, #12]
  return result;
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	fab2 f282 	clz	r2, r2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	40d3      	lsrs	r3, r2
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x2ec>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	fa21 f303 	lsr.w	r3, r1, r3
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_RCC_ClockConfig+0x2f0>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_RCC_ClockConfig+0x2f4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fc5c 	bl	80009a4 <HAL_InitTick>
  
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3778      	adds	r7, #120	; 0x78
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08004b1c 	.word	0x08004b1c
 8003100:	20000000 	.word	0x20000000
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b08b      	sub	sp, #44	; 0x2c
 800310c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b04      	cmp	r3, #4
 8003130:	d002      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x30>
 8003132:	2b08      	cmp	r3, #8
 8003134:	d003      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x36>
 8003136:	e03c      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800313a:	623b      	str	r3, [r7, #32]
      break;
 800313c:	e03c      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003144:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003148:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	fa92 f2a2 	rbit	r2, r2
 8003150:	607a      	str	r2, [r7, #4]
  return result;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	fab2 f282 	clz	r2, r2
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	40d3      	lsrs	r3, r2
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	220f      	movs	r2, #15
 800316c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	fa92 f2a2 	rbit	r2, r2
 8003174:	60fa      	str	r2, [r7, #12]
  return result;
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	fab2 f282 	clz	r2, r2
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	40d3      	lsrs	r3, r2
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003190:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	fbb2 f2f3 	udiv	r2, r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
 80031a0:	e004      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	623b      	str	r3, [r7, #32]
      break;
 80031b0:	e002      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80031b4:	623b      	str	r3, [r7, #32]
      break;
 80031b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b8:	6a3b      	ldr	r3, [r7, #32]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	372c      	adds	r7, #44	; 0x2c
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	007a1200 	.word	0x007a1200
 80031d0:	08004b34 	.word	0x08004b34
 80031d4:	08004b44 	.word	0x08004b44
 80031d8:	003d0900 	.word	0x003d0900

080031dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000

080031f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031fa:	f7ff ffef 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 80031fe:	4601      	mov	r1, r0
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003208:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800320c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	fa92 f2a2 	rbit	r2, r2
 8003214:	603a      	str	r2, [r7, #0]
  return result;
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	fab2 f282 	clz	r2, r2
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	40d3      	lsrs	r3, r2
 8003220:	4a04      	ldr	r2, [pc, #16]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	08004b2c 	.word	0x08004b2c

08003238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800323e:	f7ff ffcd 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 8003242:	4601      	mov	r1, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800324c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003250:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	fa92 f2a2 	rbit	r2, r2
 8003258:	603a      	str	r2, [r7, #0]
  return result;
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	fab2 f282 	clz	r2, r2
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	40d3      	lsrs	r3, r2
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	08004b2c 	.word	0x08004b2c

0800327c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e040      	b.n	8003310 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fa26 	bl	80006f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fbbc 	bl	8003a38 <UART_SetConfig>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e022      	b.n	8003310 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fce6 	bl	8003ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fd6d 	bl	8003de8 <UART_CheckIdleState>
 800330e:	4603      	mov	r3, r0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332c:	2b20      	cmp	r3, #32
 800332e:	d178      	bne.n	8003422 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_UART_Transmit+0x24>
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e071      	b.n	8003424 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2221      	movs	r2, #33	; 0x21
 800334c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334e:	f7fd fb6d 	bl	8000a2c <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336c:	d108      	bne.n	8003380 <HAL_UART_Transmit+0x68>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	e003      	b.n	8003388 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003388:	e030      	b.n	80033ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fdcf 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e03c      	b.n	8003424 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	881a      	ldrh	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033bc:	b292      	uxth	r2, r2
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	3302      	adds	r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e008      	b.n	80033da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b292      	uxth	r2, r2
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	3301      	adds	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1c8      	bne.n	800338a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fd98 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e005      	b.n	8003424 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0ba      	sub	sp, #232	; 0xe8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003456:	f640 030f 	movw	r3, #2063	; 0x80f
 800345a:	4013      	ands	r3, r2
 800345c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d115      	bne.n	8003494 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00f      	beq.n	8003494 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 82ab 	beq.w	80039e0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
      }
      return;
 8003492:	e2a5      	b.n	80039e0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8117 	beq.w	80036cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800349e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034ae:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <HAL_UART_IRQHandler+0x298>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 810a 	beq.w	80036cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d011      	beq.n	80034e8 <HAL_UART_IRQHandler+0xbc>
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00b      	beq.n	80034e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2201      	movs	r2, #1
 80034d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d011      	beq.n	8003518 <HAL_UART_IRQHandler+0xec>
 80034f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00b      	beq.n	8003518 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2202      	movs	r2, #2
 8003506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d011      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
 8003524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2204      	movs	r2, #4
 8003536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353e:	f043 0202 	orr.w	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2208      	movs	r2, #8
 8003572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357a:	f043 0208 	orr.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <HAL_UART_IRQHandler+0x18a>
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8211 	beq.w	80039e4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003606:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d04f      	beq.n	80036ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fcf9 	bl	8004006 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d141      	bne.n	80036a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3308      	adds	r3, #8
 8003628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800363c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3308      	adds	r3, #8
 800364a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800364e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800365a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1d9      	bne.n	8003622 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003672:	2b00      	cmp	r3, #0
 8003674:	d013      	beq.n	800369e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_UART_IRQHandler+0x29c>)
 800367c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe f913 	bl	80018ae <HAL_DMA_Abort_IT>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003698:	4610      	mov	r0, r2
 800369a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	e00f      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f9b4 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	e00b      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9b0 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ac:	e007      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f9ac 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80036bc:	e192      	b.n	80039e4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036be:	bf00      	nop
    return;
 80036c0:	e190      	b.n	80039e4 <HAL_UART_IRQHandler+0x5b8>
 80036c2:	bf00      	nop
 80036c4:	04000120 	.word	0x04000120
 80036c8:	080040cf 	.word	0x080040cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	f040 814b 	bne.w	800396c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8144 	beq.w	800396c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 813d 	beq.w	800396c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2210      	movs	r2, #16
 80036f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	f040 80b5 	bne.w	8003874 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003716:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8164 	beq.w	80039e8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800372a:	429a      	cmp	r2, r3
 800372c:	f080 815c 	bcs.w	80039e8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003736:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b20      	cmp	r3, #32
 8003742:	f000 8086 	beq.w	8003852 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800375a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800375e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003762:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003774:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800377c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1da      	bne.n	8003746 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3308      	adds	r3, #8
 8003796:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3308      	adds	r3, #8
 80037b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e1      	bne.n	8003790 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3308      	adds	r3, #8
 80037d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e3      	bne.n	80037cc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003834:	65bb      	str	r3, [r7, #88]	; 0x58
 8003836:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800383a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e4      	bne.n	8003812 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd fff5 	bl	800183c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003864:	b29b      	uxth	r3, r3
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	b29b      	uxth	r3, r3
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f8d7 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003872:	e0b9      	b.n	80039e8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003880:	b29b      	uxth	r3, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80ab 	beq.w	80039ec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003896:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a6 	beq.w	80039ec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44
 80038c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e4      	bne.n	80038a0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3308      	adds	r3, #8
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	623b      	str	r3, [r7, #32]
   return(result);
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038fa:	633a      	str	r2, [r7, #48]	; 0x30
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e3      	bne.n	80038d6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0310 	bic.w	r3, r3, #16
 8003936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	617b      	str	r3, [r7, #20]
   return(result);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e4      	bne.n	8003922 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800395e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003962:	4619      	mov	r1, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f85b 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800396a:	e03f      	b.n	80039ec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00e      	beq.n	8003996 <HAL_UART_IRQHandler+0x56a>
 8003978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800397c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800398c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fbdd 	bl	800414e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003994:	e02d      	b.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00e      	beq.n	80039c0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01c      	beq.n	80039f0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
    }
    return;
 80039be:	e017      	b.n	80039f0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d012      	beq.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
 80039cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fb8e 	bl	80040fa <UART_EndTransmit_IT>
    return;
 80039de:	e008      	b.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80039e0:	bf00      	nop
 80039e2:	e006      	b.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80039e4:	bf00      	nop
 80039e6:	e004      	b.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80039e8:	bf00      	nop
 80039ea:	e002      	b.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80039f0:	bf00      	nop
  }

}
 80039f2:	37e8      	adds	r7, #232	; 0xe8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b8a      	ldr	r3, [pc, #552]	; (8003c8c <UART_SetConfig+0x254>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a78      	ldr	r2, [pc, #480]	; (8003c90 <UART_SetConfig+0x258>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d120      	bne.n	8003af6 <UART_SetConfig+0xbe>
 8003ab4:	4b77      	ldr	r3, [pc, #476]	; (8003c94 <UART_SetConfig+0x25c>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d817      	bhi.n	8003af0 <UART_SetConfig+0xb8>
 8003ac0:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <UART_SetConfig+0x90>)
 8003ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac6:	bf00      	nop
 8003ac8:	08003ad9 	.word	0x08003ad9
 8003acc:	08003ae5 	.word	0x08003ae5
 8003ad0:	08003aeb 	.word	0x08003aeb
 8003ad4:	08003adf 	.word	0x08003adf
 8003ad8:	2300      	movs	r3, #0
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e01d      	b.n	8003b1a <UART_SetConfig+0xe2>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e01a      	b.n	8003b1a <UART_SetConfig+0xe2>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e017      	b.n	8003b1a <UART_SetConfig+0xe2>
 8003aea:	2308      	movs	r3, #8
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e014      	b.n	8003b1a <UART_SetConfig+0xe2>
 8003af0:	2310      	movs	r3, #16
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e011      	b.n	8003b1a <UART_SetConfig+0xe2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a67      	ldr	r2, [pc, #412]	; (8003c98 <UART_SetConfig+0x260>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d102      	bne.n	8003b06 <UART_SetConfig+0xce>
 8003b00:	2300      	movs	r3, #0
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e009      	b.n	8003b1a <UART_SetConfig+0xe2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <UART_SetConfig+0x264>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d102      	bne.n	8003b16 <UART_SetConfig+0xde>
 8003b10:	2300      	movs	r3, #0
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e001      	b.n	8003b1a <UART_SetConfig+0xe2>
 8003b16:	2310      	movs	r3, #16
 8003b18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d15a      	bne.n	8003bda <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003b24:	7ffb      	ldrb	r3, [r7, #31]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d827      	bhi.n	8003b7a <UART_SetConfig+0x142>
 8003b2a:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0xf8>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b7b 	.word	0x08003b7b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b7b 	.word	0x08003b7b
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003b7b 	.word	0x08003b7b
 8003b50:	08003b73 	.word	0x08003b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7ff fb4e 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8003b58:	61b8      	str	r0, [r7, #24]
        break;
 8003b5a:	e013      	b.n	8003b84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7ff fb6c 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 8003b60:	61b8      	str	r0, [r7, #24]
        break;
 8003b62:	e00f      	b.n	8003b84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b64:	4b4e      	ldr	r3, [pc, #312]	; (8003ca0 <UART_SetConfig+0x268>)
 8003b66:	61bb      	str	r3, [r7, #24]
        break;
 8003b68:	e00c      	b.n	8003b84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6a:	f7ff facd 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8003b6e:	61b8      	str	r0, [r7, #24]
        break;
 8003b70:	e008      	b.n	8003b84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b76:	61bb      	str	r3, [r7, #24]
        break;
 8003b78:	e004      	b.n	8003b84 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	77bb      	strb	r3, [r7, #30]
        break;
 8003b82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d074      	beq.n	8003c74 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	005a      	lsls	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	d916      	bls.n	8003bd4 <UART_SetConfig+0x19c>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d212      	bcs.n	8003bd4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f023 030f 	bic.w	r3, r3, #15
 8003bb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	89fb      	ldrh	r3, [r7, #14]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	89fa      	ldrh	r2, [r7, #14]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	e04f      	b.n	8003c74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77bb      	strb	r3, [r7, #30]
 8003bd8:	e04c      	b.n	8003c74 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bda:	7ffb      	ldrb	r3, [r7, #31]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d828      	bhi.n	8003c32 <UART_SetConfig+0x1fa>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0x1b0>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c0d 	.word	0x08003c0d
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	08003c1d 	.word	0x08003c1d
 8003bf4:	08003c33 	.word	0x08003c33
 8003bf8:	08003c23 	.word	0x08003c23
 8003bfc:	08003c33 	.word	0x08003c33
 8003c00:	08003c33 	.word	0x08003c33
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f7ff faf2 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8003c10:	61b8      	str	r0, [r7, #24]
        break;
 8003c12:	e013      	b.n	8003c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c14:	f7ff fb10 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 8003c18:	61b8      	str	r0, [r7, #24]
        break;
 8003c1a:	e00f      	b.n	8003c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <UART_SetConfig+0x268>)
 8003c1e:	61bb      	str	r3, [r7, #24]
        break;
 8003c20:	e00c      	b.n	8003c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7ff fa71 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8003c26:	61b8      	str	r0, [r7, #24]
        break;
 8003c28:	e008      	b.n	8003c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	61bb      	str	r3, [r7, #24]
        break;
 8003c30:	e004      	b.n	8003c3c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	77bb      	strb	r3, [r7, #30]
        break;
 8003c3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d018      	beq.n	8003c74 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	085a      	lsrs	r2, r3, #1
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b0f      	cmp	r3, #15
 8003c5a:	d909      	bls.n	8003c70 <UART_SetConfig+0x238>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c62:	d205      	bcs.n	8003c70 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	e001      	b.n	8003c74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	efff69f3 	.word	0xefff69f3
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40004400 	.word	0x40004400
 8003c9c:	40004800 	.word	0x40004800
 8003ca0:	007a1200 	.word	0x007a1200

08003ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01a      	beq.n	8003dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da2:	d10a      	bne.n	8003dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b098      	sub	sp, #96	; 0x60
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df8:	f7fc fe18 	bl	8000a2c <HAL_GetTick>
 8003dfc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d12e      	bne.n	8003e6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f88c 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d021      	beq.n	8003e6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e44:	647b      	str	r3, [r7, #68]	; 0x44
 8003e46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e6      	bne.n	8003e26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e062      	b.n	8003f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d149      	bne.n	8003f0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e80:	2200      	movs	r2, #0
 8003e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f856 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d03c      	beq.n	8003f0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e6      	bne.n	8003e92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3308      	adds	r3, #8
 8003eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	69b9      	ldr	r1, [r7, #24]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e011      	b.n	8003f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3758      	adds	r7, #88	; 0x58
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	e049      	b.n	8003fde <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d045      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fc fd6b 	bl	8000a2c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e048      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d031      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d110      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f838 	bl	8004006 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e029      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb8:	d111      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f81e 	bl	8004006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e00f      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	bf0c      	ite	eq
 8003fee:	2301      	moveq	r3, #1
 8003ff0:	2300      	movne	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d0a6      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004006:	b480      	push	{r7}
 8004008:	b095      	sub	sp, #84	; 0x54
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402c:	643b      	str	r3, [r7, #64]	; 0x40
 800402e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e6      	bne.n	800400e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	64bb      	str	r3, [r7, #72]	; 0x48
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3308      	adds	r3, #8
 800405e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004060:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	2b01      	cmp	r3, #1
 800407a:	d118      	bne.n	80040ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	60bb      	str	r3, [r7, #8]
   return(result);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f023 0310 	bic.w	r3, r3, #16
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6979      	ldr	r1, [r7, #20]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	613b      	str	r3, [r7, #16]
   return(result);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e6      	bne.n	800407c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040c2:	bf00      	nop
 80040c4:	3754      	adds	r7, #84	; 0x54
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fc8d 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b088      	sub	sp, #32
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6979      	ldr	r1, [r7, #20]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	613b      	str	r3, [r7, #16]
   return(result);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e6      	bne.n	8004102 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fc59 	bl	80039f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004146:	bf00      	nop
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <siprintf>:
 8004164:	b40e      	push	{r1, r2, r3}
 8004166:	b500      	push	{lr}
 8004168:	b09c      	sub	sp, #112	; 0x70
 800416a:	ab1d      	add	r3, sp, #116	; 0x74
 800416c:	9002      	str	r0, [sp, #8]
 800416e:	9006      	str	r0, [sp, #24]
 8004170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004174:	4809      	ldr	r0, [pc, #36]	; (800419c <siprintf+0x38>)
 8004176:	9107      	str	r1, [sp, #28]
 8004178:	9104      	str	r1, [sp, #16]
 800417a:	4909      	ldr	r1, [pc, #36]	; (80041a0 <siprintf+0x3c>)
 800417c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004180:	9105      	str	r1, [sp, #20]
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	a902      	add	r1, sp, #8
 8004188:	f000 f992 	bl	80044b0 <_svfiprintf_r>
 800418c:	9b02      	ldr	r3, [sp, #8]
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	b01c      	add	sp, #112	; 0x70
 8004194:	f85d eb04 	ldr.w	lr, [sp], #4
 8004198:	b003      	add	sp, #12
 800419a:	4770      	bx	lr
 800419c:	20000058 	.word	0x20000058
 80041a0:	ffff0208 	.word	0xffff0208

080041a4 <memset>:
 80041a4:	4402      	add	r2, r0
 80041a6:	4603      	mov	r3, r0
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d100      	bne.n	80041ae <memset+0xa>
 80041ac:	4770      	bx	lr
 80041ae:	f803 1b01 	strb.w	r1, [r3], #1
 80041b2:	e7f9      	b.n	80041a8 <memset+0x4>

080041b4 <__errno>:
 80041b4:	4b01      	ldr	r3, [pc, #4]	; (80041bc <__errno+0x8>)
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000058 	.word	0x20000058

080041c0 <__libc_init_array>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	4d0d      	ldr	r5, [pc, #52]	; (80041f8 <__libc_init_array+0x38>)
 80041c4:	4c0d      	ldr	r4, [pc, #52]	; (80041fc <__libc_init_array+0x3c>)
 80041c6:	1b64      	subs	r4, r4, r5
 80041c8:	10a4      	asrs	r4, r4, #2
 80041ca:	2600      	movs	r6, #0
 80041cc:	42a6      	cmp	r6, r4
 80041ce:	d109      	bne.n	80041e4 <__libc_init_array+0x24>
 80041d0:	4d0b      	ldr	r5, [pc, #44]	; (8004200 <__libc_init_array+0x40>)
 80041d2:	4c0c      	ldr	r4, [pc, #48]	; (8004204 <__libc_init_array+0x44>)
 80041d4:	f000 fc6a 	bl	8004aac <_init>
 80041d8:	1b64      	subs	r4, r4, r5
 80041da:	10a4      	asrs	r4, r4, #2
 80041dc:	2600      	movs	r6, #0
 80041de:	42a6      	cmp	r6, r4
 80041e0:	d105      	bne.n	80041ee <__libc_init_array+0x2e>
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e8:	4798      	blx	r3
 80041ea:	3601      	adds	r6, #1
 80041ec:	e7ee      	b.n	80041cc <__libc_init_array+0xc>
 80041ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f2:	4798      	blx	r3
 80041f4:	3601      	adds	r6, #1
 80041f6:	e7f2      	b.n	80041de <__libc_init_array+0x1e>
 80041f8:	08004b88 	.word	0x08004b88
 80041fc:	08004b88 	.word	0x08004b88
 8004200:	08004b88 	.word	0x08004b88
 8004204:	08004b8c 	.word	0x08004b8c

08004208 <__retarget_lock_acquire_recursive>:
 8004208:	4770      	bx	lr

0800420a <__retarget_lock_release_recursive>:
 800420a:	4770      	bx	lr

0800420c <_free_r>:
 800420c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800420e:	2900      	cmp	r1, #0
 8004210:	d044      	beq.n	800429c <_free_r+0x90>
 8004212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004216:	9001      	str	r0, [sp, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f1a1 0404 	sub.w	r4, r1, #4
 800421e:	bfb8      	it	lt
 8004220:	18e4      	addlt	r4, r4, r3
 8004222:	f000 f8df 	bl	80043e4 <__malloc_lock>
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <_free_r+0x94>)
 8004228:	9801      	ldr	r0, [sp, #4]
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	b933      	cbnz	r3, 800423c <_free_r+0x30>
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6014      	str	r4, [r2, #0]
 8004232:	b003      	add	sp, #12
 8004234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004238:	f000 b8da 	b.w	80043f0 <__malloc_unlock>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d908      	bls.n	8004252 <_free_r+0x46>
 8004240:	6825      	ldr	r5, [r4, #0]
 8004242:	1961      	adds	r1, r4, r5
 8004244:	428b      	cmp	r3, r1
 8004246:	bf01      	itttt	eq
 8004248:	6819      	ldreq	r1, [r3, #0]
 800424a:	685b      	ldreq	r3, [r3, #4]
 800424c:	1949      	addeq	r1, r1, r5
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	e7ed      	b.n	800422e <_free_r+0x22>
 8004252:	461a      	mov	r2, r3
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b10b      	cbz	r3, 800425c <_free_r+0x50>
 8004258:	42a3      	cmp	r3, r4
 800425a:	d9fa      	bls.n	8004252 <_free_r+0x46>
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	1855      	adds	r5, r2, r1
 8004260:	42a5      	cmp	r5, r4
 8004262:	d10b      	bne.n	800427c <_free_r+0x70>
 8004264:	6824      	ldr	r4, [r4, #0]
 8004266:	4421      	add	r1, r4
 8004268:	1854      	adds	r4, r2, r1
 800426a:	42a3      	cmp	r3, r4
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	d1e0      	bne.n	8004232 <_free_r+0x26>
 8004270:	681c      	ldr	r4, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	6053      	str	r3, [r2, #4]
 8004276:	440c      	add	r4, r1
 8004278:	6014      	str	r4, [r2, #0]
 800427a:	e7da      	b.n	8004232 <_free_r+0x26>
 800427c:	d902      	bls.n	8004284 <_free_r+0x78>
 800427e:	230c      	movs	r3, #12
 8004280:	6003      	str	r3, [r0, #0]
 8004282:	e7d6      	b.n	8004232 <_free_r+0x26>
 8004284:	6825      	ldr	r5, [r4, #0]
 8004286:	1961      	adds	r1, r4, r5
 8004288:	428b      	cmp	r3, r1
 800428a:	bf04      	itt	eq
 800428c:	6819      	ldreq	r1, [r3, #0]
 800428e:	685b      	ldreq	r3, [r3, #4]
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	bf04      	itt	eq
 8004294:	1949      	addeq	r1, r1, r5
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	6054      	str	r4, [r2, #4]
 800429a:	e7ca      	b.n	8004232 <_free_r+0x26>
 800429c:	b003      	add	sp, #12
 800429e:	bd30      	pop	{r4, r5, pc}
 80042a0:	2000030c 	.word	0x2000030c

080042a4 <sbrk_aligned>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4e0e      	ldr	r6, [pc, #56]	; (80042e0 <sbrk_aligned+0x3c>)
 80042a8:	460c      	mov	r4, r1
 80042aa:	6831      	ldr	r1, [r6, #0]
 80042ac:	4605      	mov	r5, r0
 80042ae:	b911      	cbnz	r1, 80042b6 <sbrk_aligned+0x12>
 80042b0:	f000 fba6 	bl	8004a00 <_sbrk_r>
 80042b4:	6030      	str	r0, [r6, #0]
 80042b6:	4621      	mov	r1, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 fba1 	bl	8004a00 <_sbrk_r>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	d00a      	beq.n	80042d8 <sbrk_aligned+0x34>
 80042c2:	1cc4      	adds	r4, r0, #3
 80042c4:	f024 0403 	bic.w	r4, r4, #3
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	d007      	beq.n	80042dc <sbrk_aligned+0x38>
 80042cc:	1a21      	subs	r1, r4, r0
 80042ce:	4628      	mov	r0, r5
 80042d0:	f000 fb96 	bl	8004a00 <_sbrk_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d101      	bne.n	80042dc <sbrk_aligned+0x38>
 80042d8:	f04f 34ff 	mov.w	r4, #4294967295
 80042dc:	4620      	mov	r0, r4
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	20000310 	.word	0x20000310

080042e4 <_malloc_r>:
 80042e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e8:	1ccd      	adds	r5, r1, #3
 80042ea:	f025 0503 	bic.w	r5, r5, #3
 80042ee:	3508      	adds	r5, #8
 80042f0:	2d0c      	cmp	r5, #12
 80042f2:	bf38      	it	cc
 80042f4:	250c      	movcc	r5, #12
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	4607      	mov	r7, r0
 80042fa:	db01      	blt.n	8004300 <_malloc_r+0x1c>
 80042fc:	42a9      	cmp	r1, r5
 80042fe:	d905      	bls.n	800430c <_malloc_r+0x28>
 8004300:	230c      	movs	r3, #12
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	2600      	movs	r6, #0
 8004306:	4630      	mov	r0, r6
 8004308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800430c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043e0 <_malloc_r+0xfc>
 8004310:	f000 f868 	bl	80043e4 <__malloc_lock>
 8004314:	f8d8 3000 	ldr.w	r3, [r8]
 8004318:	461c      	mov	r4, r3
 800431a:	bb5c      	cbnz	r4, 8004374 <_malloc_r+0x90>
 800431c:	4629      	mov	r1, r5
 800431e:	4638      	mov	r0, r7
 8004320:	f7ff ffc0 	bl	80042a4 <sbrk_aligned>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	4604      	mov	r4, r0
 8004328:	d155      	bne.n	80043d6 <_malloc_r+0xf2>
 800432a:	f8d8 4000 	ldr.w	r4, [r8]
 800432e:	4626      	mov	r6, r4
 8004330:	2e00      	cmp	r6, #0
 8004332:	d145      	bne.n	80043c0 <_malloc_r+0xdc>
 8004334:	2c00      	cmp	r4, #0
 8004336:	d048      	beq.n	80043ca <_malloc_r+0xe6>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	4631      	mov	r1, r6
 800433c:	4638      	mov	r0, r7
 800433e:	eb04 0903 	add.w	r9, r4, r3
 8004342:	f000 fb5d 	bl	8004a00 <_sbrk_r>
 8004346:	4581      	cmp	r9, r0
 8004348:	d13f      	bne.n	80043ca <_malloc_r+0xe6>
 800434a:	6821      	ldr	r1, [r4, #0]
 800434c:	1a6d      	subs	r5, r5, r1
 800434e:	4629      	mov	r1, r5
 8004350:	4638      	mov	r0, r7
 8004352:	f7ff ffa7 	bl	80042a4 <sbrk_aligned>
 8004356:	3001      	adds	r0, #1
 8004358:	d037      	beq.n	80043ca <_malloc_r+0xe6>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	442b      	add	r3, r5
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	f8d8 3000 	ldr.w	r3, [r8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d038      	beq.n	80043da <_malloc_r+0xf6>
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	42a2      	cmp	r2, r4
 800436c:	d12b      	bne.n	80043c6 <_malloc_r+0xe2>
 800436e:	2200      	movs	r2, #0
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	e00f      	b.n	8004394 <_malloc_r+0xb0>
 8004374:	6822      	ldr	r2, [r4, #0]
 8004376:	1b52      	subs	r2, r2, r5
 8004378:	d41f      	bmi.n	80043ba <_malloc_r+0xd6>
 800437a:	2a0b      	cmp	r2, #11
 800437c:	d917      	bls.n	80043ae <_malloc_r+0xca>
 800437e:	1961      	adds	r1, r4, r5
 8004380:	42a3      	cmp	r3, r4
 8004382:	6025      	str	r5, [r4, #0]
 8004384:	bf18      	it	ne
 8004386:	6059      	strne	r1, [r3, #4]
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	bf08      	it	eq
 800438c:	f8c8 1000 	streq.w	r1, [r8]
 8004390:	5162      	str	r2, [r4, r5]
 8004392:	604b      	str	r3, [r1, #4]
 8004394:	4638      	mov	r0, r7
 8004396:	f104 060b 	add.w	r6, r4, #11
 800439a:	f000 f829 	bl	80043f0 <__malloc_unlock>
 800439e:	f026 0607 	bic.w	r6, r6, #7
 80043a2:	1d23      	adds	r3, r4, #4
 80043a4:	1af2      	subs	r2, r6, r3
 80043a6:	d0ae      	beq.n	8004306 <_malloc_r+0x22>
 80043a8:	1b9b      	subs	r3, r3, r6
 80043aa:	50a3      	str	r3, [r4, r2]
 80043ac:	e7ab      	b.n	8004306 <_malloc_r+0x22>
 80043ae:	42a3      	cmp	r3, r4
 80043b0:	6862      	ldr	r2, [r4, #4]
 80043b2:	d1dd      	bne.n	8004370 <_malloc_r+0x8c>
 80043b4:	f8c8 2000 	str.w	r2, [r8]
 80043b8:	e7ec      	b.n	8004394 <_malloc_r+0xb0>
 80043ba:	4623      	mov	r3, r4
 80043bc:	6864      	ldr	r4, [r4, #4]
 80043be:	e7ac      	b.n	800431a <_malloc_r+0x36>
 80043c0:	4634      	mov	r4, r6
 80043c2:	6876      	ldr	r6, [r6, #4]
 80043c4:	e7b4      	b.n	8004330 <_malloc_r+0x4c>
 80043c6:	4613      	mov	r3, r2
 80043c8:	e7cc      	b.n	8004364 <_malloc_r+0x80>
 80043ca:	230c      	movs	r3, #12
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4638      	mov	r0, r7
 80043d0:	f000 f80e 	bl	80043f0 <__malloc_unlock>
 80043d4:	e797      	b.n	8004306 <_malloc_r+0x22>
 80043d6:	6025      	str	r5, [r4, #0]
 80043d8:	e7dc      	b.n	8004394 <_malloc_r+0xb0>
 80043da:	605b      	str	r3, [r3, #4]
 80043dc:	deff      	udf	#255	; 0xff
 80043de:	bf00      	nop
 80043e0:	2000030c 	.word	0x2000030c

080043e4 <__malloc_lock>:
 80043e4:	4801      	ldr	r0, [pc, #4]	; (80043ec <__malloc_lock+0x8>)
 80043e6:	f7ff bf0f 	b.w	8004208 <__retarget_lock_acquire_recursive>
 80043ea:	bf00      	nop
 80043ec:	20000308 	.word	0x20000308

080043f0 <__malloc_unlock>:
 80043f0:	4801      	ldr	r0, [pc, #4]	; (80043f8 <__malloc_unlock+0x8>)
 80043f2:	f7ff bf0a 	b.w	800420a <__retarget_lock_release_recursive>
 80043f6:	bf00      	nop
 80043f8:	20000308 	.word	0x20000308

080043fc <__ssputs_r>:
 80043fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	688e      	ldr	r6, [r1, #8]
 8004402:	461f      	mov	r7, r3
 8004404:	42be      	cmp	r6, r7
 8004406:	680b      	ldr	r3, [r1, #0]
 8004408:	4682      	mov	sl, r0
 800440a:	460c      	mov	r4, r1
 800440c:	4690      	mov	r8, r2
 800440e:	d82c      	bhi.n	800446a <__ssputs_r+0x6e>
 8004410:	898a      	ldrh	r2, [r1, #12]
 8004412:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004416:	d026      	beq.n	8004466 <__ssputs_r+0x6a>
 8004418:	6965      	ldr	r5, [r4, #20]
 800441a:	6909      	ldr	r1, [r1, #16]
 800441c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004420:	eba3 0901 	sub.w	r9, r3, r1
 8004424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004428:	1c7b      	adds	r3, r7, #1
 800442a:	444b      	add	r3, r9
 800442c:	106d      	asrs	r5, r5, #1
 800442e:	429d      	cmp	r5, r3
 8004430:	bf38      	it	cc
 8004432:	461d      	movcc	r5, r3
 8004434:	0553      	lsls	r3, r2, #21
 8004436:	d527      	bpl.n	8004488 <__ssputs_r+0x8c>
 8004438:	4629      	mov	r1, r5
 800443a:	f7ff ff53 	bl	80042e4 <_malloc_r>
 800443e:	4606      	mov	r6, r0
 8004440:	b360      	cbz	r0, 800449c <__ssputs_r+0xa0>
 8004442:	6921      	ldr	r1, [r4, #16]
 8004444:	464a      	mov	r2, r9
 8004446:	f000 faeb 	bl	8004a20 <memcpy>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	6126      	str	r6, [r4, #16]
 8004458:	6165      	str	r5, [r4, #20]
 800445a:	444e      	add	r6, r9
 800445c:	eba5 0509 	sub.w	r5, r5, r9
 8004460:	6026      	str	r6, [r4, #0]
 8004462:	60a5      	str	r5, [r4, #8]
 8004464:	463e      	mov	r6, r7
 8004466:	42be      	cmp	r6, r7
 8004468:	d900      	bls.n	800446c <__ssputs_r+0x70>
 800446a:	463e      	mov	r6, r7
 800446c:	6820      	ldr	r0, [r4, #0]
 800446e:	4632      	mov	r2, r6
 8004470:	4641      	mov	r1, r8
 8004472:	f000 faab 	bl	80049cc <memmove>
 8004476:	68a3      	ldr	r3, [r4, #8]
 8004478:	1b9b      	subs	r3, r3, r6
 800447a:	60a3      	str	r3, [r4, #8]
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	4433      	add	r3, r6
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	2000      	movs	r0, #0
 8004484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004488:	462a      	mov	r2, r5
 800448a:	f000 fad7 	bl	8004a3c <_realloc_r>
 800448e:	4606      	mov	r6, r0
 8004490:	2800      	cmp	r0, #0
 8004492:	d1e0      	bne.n	8004456 <__ssputs_r+0x5a>
 8004494:	6921      	ldr	r1, [r4, #16]
 8004496:	4650      	mov	r0, sl
 8004498:	f7ff feb8 	bl	800420c <_free_r>
 800449c:	230c      	movs	r3, #12
 800449e:	f8ca 3000 	str.w	r3, [sl]
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a8:	81a3      	strh	r3, [r4, #12]
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	e7e9      	b.n	8004484 <__ssputs_r+0x88>

080044b0 <_svfiprintf_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	4698      	mov	r8, r3
 80044b6:	898b      	ldrh	r3, [r1, #12]
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	b09d      	sub	sp, #116	; 0x74
 80044bc:	4607      	mov	r7, r0
 80044be:	460d      	mov	r5, r1
 80044c0:	4614      	mov	r4, r2
 80044c2:	d50e      	bpl.n	80044e2 <_svfiprintf_r+0x32>
 80044c4:	690b      	ldr	r3, [r1, #16]
 80044c6:	b963      	cbnz	r3, 80044e2 <_svfiprintf_r+0x32>
 80044c8:	2140      	movs	r1, #64	; 0x40
 80044ca:	f7ff ff0b 	bl	80042e4 <_malloc_r>
 80044ce:	6028      	str	r0, [r5, #0]
 80044d0:	6128      	str	r0, [r5, #16]
 80044d2:	b920      	cbnz	r0, 80044de <_svfiprintf_r+0x2e>
 80044d4:	230c      	movs	r3, #12
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e0d0      	b.n	8004680 <_svfiprintf_r+0x1d0>
 80044de:	2340      	movs	r3, #64	; 0x40
 80044e0:	616b      	str	r3, [r5, #20]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9309      	str	r3, [sp, #36]	; 0x24
 80044e6:	2320      	movs	r3, #32
 80044e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f0:	2330      	movs	r3, #48	; 0x30
 80044f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004698 <_svfiprintf_r+0x1e8>
 80044f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044fa:	f04f 0901 	mov.w	r9, #1
 80044fe:	4623      	mov	r3, r4
 8004500:	469a      	mov	sl, r3
 8004502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004506:	b10a      	cbz	r2, 800450c <_svfiprintf_r+0x5c>
 8004508:	2a25      	cmp	r2, #37	; 0x25
 800450a:	d1f9      	bne.n	8004500 <_svfiprintf_r+0x50>
 800450c:	ebba 0b04 	subs.w	fp, sl, r4
 8004510:	d00b      	beq.n	800452a <_svfiprintf_r+0x7a>
 8004512:	465b      	mov	r3, fp
 8004514:	4622      	mov	r2, r4
 8004516:	4629      	mov	r1, r5
 8004518:	4638      	mov	r0, r7
 800451a:	f7ff ff6f 	bl	80043fc <__ssputs_r>
 800451e:	3001      	adds	r0, #1
 8004520:	f000 80a9 	beq.w	8004676 <_svfiprintf_r+0x1c6>
 8004524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004526:	445a      	add	r2, fp
 8004528:	9209      	str	r2, [sp, #36]	; 0x24
 800452a:	f89a 3000 	ldrb.w	r3, [sl]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a1 	beq.w	8004676 <_svfiprintf_r+0x1c6>
 8004534:	2300      	movs	r3, #0
 8004536:	f04f 32ff 	mov.w	r2, #4294967295
 800453a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800453e:	f10a 0a01 	add.w	sl, sl, #1
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	9307      	str	r3, [sp, #28]
 8004546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800454a:	931a      	str	r3, [sp, #104]	; 0x68
 800454c:	4654      	mov	r4, sl
 800454e:	2205      	movs	r2, #5
 8004550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004554:	4850      	ldr	r0, [pc, #320]	; (8004698 <_svfiprintf_r+0x1e8>)
 8004556:	f7fb fe43 	bl	80001e0 <memchr>
 800455a:	9a04      	ldr	r2, [sp, #16]
 800455c:	b9d8      	cbnz	r0, 8004596 <_svfiprintf_r+0xe6>
 800455e:	06d0      	lsls	r0, r2, #27
 8004560:	bf44      	itt	mi
 8004562:	2320      	movmi	r3, #32
 8004564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004568:	0711      	lsls	r1, r2, #28
 800456a:	bf44      	itt	mi
 800456c:	232b      	movmi	r3, #43	; 0x2b
 800456e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004572:	f89a 3000 	ldrb.w	r3, [sl]
 8004576:	2b2a      	cmp	r3, #42	; 0x2a
 8004578:	d015      	beq.n	80045a6 <_svfiprintf_r+0xf6>
 800457a:	9a07      	ldr	r2, [sp, #28]
 800457c:	4654      	mov	r4, sl
 800457e:	2000      	movs	r0, #0
 8004580:	f04f 0c0a 	mov.w	ip, #10
 8004584:	4621      	mov	r1, r4
 8004586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800458a:	3b30      	subs	r3, #48	; 0x30
 800458c:	2b09      	cmp	r3, #9
 800458e:	d94d      	bls.n	800462c <_svfiprintf_r+0x17c>
 8004590:	b1b0      	cbz	r0, 80045c0 <_svfiprintf_r+0x110>
 8004592:	9207      	str	r2, [sp, #28]
 8004594:	e014      	b.n	80045c0 <_svfiprintf_r+0x110>
 8004596:	eba0 0308 	sub.w	r3, r0, r8
 800459a:	fa09 f303 	lsl.w	r3, r9, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	9304      	str	r3, [sp, #16]
 80045a2:	46a2      	mov	sl, r4
 80045a4:	e7d2      	b.n	800454c <_svfiprintf_r+0x9c>
 80045a6:	9b03      	ldr	r3, [sp, #12]
 80045a8:	1d19      	adds	r1, r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9103      	str	r1, [sp, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfbb      	ittet	lt
 80045b2:	425b      	neglt	r3, r3
 80045b4:	f042 0202 	orrlt.w	r2, r2, #2
 80045b8:	9307      	strge	r3, [sp, #28]
 80045ba:	9307      	strlt	r3, [sp, #28]
 80045bc:	bfb8      	it	lt
 80045be:	9204      	strlt	r2, [sp, #16]
 80045c0:	7823      	ldrb	r3, [r4, #0]
 80045c2:	2b2e      	cmp	r3, #46	; 0x2e
 80045c4:	d10c      	bne.n	80045e0 <_svfiprintf_r+0x130>
 80045c6:	7863      	ldrb	r3, [r4, #1]
 80045c8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ca:	d134      	bne.n	8004636 <_svfiprintf_r+0x186>
 80045cc:	9b03      	ldr	r3, [sp, #12]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	9203      	str	r2, [sp, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bfb8      	it	lt
 80045d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80045dc:	3402      	adds	r4, #2
 80045de:	9305      	str	r3, [sp, #20]
 80045e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80046a8 <_svfiprintf_r+0x1f8>
 80045e4:	7821      	ldrb	r1, [r4, #0]
 80045e6:	2203      	movs	r2, #3
 80045e8:	4650      	mov	r0, sl
 80045ea:	f7fb fdf9 	bl	80001e0 <memchr>
 80045ee:	b138      	cbz	r0, 8004600 <_svfiprintf_r+0x150>
 80045f0:	9b04      	ldr	r3, [sp, #16]
 80045f2:	eba0 000a 	sub.w	r0, r0, sl
 80045f6:	2240      	movs	r2, #64	; 0x40
 80045f8:	4082      	lsls	r2, r0
 80045fa:	4313      	orrs	r3, r2
 80045fc:	3401      	adds	r4, #1
 80045fe:	9304      	str	r3, [sp, #16]
 8004600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004604:	4825      	ldr	r0, [pc, #148]	; (800469c <_svfiprintf_r+0x1ec>)
 8004606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800460a:	2206      	movs	r2, #6
 800460c:	f7fb fde8 	bl	80001e0 <memchr>
 8004610:	2800      	cmp	r0, #0
 8004612:	d038      	beq.n	8004686 <_svfiprintf_r+0x1d6>
 8004614:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <_svfiprintf_r+0x1f0>)
 8004616:	bb1b      	cbnz	r3, 8004660 <_svfiprintf_r+0x1b0>
 8004618:	9b03      	ldr	r3, [sp, #12]
 800461a:	3307      	adds	r3, #7
 800461c:	f023 0307 	bic.w	r3, r3, #7
 8004620:	3308      	adds	r3, #8
 8004622:	9303      	str	r3, [sp, #12]
 8004624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004626:	4433      	add	r3, r6
 8004628:	9309      	str	r3, [sp, #36]	; 0x24
 800462a:	e768      	b.n	80044fe <_svfiprintf_r+0x4e>
 800462c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004630:	460c      	mov	r4, r1
 8004632:	2001      	movs	r0, #1
 8004634:	e7a6      	b.n	8004584 <_svfiprintf_r+0xd4>
 8004636:	2300      	movs	r3, #0
 8004638:	3401      	adds	r4, #1
 800463a:	9305      	str	r3, [sp, #20]
 800463c:	4619      	mov	r1, r3
 800463e:	f04f 0c0a 	mov.w	ip, #10
 8004642:	4620      	mov	r0, r4
 8004644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004648:	3a30      	subs	r2, #48	; 0x30
 800464a:	2a09      	cmp	r2, #9
 800464c:	d903      	bls.n	8004656 <_svfiprintf_r+0x1a6>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0c6      	beq.n	80045e0 <_svfiprintf_r+0x130>
 8004652:	9105      	str	r1, [sp, #20]
 8004654:	e7c4      	b.n	80045e0 <_svfiprintf_r+0x130>
 8004656:	fb0c 2101 	mla	r1, ip, r1, r2
 800465a:	4604      	mov	r4, r0
 800465c:	2301      	movs	r3, #1
 800465e:	e7f0      	b.n	8004642 <_svfiprintf_r+0x192>
 8004660:	ab03      	add	r3, sp, #12
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	462a      	mov	r2, r5
 8004666:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <_svfiprintf_r+0x1f4>)
 8004668:	a904      	add	r1, sp, #16
 800466a:	4638      	mov	r0, r7
 800466c:	f3af 8000 	nop.w
 8004670:	1c42      	adds	r2, r0, #1
 8004672:	4606      	mov	r6, r0
 8004674:	d1d6      	bne.n	8004624 <_svfiprintf_r+0x174>
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	065b      	lsls	r3, r3, #25
 800467a:	f53f af2d 	bmi.w	80044d8 <_svfiprintf_r+0x28>
 800467e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004680:	b01d      	add	sp, #116	; 0x74
 8004682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004686:	ab03      	add	r3, sp, #12
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	462a      	mov	r2, r5
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <_svfiprintf_r+0x1f4>)
 800468e:	a904      	add	r1, sp, #16
 8004690:	4638      	mov	r0, r7
 8004692:	f000 f879 	bl	8004788 <_printf_i>
 8004696:	e7eb      	b.n	8004670 <_svfiprintf_r+0x1c0>
 8004698:	08004b54 	.word	0x08004b54
 800469c:	08004b5e 	.word	0x08004b5e
 80046a0:	00000000 	.word	0x00000000
 80046a4:	080043fd 	.word	0x080043fd
 80046a8:	08004b5a 	.word	0x08004b5a

080046ac <_printf_common>:
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	4616      	mov	r6, r2
 80046b2:	4699      	mov	r9, r3
 80046b4:	688a      	ldr	r2, [r1, #8]
 80046b6:	690b      	ldr	r3, [r1, #16]
 80046b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046bc:	4293      	cmp	r3, r2
 80046be:	bfb8      	it	lt
 80046c0:	4613      	movlt	r3, r2
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046c8:	4607      	mov	r7, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	b10a      	cbz	r2, 80046d2 <_printf_common+0x26>
 80046ce:	3301      	adds	r3, #1
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	6833      	ldrmi	r3, [r6, #0]
 80046da:	3302      	addmi	r3, #2
 80046dc:	6033      	strmi	r3, [r6, #0]
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	f015 0506 	ands.w	r5, r5, #6
 80046e4:	d106      	bne.n	80046f4 <_printf_common+0x48>
 80046e6:	f104 0a19 	add.w	sl, r4, #25
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	6832      	ldr	r2, [r6, #0]
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dc26      	bgt.n	8004742 <_printf_common+0x96>
 80046f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046f8:	1e13      	subs	r3, r2, #0
 80046fa:	6822      	ldr	r2, [r4, #0]
 80046fc:	bf18      	it	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	0692      	lsls	r2, r2, #26
 8004702:	d42b      	bmi.n	800475c <_printf_common+0xb0>
 8004704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004708:	4649      	mov	r1, r9
 800470a:	4638      	mov	r0, r7
 800470c:	47c0      	blx	r8
 800470e:	3001      	adds	r0, #1
 8004710:	d01e      	beq.n	8004750 <_printf_common+0xa4>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	f003 0306 	and.w	r3, r3, #6
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf02      	ittt	eq
 800471e:	68e5      	ldreq	r5, [r4, #12]
 8004720:	6833      	ldreq	r3, [r6, #0]
 8004722:	1aed      	subeq	r5, r5, r3
 8004724:	68a3      	ldr	r3, [r4, #8]
 8004726:	bf0c      	ite	eq
 8004728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800472c:	2500      	movne	r5, #0
 800472e:	4293      	cmp	r3, r2
 8004730:	bfc4      	itt	gt
 8004732:	1a9b      	subgt	r3, r3, r2
 8004734:	18ed      	addgt	r5, r5, r3
 8004736:	2600      	movs	r6, #0
 8004738:	341a      	adds	r4, #26
 800473a:	42b5      	cmp	r5, r6
 800473c:	d11a      	bne.n	8004774 <_printf_common+0xc8>
 800473e:	2000      	movs	r0, #0
 8004740:	e008      	b.n	8004754 <_printf_common+0xa8>
 8004742:	2301      	movs	r3, #1
 8004744:	4652      	mov	r2, sl
 8004746:	4649      	mov	r1, r9
 8004748:	4638      	mov	r0, r7
 800474a:	47c0      	blx	r8
 800474c:	3001      	adds	r0, #1
 800474e:	d103      	bne.n	8004758 <_printf_common+0xac>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004758:	3501      	adds	r5, #1
 800475a:	e7c6      	b.n	80046ea <_printf_common+0x3e>
 800475c:	18e1      	adds	r1, r4, r3
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	2030      	movs	r0, #48	; 0x30
 8004762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004766:	4422      	add	r2, r4
 8004768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800476c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004770:	3302      	adds	r3, #2
 8004772:	e7c7      	b.n	8004704 <_printf_common+0x58>
 8004774:	2301      	movs	r3, #1
 8004776:	4622      	mov	r2, r4
 8004778:	4649      	mov	r1, r9
 800477a:	4638      	mov	r0, r7
 800477c:	47c0      	blx	r8
 800477e:	3001      	adds	r0, #1
 8004780:	d0e6      	beq.n	8004750 <_printf_common+0xa4>
 8004782:	3601      	adds	r6, #1
 8004784:	e7d9      	b.n	800473a <_printf_common+0x8e>
	...

08004788 <_printf_i>:
 8004788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	7e0f      	ldrb	r7, [r1, #24]
 800478e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004790:	2f78      	cmp	r7, #120	; 0x78
 8004792:	4691      	mov	r9, r2
 8004794:	4680      	mov	r8, r0
 8004796:	460c      	mov	r4, r1
 8004798:	469a      	mov	sl, r3
 800479a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800479e:	d807      	bhi.n	80047b0 <_printf_i+0x28>
 80047a0:	2f62      	cmp	r7, #98	; 0x62
 80047a2:	d80a      	bhi.n	80047ba <_printf_i+0x32>
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	f000 80d4 	beq.w	8004952 <_printf_i+0x1ca>
 80047aa:	2f58      	cmp	r7, #88	; 0x58
 80047ac:	f000 80c0 	beq.w	8004930 <_printf_i+0x1a8>
 80047b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047b8:	e03a      	b.n	8004830 <_printf_i+0xa8>
 80047ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047be:	2b15      	cmp	r3, #21
 80047c0:	d8f6      	bhi.n	80047b0 <_printf_i+0x28>
 80047c2:	a101      	add	r1, pc, #4	; (adr r1, 80047c8 <_printf_i+0x40>)
 80047c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004835 	.word	0x08004835
 80047d0:	080047b1 	.word	0x080047b1
 80047d4:	080047b1 	.word	0x080047b1
 80047d8:	080047b1 	.word	0x080047b1
 80047dc:	080047b1 	.word	0x080047b1
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080047b1 	.word	0x080047b1
 80047e8:	080047b1 	.word	0x080047b1
 80047ec:	080047b1 	.word	0x080047b1
 80047f0:	080047b1 	.word	0x080047b1
 80047f4:	08004939 	.word	0x08004939
 80047f8:	08004861 	.word	0x08004861
 80047fc:	080048f3 	.word	0x080048f3
 8004800:	080047b1 	.word	0x080047b1
 8004804:	080047b1 	.word	0x080047b1
 8004808:	0800495b 	.word	0x0800495b
 800480c:	080047b1 	.word	0x080047b1
 8004810:	08004861 	.word	0x08004861
 8004814:	080047b1 	.word	0x080047b1
 8004818:	080047b1 	.word	0x080047b1
 800481c:	080048fb 	.word	0x080048fb
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	1d1a      	adds	r2, r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800482c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004830:	2301      	movs	r3, #1
 8004832:	e09f      	b.n	8004974 <_printf_i+0x1ec>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	682b      	ldr	r3, [r5, #0]
 8004838:	0607      	lsls	r7, r0, #24
 800483a:	f103 0104 	add.w	r1, r3, #4
 800483e:	6029      	str	r1, [r5, #0]
 8004840:	d501      	bpl.n	8004846 <_printf_i+0xbe>
 8004842:	681e      	ldr	r6, [r3, #0]
 8004844:	e003      	b.n	800484e <_printf_i+0xc6>
 8004846:	0646      	lsls	r6, r0, #25
 8004848:	d5fb      	bpl.n	8004842 <_printf_i+0xba>
 800484a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800484e:	2e00      	cmp	r6, #0
 8004850:	da03      	bge.n	800485a <_printf_i+0xd2>
 8004852:	232d      	movs	r3, #45	; 0x2d
 8004854:	4276      	negs	r6, r6
 8004856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485a:	485a      	ldr	r0, [pc, #360]	; (80049c4 <_printf_i+0x23c>)
 800485c:	230a      	movs	r3, #10
 800485e:	e012      	b.n	8004886 <_printf_i+0xfe>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	6820      	ldr	r0, [r4, #0]
 8004864:	1d19      	adds	r1, r3, #4
 8004866:	6029      	str	r1, [r5, #0]
 8004868:	0605      	lsls	r5, r0, #24
 800486a:	d501      	bpl.n	8004870 <_printf_i+0xe8>
 800486c:	681e      	ldr	r6, [r3, #0]
 800486e:	e002      	b.n	8004876 <_printf_i+0xee>
 8004870:	0641      	lsls	r1, r0, #25
 8004872:	d5fb      	bpl.n	800486c <_printf_i+0xe4>
 8004874:	881e      	ldrh	r6, [r3, #0]
 8004876:	4853      	ldr	r0, [pc, #332]	; (80049c4 <_printf_i+0x23c>)
 8004878:	2f6f      	cmp	r7, #111	; 0x6f
 800487a:	bf0c      	ite	eq
 800487c:	2308      	moveq	r3, #8
 800487e:	230a      	movne	r3, #10
 8004880:	2100      	movs	r1, #0
 8004882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004886:	6865      	ldr	r5, [r4, #4]
 8004888:	60a5      	str	r5, [r4, #8]
 800488a:	2d00      	cmp	r5, #0
 800488c:	bfa2      	ittt	ge
 800488e:	6821      	ldrge	r1, [r4, #0]
 8004890:	f021 0104 	bicge.w	r1, r1, #4
 8004894:	6021      	strge	r1, [r4, #0]
 8004896:	b90e      	cbnz	r6, 800489c <_printf_i+0x114>
 8004898:	2d00      	cmp	r5, #0
 800489a:	d04b      	beq.n	8004934 <_printf_i+0x1ac>
 800489c:	4615      	mov	r5, r2
 800489e:	fbb6 f1f3 	udiv	r1, r6, r3
 80048a2:	fb03 6711 	mls	r7, r3, r1, r6
 80048a6:	5dc7      	ldrb	r7, [r0, r7]
 80048a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048ac:	4637      	mov	r7, r6
 80048ae:	42bb      	cmp	r3, r7
 80048b0:	460e      	mov	r6, r1
 80048b2:	d9f4      	bls.n	800489e <_printf_i+0x116>
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d10b      	bne.n	80048d0 <_printf_i+0x148>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	07de      	lsls	r6, r3, #31
 80048bc:	d508      	bpl.n	80048d0 <_printf_i+0x148>
 80048be:	6923      	ldr	r3, [r4, #16]
 80048c0:	6861      	ldr	r1, [r4, #4]
 80048c2:	4299      	cmp	r1, r3
 80048c4:	bfde      	ittt	le
 80048c6:	2330      	movle	r3, #48	; 0x30
 80048c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048d0:	1b52      	subs	r2, r2, r5
 80048d2:	6122      	str	r2, [r4, #16]
 80048d4:	f8cd a000 	str.w	sl, [sp]
 80048d8:	464b      	mov	r3, r9
 80048da:	aa03      	add	r2, sp, #12
 80048dc:	4621      	mov	r1, r4
 80048de:	4640      	mov	r0, r8
 80048e0:	f7ff fee4 	bl	80046ac <_printf_common>
 80048e4:	3001      	adds	r0, #1
 80048e6:	d14a      	bne.n	800497e <_printf_i+0x1f6>
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ec:	b004      	add	sp, #16
 80048ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	f043 0320 	orr.w	r3, r3, #32
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	4833      	ldr	r0, [pc, #204]	; (80049c8 <_printf_i+0x240>)
 80048fc:	2778      	movs	r7, #120	; 0x78
 80048fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	6829      	ldr	r1, [r5, #0]
 8004906:	061f      	lsls	r7, r3, #24
 8004908:	f851 6b04 	ldr.w	r6, [r1], #4
 800490c:	d402      	bmi.n	8004914 <_printf_i+0x18c>
 800490e:	065f      	lsls	r7, r3, #25
 8004910:	bf48      	it	mi
 8004912:	b2b6      	uxthmi	r6, r6
 8004914:	07df      	lsls	r7, r3, #31
 8004916:	bf48      	it	mi
 8004918:	f043 0320 	orrmi.w	r3, r3, #32
 800491c:	6029      	str	r1, [r5, #0]
 800491e:	bf48      	it	mi
 8004920:	6023      	strmi	r3, [r4, #0]
 8004922:	b91e      	cbnz	r6, 800492c <_printf_i+0x1a4>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	f023 0320 	bic.w	r3, r3, #32
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	2310      	movs	r3, #16
 800492e:	e7a7      	b.n	8004880 <_printf_i+0xf8>
 8004930:	4824      	ldr	r0, [pc, #144]	; (80049c4 <_printf_i+0x23c>)
 8004932:	e7e4      	b.n	80048fe <_printf_i+0x176>
 8004934:	4615      	mov	r5, r2
 8004936:	e7bd      	b.n	80048b4 <_printf_i+0x12c>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	6826      	ldr	r6, [r4, #0]
 800493c:	6961      	ldr	r1, [r4, #20]
 800493e:	1d18      	adds	r0, r3, #4
 8004940:	6028      	str	r0, [r5, #0]
 8004942:	0635      	lsls	r5, r6, #24
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	d501      	bpl.n	800494c <_printf_i+0x1c4>
 8004948:	6019      	str	r1, [r3, #0]
 800494a:	e002      	b.n	8004952 <_printf_i+0x1ca>
 800494c:	0670      	lsls	r0, r6, #25
 800494e:	d5fb      	bpl.n	8004948 <_printf_i+0x1c0>
 8004950:	8019      	strh	r1, [r3, #0]
 8004952:	2300      	movs	r3, #0
 8004954:	6123      	str	r3, [r4, #16]
 8004956:	4615      	mov	r5, r2
 8004958:	e7bc      	b.n	80048d4 <_printf_i+0x14c>
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	1d1a      	adds	r2, r3, #4
 800495e:	602a      	str	r2, [r5, #0]
 8004960:	681d      	ldr	r5, [r3, #0]
 8004962:	6862      	ldr	r2, [r4, #4]
 8004964:	2100      	movs	r1, #0
 8004966:	4628      	mov	r0, r5
 8004968:	f7fb fc3a 	bl	80001e0 <memchr>
 800496c:	b108      	cbz	r0, 8004972 <_printf_i+0x1ea>
 800496e:	1b40      	subs	r0, r0, r5
 8004970:	6060      	str	r0, [r4, #4]
 8004972:	6863      	ldr	r3, [r4, #4]
 8004974:	6123      	str	r3, [r4, #16]
 8004976:	2300      	movs	r3, #0
 8004978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800497c:	e7aa      	b.n	80048d4 <_printf_i+0x14c>
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	462a      	mov	r2, r5
 8004982:	4649      	mov	r1, r9
 8004984:	4640      	mov	r0, r8
 8004986:	47d0      	blx	sl
 8004988:	3001      	adds	r0, #1
 800498a:	d0ad      	beq.n	80048e8 <_printf_i+0x160>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	079b      	lsls	r3, r3, #30
 8004990:	d413      	bmi.n	80049ba <_printf_i+0x232>
 8004992:	68e0      	ldr	r0, [r4, #12]
 8004994:	9b03      	ldr	r3, [sp, #12]
 8004996:	4298      	cmp	r0, r3
 8004998:	bfb8      	it	lt
 800499a:	4618      	movlt	r0, r3
 800499c:	e7a6      	b.n	80048ec <_printf_i+0x164>
 800499e:	2301      	movs	r3, #1
 80049a0:	4632      	mov	r2, r6
 80049a2:	4649      	mov	r1, r9
 80049a4:	4640      	mov	r0, r8
 80049a6:	47d0      	blx	sl
 80049a8:	3001      	adds	r0, #1
 80049aa:	d09d      	beq.n	80048e8 <_printf_i+0x160>
 80049ac:	3501      	adds	r5, #1
 80049ae:	68e3      	ldr	r3, [r4, #12]
 80049b0:	9903      	ldr	r1, [sp, #12]
 80049b2:	1a5b      	subs	r3, r3, r1
 80049b4:	42ab      	cmp	r3, r5
 80049b6:	dcf2      	bgt.n	800499e <_printf_i+0x216>
 80049b8:	e7eb      	b.n	8004992 <_printf_i+0x20a>
 80049ba:	2500      	movs	r5, #0
 80049bc:	f104 0619 	add.w	r6, r4, #25
 80049c0:	e7f5      	b.n	80049ae <_printf_i+0x226>
 80049c2:	bf00      	nop
 80049c4:	08004b65 	.word	0x08004b65
 80049c8:	08004b76 	.word	0x08004b76

080049cc <memmove>:
 80049cc:	4288      	cmp	r0, r1
 80049ce:	b510      	push	{r4, lr}
 80049d0:	eb01 0402 	add.w	r4, r1, r2
 80049d4:	d902      	bls.n	80049dc <memmove+0x10>
 80049d6:	4284      	cmp	r4, r0
 80049d8:	4623      	mov	r3, r4
 80049da:	d807      	bhi.n	80049ec <memmove+0x20>
 80049dc:	1e43      	subs	r3, r0, #1
 80049de:	42a1      	cmp	r1, r4
 80049e0:	d008      	beq.n	80049f4 <memmove+0x28>
 80049e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ea:	e7f8      	b.n	80049de <memmove+0x12>
 80049ec:	4402      	add	r2, r0
 80049ee:	4601      	mov	r1, r0
 80049f0:	428a      	cmp	r2, r1
 80049f2:	d100      	bne.n	80049f6 <memmove+0x2a>
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049fe:	e7f7      	b.n	80049f0 <memmove+0x24>

08004a00 <_sbrk_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d06      	ldr	r5, [pc, #24]	; (8004a1c <_sbrk_r+0x1c>)
 8004a04:	2300      	movs	r3, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	f7fb ff42 	bl	8000894 <_sbrk>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_sbrk_r+0x1a>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_sbrk_r+0x1a>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	20000304 	.word	0x20000304

08004a20 <memcpy>:
 8004a20:	440a      	add	r2, r1
 8004a22:	4291      	cmp	r1, r2
 8004a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a28:	d100      	bne.n	8004a2c <memcpy+0xc>
 8004a2a:	4770      	bx	lr
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a36:	4291      	cmp	r1, r2
 8004a38:	d1f9      	bne.n	8004a2e <memcpy+0xe>
 8004a3a:	bd10      	pop	{r4, pc}

08004a3c <_realloc_r>:
 8004a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a40:	4680      	mov	r8, r0
 8004a42:	4614      	mov	r4, r2
 8004a44:	460e      	mov	r6, r1
 8004a46:	b921      	cbnz	r1, 8004a52 <_realloc_r+0x16>
 8004a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	f7ff bc49 	b.w	80042e4 <_malloc_r>
 8004a52:	b92a      	cbnz	r2, 8004a60 <_realloc_r+0x24>
 8004a54:	f7ff fbda 	bl	800420c <_free_r>
 8004a58:	4625      	mov	r5, r4
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a60:	f000 f81b 	bl	8004a9a <_malloc_usable_size_r>
 8004a64:	4284      	cmp	r4, r0
 8004a66:	4607      	mov	r7, r0
 8004a68:	d802      	bhi.n	8004a70 <_realloc_r+0x34>
 8004a6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a6e:	d812      	bhi.n	8004a96 <_realloc_r+0x5a>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4640      	mov	r0, r8
 8004a74:	f7ff fc36 	bl	80042e4 <_malloc_r>
 8004a78:	4605      	mov	r5, r0
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d0ed      	beq.n	8004a5a <_realloc_r+0x1e>
 8004a7e:	42bc      	cmp	r4, r7
 8004a80:	4622      	mov	r2, r4
 8004a82:	4631      	mov	r1, r6
 8004a84:	bf28      	it	cs
 8004a86:	463a      	movcs	r2, r7
 8004a88:	f7ff ffca 	bl	8004a20 <memcpy>
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4640      	mov	r0, r8
 8004a90:	f7ff fbbc 	bl	800420c <_free_r>
 8004a94:	e7e1      	b.n	8004a5a <_realloc_r+0x1e>
 8004a96:	4635      	mov	r5, r6
 8004a98:	e7df      	b.n	8004a5a <_realloc_r+0x1e>

08004a9a <_malloc_usable_size_r>:
 8004a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a9e:	1f18      	subs	r0, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bfbc      	itt	lt
 8004aa4:	580b      	ldrlt	r3, [r1, r0]
 8004aa6:	18c0      	addlt	r0, r0, r3
 8004aa8:	4770      	bx	lr
	...

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
